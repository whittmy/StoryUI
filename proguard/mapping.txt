com.badlogic.gdx.Application -> com.badlogic.gdx.a:
    com.badlogic.gdx.ApplicationListener getApplicationListener() -> a
    com.badlogic.gdx.Graphics getGraphics() -> b
    void log(java.lang.String,java.lang.String) -> a
    void error(java.lang.String,java.lang.String) -> b
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void debug(java.lang.String,java.lang.String) -> c
    com.badlogic.gdx.Application$ApplicationType getType() -> c
    void postRunnable(java.lang.Runnable) -> a
    void addLifecycleListener(com.badlogic.gdx.LifecycleListener) -> a
    void removeLifecycleListener(com.badlogic.gdx.LifecycleListener) -> b
com.badlogic.gdx.Application$ApplicationType -> com.badlogic.gdx.b:
    com.badlogic.gdx.Application$ApplicationType Android -> a
    com.badlogic.gdx.Application$ApplicationType Desktop -> b
    com.badlogic.gdx.Application$ApplicationType HeadlessDesktop -> c
    com.badlogic.gdx.Application$ApplicationType Applet -> d
    com.badlogic.gdx.Application$ApplicationType WebGL -> e
    com.badlogic.gdx.Application$ApplicationType iOS -> f
    com.badlogic.gdx.Application$ApplicationType[] $VALUES -> g
    com.badlogic.gdx.Application$ApplicationType[] values() -> values
    com.badlogic.gdx.Application$ApplicationType valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.ApplicationListener -> com.badlogic.gdx.c:
    void create() -> a
    void resize(int,int) -> a
    void render() -> b
    void pause() -> c
    void resume() -> d
    void dispose() -> e
com.badlogic.gdx.Audio -> com.badlogic.gdx.d:
    com.badlogic.gdx.audio.Sound newSound(com.badlogic.gdx.files.FileHandle) -> a
    com.badlogic.gdx.audio.Music newMusic(com.badlogic.gdx.files.FileHandle) -> b
com.badlogic.gdx.Files -> com.badlogic.gdx.e:
    com.badlogic.gdx.files.FileHandle getFileHandle(java.lang.String,com.badlogic.gdx.Files$FileType) -> a
    com.badlogic.gdx.files.FileHandle classpath(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle internal(java.lang.String) -> b
    java.lang.String getExternalStoragePath() -> a
    java.lang.String getLocalStoragePath() -> b
com.badlogic.gdx.Files$FileType -> com.badlogic.gdx.f:
    com.badlogic.gdx.Files$FileType Classpath -> a
    com.badlogic.gdx.Files$FileType Internal -> b
    com.badlogic.gdx.Files$FileType External -> c
    com.badlogic.gdx.Files$FileType Absolute -> d
    com.badlogic.gdx.Files$FileType Local -> e
    com.badlogic.gdx.Files$FileType[] $VALUES -> f
    com.badlogic.gdx.Files$FileType[] values() -> values
    com.badlogic.gdx.Files$FileType valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.Game -> com.badlogic.gdx.g:
    com.badlogic.gdx.Screen screen -> a
    void dispose() -> e
    void pause() -> c
    void resume() -> d
    void render() -> b
    void resize(int,int) -> a
    void setScreen(com.badlogic.gdx.Screen) -> a
com.badlogic.gdx.Gdx -> com.badlogic.gdx.h:
    com.badlogic.gdx.Application app -> a
    com.badlogic.gdx.Graphics graphics -> b
    com.badlogic.gdx.Audio audio -> c
    com.badlogic.gdx.Input input -> d
    com.badlogic.gdx.Files files -> e
    com.badlogic.gdx.Net net -> f
    com.badlogic.gdx.graphics.GL20 gl -> g
    com.badlogic.gdx.graphics.GL20 gl20 -> h
    com.badlogic.gdx.graphics.GL30 gl30 -> i
com.badlogic.gdx.Graphics -> com.badlogic.gdx.i:
    int getWidth() -> a
    int getHeight() -> b
    float getDeltaTime() -> c
    com.badlogic.gdx.Graphics$DisplayMode getDesktopDisplayMode() -> d
    boolean supportsExtension(java.lang.String) -> a
    void requestRendering() -> e
com.badlogic.gdx.Graphics$BufferFormat -> com.badlogic.gdx.j:
    int r -> a
    int g -> b
    int b -> c
    int a -> d
    int depth -> e
    int stencil -> f
    int samples -> g
    boolean coverageSampling -> h
    java.lang.String toString() -> toString
com.badlogic.gdx.Graphics$DisplayMode -> com.badlogic.gdx.k:
    int width -> a
    int height -> b
    int refreshRate -> c
    int bitsPerPixel -> d
    java.lang.String toString() -> toString
com.badlogic.gdx.Input -> com.badlogic.gdx.l:
    int getX() -> a
    int getY() -> b
    boolean isTouched(int) -> a
    long getCurrentEventTime() -> c
    void setCatchBackKey(boolean) -> a
    void setCatchMenuKey(boolean) -> b
    void setInputProcessor(com.badlogic.gdx.InputProcessor) -> a
com.badlogic.gdx.Input$Orientation -> com.badlogic.gdx.m:
    com.badlogic.gdx.Input$Orientation Landscape -> a
    com.badlogic.gdx.Input$Orientation Portrait -> b
    com.badlogic.gdx.Input$Orientation[] $VALUES -> c
    com.badlogic.gdx.Input$Orientation[] values() -> values
    com.badlogic.gdx.Input$Orientation valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.Input$TextInputListener -> com.badlogic.gdx.n:
com.badlogic.gdx.InputAdapter -> com.badlogic.gdx.o:
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
    boolean mouseMoved(int,int) -> a
    boolean scrolled(int) -> c
com.badlogic.gdx.InputMultiplexer -> com.badlogic.gdx.p:
    com.badlogic.gdx.utils.Array processors -> a
    void addProcessor(com.badlogic.gdx.InputProcessor) -> a
    void clear() -> a
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
    boolean mouseMoved(int,int) -> a
    boolean scrolled(int) -> c
com.badlogic.gdx.InputProcessor -> com.badlogic.gdx.q:
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
    boolean mouseMoved(int,int) -> a
    boolean scrolled(int) -> c
com.badlogic.gdx.LifecycleListener -> com.badlogic.gdx.r:
    void pause() -> a
    void resume() -> b
    void dispose() -> c
com.badlogic.gdx.Net -> com.badlogic.gdx.s:
com.badlogic.gdx.Screen -> com.badlogic.gdx.t:
    void show() -> a
    void render(float) -> a
    void resize(int,int) -> b
    void pause() -> b
    void resume() -> c
    void hide() -> d
com.badlogic.gdx.assets.AssetDescriptor -> com.badlogic.gdx.a.a:
    java.lang.String fileName -> a
    java.lang.Class type -> b
    com.badlogic.gdx.assets.AssetLoaderParameters params -> c
    com.badlogic.gdx.files.FileHandle file -> d
    java.lang.String toString() -> toString
com.badlogic.gdx.assets.AssetErrorListener -> com.badlogic.gdx.a.b:
    void error(com.badlogic.gdx.assets.AssetDescriptor,java.lang.Throwable) -> a
com.badlogic.gdx.assets.AssetLoaderParameters -> com.badlogic.gdx.a.c:
    com.badlogic.gdx.assets.AssetLoaderParameters$LoadedCallback loadedCallback -> a
com.badlogic.gdx.assets.AssetLoaderParameters$LoadedCallback -> com.badlogic.gdx.a.d:
    void finishedLoading(com.badlogic.gdx.assets.AssetManager,java.lang.String,java.lang.Class) -> a
com.badlogic.gdx.assets.AssetLoadingTask -> com.badlogic.gdx.a.e:
    com.badlogic.gdx.assets.AssetManager manager -> a
    com.badlogic.gdx.assets.AssetDescriptor assetDesc -> b
    com.badlogic.gdx.assets.loaders.AssetLoader loader -> c
    com.badlogic.gdx.utils.async.AsyncExecutor executor -> d
    long startTime -> e
    boolean asyncDone -> f
    boolean dependenciesLoaded -> g
    com.badlogic.gdx.utils.Array dependencies -> h
    com.badlogic.gdx.utils.async.AsyncResult depsFuture -> i
    com.badlogic.gdx.utils.async.AsyncResult loadFuture -> j
    java.lang.Object asset -> k
    int ticks -> l
    boolean cancel -> m
    java.lang.Void call() -> a
    boolean update() -> b
    void handleSyncLoader() -> e
    void handleAsyncLoader() -> f
    com.badlogic.gdx.files.FileHandle resolve(com.badlogic.gdx.assets.loaders.AssetLoader,com.badlogic.gdx.assets.AssetDescriptor) -> a
    java.lang.Object getAsset() -> c
    java.lang.Object call() -> d
com.badlogic.gdx.assets.AssetManager -> com.badlogic.gdx.a.f:
    com.badlogic.gdx.utils.ObjectMap assets -> a
    com.badlogic.gdx.utils.ObjectMap assetTypes -> b
    com.badlogic.gdx.utils.ObjectMap assetDependencies -> c
    com.badlogic.gdx.utils.ObjectSet injected -> d
    com.badlogic.gdx.utils.ObjectMap loaders -> e
    com.badlogic.gdx.utils.Array loadQueue -> f
    com.badlogic.gdx.utils.async.AsyncExecutor executor -> g
    java.util.Stack tasks -> h
    com.badlogic.gdx.assets.AssetErrorListener listener -> i
    int loaded -> j
    int toLoad -> k
    com.badlogic.gdx.utils.Logger log -> l
    java.lang.Object get(java.lang.String) -> a
    java.lang.Object get(java.lang.String,java.lang.Class) -> a
    void unload(java.lang.String) -> b
    java.lang.String getAssetFileName(java.lang.Object) -> a
    boolean isLoaded(java.lang.String) -> c
    com.badlogic.gdx.assets.loaders.AssetLoader getLoader(java.lang.Class,java.lang.String) -> a
    void load(java.lang.String,java.lang.Class) -> b
    void load(java.lang.String,java.lang.Class,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    boolean update() -> a
    void finishLoading() -> b
    void injectDependencies(java.lang.String,com.badlogic.gdx.utils.Array) -> a
    void injectDependency(java.lang.String,com.badlogic.gdx.assets.AssetDescriptor) -> a
    void nextTask() -> e
    void addTask(com.badlogic.gdx.assets.AssetDescriptor) -> a
    void addAsset(java.lang.String,java.lang.Class,java.lang.Object) -> a
    boolean updateTask() -> f
    void incrementRefCountedDependencies(java.lang.String) -> f
    void handleTaskError(java.lang.Throwable) -> a
    void setLoader(java.lang.Class,com.badlogic.gdx.assets.loaders.AssetLoader) -> a
    void setLoader(java.lang.Class,java.lang.String,com.badlogic.gdx.assets.loaders.AssetLoader) -> a
    void dispose() -> c
    void clear() -> d
    int getReferenceCount(java.lang.String) -> d
    void setReferenceCount(java.lang.String,int) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String) -> e
com.badlogic.gdx.assets.RefCountedContainer -> com.badlogic.gdx.a.g:
    java.lang.Object object -> a
    int refCount -> b
    void incRefCount() -> a
    void decRefCount() -> b
    int getRefCount() -> c
    void setRefCount(int) -> a
    java.lang.Object getObject(java.lang.Class) -> a
com.badlogic.gdx.assets.loaders.AssetLoader -> com.badlogic.gdx.a.a.a:
    com.badlogic.gdx.assets.loaders.FileHandleResolver resolver -> a
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.AsynchronousAssetLoader -> com.badlogic.gdx.a.a.b:
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
com.badlogic.gdx.assets.loaders.BitmapFontLoader -> com.badlogic.gdx.a.a.c:
    com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData data -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.BitmapFontLoader$BitmapFontParameter) -> a
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.BitmapFontLoader$BitmapFontParameter) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.BitmapFontLoader$BitmapFontParameter) -> b
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.BitmapFontLoader$BitmapFontParameter -> com.badlogic.gdx.a.a.d:
    boolean flip -> b
    boolean genMipMaps -> c
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> d
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> e
    com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData bitmapFontData -> f
    java.lang.String atlasName -> g
com.badlogic.gdx.assets.loaders.CubemapLoader -> com.badlogic.gdx.a.a.e:
    com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapLoaderInfo info -> a
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter) -> a
    com.badlogic.gdx.graphics.Cubemap loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter) -> b
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter) -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapLoaderInfo -> com.badlogic.gdx.a.a.f:
    java.lang.String filename -> a
    com.badlogic.gdx.graphics.CubemapData data -> b
    com.badlogic.gdx.graphics.Cubemap cubemap -> c
com.badlogic.gdx.assets.loaders.CubemapLoader$CubemapParameter -> com.badlogic.gdx.a.a.g:
    com.badlogic.gdx.graphics.Pixmap$Format format -> b
    com.badlogic.gdx.graphics.Cubemap cubemap -> c
    com.badlogic.gdx.graphics.CubemapData cubemapData -> d
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> f
    com.badlogic.gdx.graphics.Texture$TextureWrap wrapU -> g
    com.badlogic.gdx.graphics.Texture$TextureWrap wrapV -> h
com.badlogic.gdx.assets.loaders.FileHandleResolver -> com.badlogic.gdx.a.a.h:
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> a
com.badlogic.gdx.assets.loaders.I18NBundleLoader -> com.badlogic.gdx.a.a.i:
    com.badlogic.gdx.utils.I18NBundle bundle -> a
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.I18NBundleLoader$I18NBundleParameter) -> a
    com.badlogic.gdx.utils.I18NBundle loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.I18NBundleLoader$I18NBundleParameter) -> b
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.I18NBundleLoader$I18NBundleParameter) -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.I18NBundleLoader$I18NBundleParameter -> com.badlogic.gdx.a.a.j:
    java.util.Locale locale -> b
    java.lang.String encoding -> c
com.badlogic.gdx.assets.loaders.ModelLoader -> com.badlogic.gdx.a.a.k:
    com.badlogic.gdx.utils.Array items -> a
    com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters defaultParameters -> b
    com.badlogic.gdx.graphics.g3d.model.data.ModelData loadModelData(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters) -> a
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters) -> a
    com.badlogic.gdx.graphics.g3d.Model loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters) -> b
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters -> com.badlogic.gdx.a.a.l:
    com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter textureParameter -> b
com.badlogic.gdx.assets.loaders.MusicLoader -> com.badlogic.gdx.a.a.m:
    com.badlogic.gdx.audio.Music music -> a
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.MusicLoader$MusicParameter) -> a
    com.badlogic.gdx.audio.Music loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.MusicLoader$MusicParameter) -> b
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.MusicLoader$MusicParameter) -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.MusicLoader$MusicParameter -> com.badlogic.gdx.a.a.n:
com.badlogic.gdx.assets.loaders.ParticleEffectLoader -> com.badlogic.gdx.a.a.o:
    com.badlogic.gdx.graphics.g2d.ParticleEffect load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ParticleEffectLoader$ParticleEffectParameter) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ParticleEffectLoader$ParticleEffectParameter) -> a
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.ParticleEffectLoader$ParticleEffectParameter -> com.badlogic.gdx.a.a.p:
    java.lang.String atlasFile -> b
    java.lang.String atlasPrefix -> c
    com.badlogic.gdx.files.FileHandle imagesDir -> d
com.badlogic.gdx.assets.loaders.PixmapLoader -> com.badlogic.gdx.a.a.q:
    com.badlogic.gdx.graphics.Pixmap pixmap -> a
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.PixmapLoader$PixmapParameter) -> a
    com.badlogic.gdx.graphics.Pixmap loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.PixmapLoader$PixmapParameter) -> b
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.PixmapLoader$PixmapParameter) -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.PixmapLoader$PixmapParameter -> com.badlogic.gdx.a.a.r:
com.badlogic.gdx.assets.loaders.SkinLoader -> com.badlogic.gdx.a.a.s:
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.SkinLoader$SkinParameter) -> a
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.SkinLoader$SkinParameter) -> a
    com.badlogic.gdx.scenes.scene2d.ui.Skin loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.SkinLoader$SkinParameter) -> b
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.SkinLoader$SkinParameter -> com.badlogic.gdx.a.a.t:
    java.lang.String textureAtlasPath -> b
    com.badlogic.gdx.utils.ObjectMap resources -> c
com.badlogic.gdx.assets.loaders.SoundLoader -> com.badlogic.gdx.a.a.u:
    com.badlogic.gdx.audio.Sound sound -> a
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.SoundLoader$SoundParameter) -> a
    com.badlogic.gdx.audio.Sound loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.SoundLoader$SoundParameter) -> b
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.SoundLoader$SoundParameter) -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.SoundLoader$SoundParameter -> com.badlogic.gdx.a.a.v:
com.badlogic.gdx.assets.loaders.SynchronousAssetLoader -> com.badlogic.gdx.a.a.w:
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.TextureAtlasLoader -> com.badlogic.gdx.a.a.x:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData data -> a
    com.badlogic.gdx.graphics.g2d.TextureAtlas load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.TextureAtlasLoader$TextureAtlasParameter) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.TextureAtlasLoader$TextureAtlasParameter) -> a
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.TextureAtlasLoader$TextureAtlasParameter -> com.badlogic.gdx.a.a.y:
    boolean flip -> b
com.badlogic.gdx.assets.loaders.TextureLoader -> com.badlogic.gdx.a.a.z:
    com.badlogic.gdx.assets.loaders.TextureLoader$TextureLoaderInfo info -> a
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter) -> a
    com.badlogic.gdx.graphics.Texture loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter) -> b
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter) -> a
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.assets.loaders.TextureLoader$TextureLoaderInfo -> com.badlogic.gdx.a.a.aa:
    java.lang.String filename -> a
    com.badlogic.gdx.graphics.TextureData data -> b
    com.badlogic.gdx.graphics.Texture texture -> c
com.badlogic.gdx.assets.loaders.TextureLoader$TextureParameter -> com.badlogic.gdx.a.a.ab:
    com.badlogic.gdx.graphics.Pixmap$Format format -> b
    boolean genMipMaps -> c
    com.badlogic.gdx.graphics.Texture texture -> d
    com.badlogic.gdx.graphics.TextureData textureData -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> f
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> g
    com.badlogic.gdx.graphics.Texture$TextureWrap wrapU -> h
    com.badlogic.gdx.graphics.Texture$TextureWrap wrapV -> i
com.badlogic.gdx.assets.loaders.resolvers.InternalFileHandleResolver -> com.badlogic.gdx.a.a.a.a:
    com.badlogic.gdx.files.FileHandle resolve(java.lang.String) -> a
com.badlogic.gdx.audio.Music -> com.badlogic.gdx.b.a:
    void play() -> a
    void stop() -> b
    boolean isPlaying() -> d
    void setLooping(boolean) -> a
    void dispose() -> c
com.badlogic.gdx.audio.Music$OnCompletionListener -> com.badlogic.gdx.b.b:
    void onCompletion(com.badlogic.gdx.audio.Music) -> a
com.badlogic.gdx.audio.Sound -> com.badlogic.gdx.b.c:
com.badlogic.gdx.backends.android.AndroidApplication -> com.badlogic.gdx.backends.android.a:
    com.badlogic.gdx.backends.android.AndroidGraphics graphics -> a
    com.badlogic.gdx.backends.android.AndroidInput input -> b
    com.badlogic.gdx.backends.android.AndroidAudio audio -> c
    com.badlogic.gdx.backends.android.AndroidFiles files -> d
    com.badlogic.gdx.backends.android.AndroidNet net -> e
    com.badlogic.gdx.ApplicationListener listener -> f
    android.os.Handler handler -> g
    boolean firstResume -> h
    com.badlogic.gdx.utils.Array runnables -> i
    com.badlogic.gdx.utils.Array executedRunnables -> j
    com.badlogic.gdx.utils.Array lifecycleListeners -> k
    com.badlogic.gdx.utils.Array androidEventListeners -> o
    int logLevel -> l
    boolean useImmersiveMode -> m
    boolean hideStatusBar -> n
    int wasFocusChanged -> p
    boolean isWaitingForAudio -> q
    void initialize(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> a
    void init(com.badlogic.gdx.ApplicationListener,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration,boolean) -> a
    android.widget.FrameLayout$LayoutParams createLayoutParams() -> d
    void createWakeLock(boolean) -> a
    void hideStatusBar(boolean) -> b
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void useImmersiveMode(boolean) -> c
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    com.badlogic.gdx.ApplicationListener getApplicationListener() -> a
    com.badlogic.gdx.Audio getAudio() -> e
    com.badlogic.gdx.Files getFiles() -> f
    com.badlogic.gdx.Graphics getGraphics() -> b
    com.badlogic.gdx.backends.android.AndroidInput getInput() -> g
    com.badlogic.gdx.Net getNet() -> h
    com.badlogic.gdx.Application$ApplicationType getType() -> c
    int getVersion() -> i
    void postRunnable(java.lang.Runnable) -> a
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void debug(java.lang.String,java.lang.String) -> c
    void log(java.lang.String,java.lang.String) -> a
    void log(java.lang.String,java.lang.String,java.lang.Throwable) -> b
    void error(java.lang.String,java.lang.String) -> b
    void error(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void addLifecycleListener(com.badlogic.gdx.LifecycleListener) -> a
    void removeLifecycleListener(com.badlogic.gdx.LifecycleListener) -> b
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    android.content.Context getContext() -> j
    com.badlogic.gdx.utils.Array getRunnables() -> k
    com.badlogic.gdx.utils.Array getExecutedRunnables() -> l
    com.badlogic.gdx.utils.Array getLifecycleListeners() -> m
com.badlogic.gdx.backends.android.AndroidApplication$1 -> com.badlogic.gdx.backends.android.b:
    com.badlogic.gdx.backends.android.AndroidApplication this$0 -> a
    void resume() -> b
    void pause() -> a
    void dispose() -> c
com.badlogic.gdx.backends.android.AndroidApplicationBase -> com.badlogic.gdx.backends.android.c:
    android.content.Context getContext() -> j
    com.badlogic.gdx.utils.Array getRunnables() -> k
    com.badlogic.gdx.utils.Array getExecutedRunnables() -> l
    com.badlogic.gdx.backends.android.AndroidInput getInput() -> g
    com.badlogic.gdx.utils.Array getLifecycleListeners() -> m
    android.view.WindowManager getWindowManager() -> getWindowManager
com.badlogic.gdx.backends.android.AndroidApplicationConfiguration -> com.badlogic.gdx.backends.android.d:
    int r -> a
    int g -> b
    int b -> c
    int a -> d
    int depth -> e
    int stencil -> f
    int numSamples -> g
    boolean useAccelerometer -> h
    boolean useCompass -> i
    int touchSleepTime -> j
    boolean useWakelock -> k
    boolean hideStatusBar -> l
    boolean disableAudio -> m
    int maxSimultaneousSounds -> n
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> o
    boolean getTouchEventsForLiveWallpaper -> p
    boolean useImmersiveMode -> q
    boolean useGLSurfaceView20API18 -> r
com.badlogic.gdx.backends.android.AndroidAudio -> com.badlogic.gdx.backends.android.e:
    android.media.SoundPool soundPool -> b
    android.media.AudioManager manager -> c
    java.util.List musics -> a
    void pause() -> a
    void resume() -> b
    com.badlogic.gdx.audio.Music newMusic(com.badlogic.gdx.files.FileHandle) -> b
    com.badlogic.gdx.audio.Sound newSound(com.badlogic.gdx.files.FileHandle) -> a
    void dispose() -> c
com.badlogic.gdx.backends.android.AndroidEventListener -> com.badlogic.gdx.backends.android.f:
    void onActivityResult(int,int,android.content.Intent) -> a
com.badlogic.gdx.backends.android.AndroidFileHandle -> com.badlogic.gdx.backends.android.g:
    android.content.res.AssetManager assets -> a
    com.badlogic.gdx.files.FileHandle child(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle sibling(java.lang.String) -> b
    com.badlogic.gdx.files.FileHandle parent() -> a
    java.io.InputStream read() -> b
    boolean exists() -> c
    long length() -> d
    java.io.File file() -> e
com.badlogic.gdx.backends.android.AndroidFiles -> com.badlogic.gdx.backends.android.h:
    java.lang.String sdcard -> a
    java.lang.String localpath -> b
    android.content.res.AssetManager assets -> c
    com.badlogic.gdx.files.FileHandle getFileHandle(java.lang.String,com.badlogic.gdx.Files$FileType) -> a
    com.badlogic.gdx.files.FileHandle classpath(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle internal(java.lang.String) -> b
    java.lang.String getExternalStoragePath() -> a
    java.lang.String getLocalStoragePath() -> b
com.badlogic.gdx.backends.android.AndroidGL20 -> com.badlogic.gdx.backends.android.AndroidGL20:
    void init() -> init
    void glAttachShader(int,int) -> glAttachShader
    void glBindBuffer(int,int) -> glBindBuffer
    void glBindFramebuffer(int,int) -> glBindFramebuffer
    void glBindRenderbuffer(int,int) -> glBindRenderbuffer
    void glBindTexture(int,int) -> glBindTexture
    void glBlendFunc(int,int) -> glBlendFunc
    void glBufferData(int,int,java.nio.Buffer,int) -> glBufferData
    void glBufferSubData(int,int,int,java.nio.Buffer) -> glBufferSubData
    int glCheckFramebufferStatus(int) -> glCheckFramebufferStatus
    void glClear(int) -> glClear
    void glClearColor(float,float,float,float) -> glClearColor
    void glCompileShader(int) -> glCompileShader
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexImage2D
    int glCreateProgram() -> glCreateProgram
    int glCreateShader(int) -> glCreateShader
    void glDeleteBuffer(int) -> glDeleteBuffer
    void glDeleteFramebuffer(int) -> glDeleteFramebuffer
    void glDeleteProgram(int) -> glDeleteProgram
    void glDeleteRenderbuffer(int) -> glDeleteRenderbuffer
    void glDeleteShader(int) -> glDeleteShader
    void glDeleteTexture(int) -> glDeleteTexture
    void glDepthMask(boolean) -> glDepthMask
    void glDisable(int) -> glDisable
    void glDisableVertexAttribArray(int) -> glDisableVertexAttribArray
    void glDrawArrays(int,int,int) -> glDrawArrays
    void glDrawElements(int,int,int,java.nio.Buffer) -> glDrawElements
    void glDrawElements(int,int,int,int) -> glDrawElements
    void glEnable(int) -> glEnable
    void glEnableVertexAttribArray(int) -> glEnableVertexAttribArray
    void glFramebufferRenderbuffer(int,int,int,int) -> glFramebufferRenderbuffer
    void glFramebufferTexture2D(int,int,int,int,int) -> glFramebufferTexture2D
    int glGenBuffer() -> glGenBuffer
    void glGenerateMipmap(int) -> glGenerateMipmap
    int glGenFramebuffer() -> glGenFramebuffer
    int glGenRenderbuffer() -> glGenRenderbuffer
    int glGenTexture() -> glGenTexture
    java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.Buffer) -> glGetActiveAttrib
    java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.Buffer) -> glGetActiveUniform
    int glGetAttribLocation(int,java.lang.String) -> glGetAttribLocation
    void glGetIntegerv(int,java.nio.IntBuffer) -> glGetIntegerv
    void glGetProgramiv(int,int,java.nio.IntBuffer) -> glGetProgramiv
    java.lang.String glGetProgramInfoLog(int) -> glGetProgramInfoLog
    void glGetShaderiv(int,int,java.nio.IntBuffer) -> glGetShaderiv
    java.lang.String glGetShaderInfoLog(int) -> glGetShaderInfoLog
    java.lang.String glGetString(int) -> glGetString
    int glGetUniformLocation(int,java.lang.String) -> glGetUniformLocation
    void glLinkProgram(int) -> glLinkProgram
    void glPixelStorei(int,int) -> glPixelStorei
    void glRenderbufferStorage(int,int,int,int) -> glRenderbufferStorage
    void glScissor(int,int,int,int) -> glScissor
    void glShaderSource(int,java.lang.String) -> glShaderSource
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage2D
    void glTexParameterf(int,int,float) -> glTexParameterf
    void glUniform1i(int,int) -> glUniform1i
    void glUniformMatrix4fv(int,int,boolean,float[],int) -> glUniformMatrix4fv
    void glUseProgram(int) -> glUseProgram
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> glVertexAttribPointer
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> glVertexAttribPointer
    void glViewport(int,int,int,int) -> glViewport
com.badlogic.gdx.backends.android.AndroidGraphics -> com.badlogic.gdx.backends.android.i:
    boolean enforceContinuousRendering -> a
    android.view.View view -> b
    int width -> c
    int height -> d
    com.badlogic.gdx.backends.android.AndroidApplicationBase app -> e
    com.badlogic.gdx.graphics.GL20 gl20 -> f
    javax.microedition.khronos.egl.EGLContext eglContext -> g
    java.lang.String extensions -> h
    long lastFrameTime -> i
    float deltaTime -> j
    long frameStart -> k
    long frameId -> l
    int frames -> m
    int fps -> n
    com.badlogic.gdx.math.WindowedMean mean -> o
    boolean created -> p
    boolean running -> q
    boolean pause -> r
    boolean resume -> s
    boolean destroy -> t
    float ppiX -> x
    float ppiY -> y
    float ppcX -> z
    float ppcY -> A
    float density -> B
    com.badlogic.gdx.backends.android.AndroidApplicationConfiguration config -> u
    com.badlogic.gdx.Graphics$BufferFormat bufferFormat -> C
    boolean isContinuous -> D
    int[] value -> v
    java.lang.Object synch -> w
    void preserveEGLContextOnPause() -> f
    android.view.View createGLSurfaceView(com.badlogic.gdx.backends.android.AndroidApplicationBase,com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy) -> a
    void onPauseGLSurfaceView() -> g
    void onResumeGLSurfaceView() -> h
    android.opengl.GLSurfaceView$EGLConfigChooser getEglConfigChooser() -> i
    void updatePpi() -> r
    boolean checkGL20() -> j
    int getHeight() -> b
    int getWidth() -> a
    void setupGL(javax.microedition.khronos.opengles.GL10) -> a
    void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int) -> onSurfaceChanged
    void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig) -> onSurfaceCreated
    void logConfig(javax.microedition.khronos.egl.EGLConfig) -> a
    int getAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
    void resume() -> k
    void pause() -> l
    void destroy() -> m
    void onDrawFrame(javax.microedition.khronos.opengles.GL10) -> onDrawFrame
    float getDeltaTime() -> c
    void clearManagedCaches() -> n
    void logManagedCachesStatus() -> o
    android.view.View getView() -> p
    com.badlogic.gdx.Graphics$DisplayMode getDesktopDisplayMode() -> d
    boolean supportsExtension(java.lang.String) -> a
    void setContinuousRendering(boolean) -> a
    boolean isContinuousRendering() -> q
    void requestRendering() -> e
com.badlogic.gdx.backends.android.AndroidGraphics$AndroidDisplayMode -> com.badlogic.gdx.backends.android.j:
    com.badlogic.gdx.backends.android.AndroidGraphics this$0 -> e
com.badlogic.gdx.backends.android.AndroidInput -> com.badlogic.gdx.backends.android.k:
    com.badlogic.gdx.utils.Pool usedKeyEvents -> a
    com.badlogic.gdx.utils.Pool usedTouchEvents -> b
    java.util.ArrayList keyListeners -> c
    java.util.ArrayList keyEvents -> d
    java.util.ArrayList touchEvents -> e
    int[] touchX -> f
    int[] touchY -> g
    int[] deltaX -> h
    int[] deltaY -> i
    boolean[] touched -> j
    int[] button -> k
    int[] realId -> l
    boolean hasMultitouch -> m
    int keyCount -> v
    boolean[] keys -> w
    boolean keyJustPressed -> x
    boolean[] justPressedKeys -> y
    android.hardware.SensorManager manager -> z
    boolean accelerometerAvailable -> n
    float[] accelerometerValues -> A
    java.lang.String text -> B
    com.badlogic.gdx.Input$TextInputListener textListener -> C
    android.os.Handler handle -> D
    com.badlogic.gdx.Application app -> o
    android.content.Context context -> p
    com.badlogic.gdx.backends.android.AndroidTouchHandler touchHandler -> E
    int sleepTime -> F
    boolean catchBack -> G
    boolean catchMenu -> H
    android.os.Vibrator vibrator -> q
    boolean compassAvailable -> I
    boolean keyboardAvailable -> r
    float[] magneticFieldValues -> J
    float azimuth -> K
    float pitch -> L
    float roll -> M
    float inclination -> N
    boolean justTouched -> O
    com.badlogic.gdx.InputProcessor processor -> P
    com.badlogic.gdx.backends.android.AndroidApplicationConfiguration config -> Q
    com.badlogic.gdx.Input$Orientation nativeOrientation -> R
    long currentEventTimeStamp -> S
    com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard onscreenKeyboard -> T
    android.hardware.SensorEventListener accelerometerListener -> U
    android.hardware.SensorEventListener compassListener -> V
    boolean requestFocus -> s
    float[] R -> t
    float[] orientation -> u
    int getX() -> a
    int getY() -> b
    boolean isTouched(int) -> a
    void setInputProcessor(com.badlogic.gdx.InputProcessor) -> a
    void processEvents() -> d
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
    void setCatchBackKey(boolean) -> a
    void setCatchMenuKey(boolean) -> b
    void registerSensorListeners() -> e
    void unregisterSensorListeners() -> f
    int getFreePointerIndex() -> g
    int[] resize(int[]) -> a
    boolean[] resize(boolean[]) -> a
    int lookUpPointerIndex(int) -> b
    int getRotation() -> h
    long getCurrentEventTime() -> c
    void onPause() -> i
    void onResume() -> j
com.badlogic.gdx.backends.android.AndroidInput$1 -> com.badlogic.gdx.backends.android.l:
    com.badlogic.gdx.backends.android.AndroidInput this$0 -> a
    com.badlogic.gdx.backends.android.AndroidInput$KeyEvent newObject() -> a
    java.lang.Object newObject() -> b
com.badlogic.gdx.backends.android.AndroidInput$2 -> com.badlogic.gdx.backends.android.m:
    com.badlogic.gdx.backends.android.AndroidInput this$0 -> a
    com.badlogic.gdx.backends.android.AndroidInput$TouchEvent newObject() -> a
    java.lang.Object newObject() -> b
com.badlogic.gdx.backends.android.AndroidInput$KeyEvent -> com.badlogic.gdx.backends.android.n:
    long timeStamp -> a
    int type -> b
    int keyCode -> c
    char keyChar -> d
com.badlogic.gdx.backends.android.AndroidInput$SensorListener -> com.badlogic.gdx.backends.android.o:
    float[] accelerometerValues -> a
    float[] magneticFieldValues -> b
    com.badlogic.gdx.Input$Orientation nativeOrientation -> c
    com.badlogic.gdx.backends.android.AndroidInput this$0 -> d
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
com.badlogic.gdx.backends.android.AndroidInput$TouchEvent -> com.badlogic.gdx.backends.android.p:
    long timeStamp -> a
    int type -> b
    int x -> c
    int y -> d
    int scrollAmount -> e
    int button -> f
    int pointer -> g
com.badlogic.gdx.backends.android.AndroidInputFactory -> com.badlogic.gdx.backends.android.q:
    com.badlogic.gdx.backends.android.AndroidInput newAndroidInput(com.badlogic.gdx.Application,android.content.Context,java.lang.Object,com.badlogic.gdx.backends.android.AndroidApplicationConfiguration) -> a
com.badlogic.gdx.backends.android.AndroidInputThreePlus -> com.badlogic.gdx.backends.android.r:
    java.util.ArrayList genericMotionListeners -> v
    com.badlogic.gdx.backends.android.AndroidMouseHandler mouseHandler -> w
    boolean onGenericMotion(android.view.View,android.view.MotionEvent) -> onGenericMotion
com.badlogic.gdx.backends.android.AndroidMouseHandler -> com.badlogic.gdx.backends.android.s:
    int deltaX -> a
    int deltaY -> b
    boolean onGenericMotion(android.view.MotionEvent,com.badlogic.gdx.backends.android.AndroidInput) -> a
    void postTouchEvent(com.badlogic.gdx.backends.android.AndroidInput,int,int,int,int,long) -> a
com.badlogic.gdx.backends.android.AndroidMultiTouchHandler -> com.badlogic.gdx.backends.android.t:
    void onTouch(android.view.MotionEvent,com.badlogic.gdx.backends.android.AndroidInput) -> a
    int toGdxButton(int) -> a
    void postTouchEvent(com.badlogic.gdx.backends.android.AndroidInput,int,int,int,int,int,long) -> a
    boolean supportsMultitouch(android.content.Context) -> a
com.badlogic.gdx.backends.android.AndroidMusic -> com.badlogic.gdx.backends.android.u:
    com.badlogic.gdx.backends.android.AndroidAudio audio -> c
    android.media.MediaPlayer player -> d
    boolean isPrepared -> e
    boolean wasPlaying -> a
    float volume -> f
    com.badlogic.gdx.audio.Music$OnCompletionListener onCompletionListener -> b
    void dispose() -> c
    boolean isPlaying() -> d
    void pause() -> e
    void play() -> a
    void setLooping(boolean) -> a
    void stop() -> b
    void onCompletion(android.media.MediaPlayer) -> onCompletion
com.badlogic.gdx.backends.android.AndroidMusic$1 -> com.badlogic.gdx.backends.android.v:
    com.badlogic.gdx.backends.android.AndroidMusic this$0 -> a
    void run() -> run
com.badlogic.gdx.backends.android.AndroidNet -> com.badlogic.gdx.backends.android.w:
    com.badlogic.gdx.backends.android.AndroidApplicationBase app -> a
    com.badlogic.gdx.net.NetJavaImpl netJavaImpl -> b
com.badlogic.gdx.backends.android.AndroidOnscreenKeyboard -> com.badlogic.gdx.backends.android.x:
    android.content.Context context -> a
    android.os.Handler handler -> b
    com.badlogic.gdx.backends.android.AndroidInput input -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
com.badlogic.gdx.backends.android.AndroidSound -> com.badlogic.gdx.backends.android.y:
    android.media.SoundPool soundPool -> a
    android.media.AudioManager manager -> b
    int soundId -> c
    com.badlogic.gdx.utils.IntArray streamIds -> d
    void dispose() -> c
com.badlogic.gdx.backends.android.AndroidTouchHandler -> com.badlogic.gdx.backends.android.z:
    void onTouch(android.view.MotionEvent,com.badlogic.gdx.backends.android.AndroidInput) -> a
    boolean supportsMultitouch(android.content.Context) -> a
com.badlogic.gdx.backends.android.AndroidVisibilityListener -> com.badlogic.gdx.backends.android.aa:
com.badlogic.gdx.backends.android.surfaceview.FillResolutionStrategy -> com.badlogic.gdx.backends.android.a.a:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 -> com.badlogic.gdx.backends.android.a.b:
    java.lang.String TAG -> a
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> b
    void onMeasure(int,int) -> onMeasure
    android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo) -> onCreateInputConnection
    void init(boolean,int,int) -> a
    void checkEglError(java.lang.String,javax.microedition.khronos.egl.EGL10) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$1 -> com.badlogic.gdx.backends.android.a.c:
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20 this$0 -> a
    boolean deleteSurroundingText(int,int) -> deleteSurroundingText
    void sendDownUpKeyEventForBackwardCompatibility(int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ConfigChooser -> com.badlogic.gdx.backends.android.a.d:
    int EGL_OPENGL_ES2_BIT -> g
    int[] s_configAttribs2 -> h
    int mRedSize -> a
    int mGreenSize -> b
    int mBlueSize -> c
    int mAlphaSize -> d
    int mDepthSize -> e
    int mStencilSize -> f
    int[] mValue -> i
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20$ContextFactory -> com.badlogic.gdx.backends.android.a.e:
    int EGL_CONTEXT_CLIENT_VERSION -> a
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> createContext
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> destroyContext
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18 -> com.badlogic.gdx.backends.android.a.f:
    java.lang.String TAG -> a
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy resolutionStrategy -> b
    void onMeasure(int,int) -> onMeasure
    android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo) -> onCreateInputConnection
    void init(boolean,int,int) -> a
    void checkEglError(java.lang.String,javax.microedition.khronos.egl.EGL10) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$1 -> com.badlogic.gdx.backends.android.a.g:
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18 this$0 -> a
    boolean deleteSurroundingText(int,int) -> deleteSurroundingText
    void sendDownUpKeyEventForBackwardCompatibility(int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ConfigChooser -> com.badlogic.gdx.backends.android.a.h:
    int EGL_OPENGL_ES2_BIT -> g
    int[] s_configAttribs2 -> h
    int mRedSize -> a
    int mGreenSize -> b
    int mBlueSize -> c
    int mAlphaSize -> d
    int mDepthSize -> e
    int mStencilSize -> f
    int[] mValue -> i
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceView20API18$ContextFactory -> com.badlogic.gdx.backends.android.a.i:
    int EGL_CONTEXT_CLIENT_VERSION -> a
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> a
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18 -> com.badlogic.gdx.backends.android.a.j:
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager sGLThreadManager -> a
    java.lang.ref.WeakReference mThisWeakRef -> b
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread mGLThread -> c
    android.opengl.GLSurfaceView$Renderer mRenderer -> d
    boolean mDetached -> e
    android.opengl.GLSurfaceView$EGLConfigChooser mEGLConfigChooser -> f
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLContextFactory mEGLContextFactory -> g
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLWindowSurfaceFactory mEGLWindowSurfaceFactory -> h
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLWrapper mGLWrapper -> i
    int mDebugFlags -> j
    int mEGLContextClientVersion -> k
    boolean mPreserveEGLContextOnPause -> l
    void finalize() -> finalize
    void init() -> e
    void setGLWrapper(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLWrapper) -> setGLWrapper
    void setDebugFlags(int) -> setDebugFlags
    int getDebugFlags() -> getDebugFlags
    void setPreserveEGLContextOnPause(boolean) -> setPreserveEGLContextOnPause
    boolean getPreserveEGLContextOnPause() -> getPreserveEGLContextOnPause
    void setRenderer(android.opengl.GLSurfaceView$Renderer) -> setRenderer
    void setEGLContextFactory(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLContextFactory) -> setEGLContextFactory
    void setEGLWindowSurfaceFactory(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLWindowSurfaceFactory) -> setEGLWindowSurfaceFactory
    void setEGLConfigChooser(android.opengl.GLSurfaceView$EGLConfigChooser) -> setEGLConfigChooser
    void setEGLConfigChooser(boolean) -> setEGLConfigChooser
    void setEGLConfigChooser(int,int,int,int,int,int) -> a
    void setEGLContextClientVersion(int) -> setEGLContextClientVersion
    void setRenderMode(int) -> setRenderMode
    int getRenderMode() -> getRenderMode
    void requestRender() -> a
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void onPause() -> b
    void onResume() -> c
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void checkRenderThreadState() -> f
    int access$200(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> a
    android.opengl.GLSurfaceView$EGLConfigChooser access$300(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> b
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLContextFactory access$400(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> c
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLWindowSurfaceFactory access$500(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> d
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLWrapper access$600(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> e
    int access$700(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> f
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager access$800() -> d
    boolean access$900(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> g
    android.opengl.GLSurfaceView$Renderer access$1000(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18) -> h
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$1 -> com.badlogic.gdx.backends.android.a.k:
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$BaseConfigChooser -> com.badlogic.gdx.backends.android.a.l:
    int[] mConfigSpec -> a
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18 this$0 -> b
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int[] filterConfigSpec(int[]) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$ComponentSizeChooser -> com.badlogic.gdx.backends.android.a.m:
    int[] mValue -> j
    int mRedSize -> c
    int mGreenSize -> d
    int mBlueSize -> e
    int mAlphaSize -> f
    int mDepthSize -> g
    int mStencilSize -> h
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18 this$0 -> i
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$DefaultContextFactory -> com.badlogic.gdx.backends.android.a.n:
    int EGL_CONTEXT_CLIENT_VERSION -> b
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18 this$0 -> a
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> a
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$DefaultWindowSurfaceFactory -> com.badlogic.gdx.backends.android.a.o:
    javax.microedition.khronos.egl.EGLSurface createWindowSurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object) -> a
    void destroySurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLContextFactory -> com.badlogic.gdx.backends.android.a.p:
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> a
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EGLWindowSurfaceFactory -> com.badlogic.gdx.backends.android.a.q:
    javax.microedition.khronos.egl.EGLSurface createWindowSurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object) -> a
    void destroySurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper -> com.badlogic.gdx.backends.android.a.r:
    java.lang.ref.WeakReference mGLSurfaceViewWeakRef -> f
    javax.microedition.khronos.egl.EGL10 mEgl -> a
    javax.microedition.khronos.egl.EGLDisplay mEglDisplay -> b
    javax.microedition.khronos.egl.EGLSurface mEglSurface -> c
    javax.microedition.khronos.egl.EGLConfig mEglConfig -> d
    javax.microedition.khronos.egl.EGLContext mEglContext -> e
    void start() -> a
    boolean createSurface() -> b
    javax.microedition.khronos.opengles.GL createGL() -> c
    int swap() -> d
    void destroySurface() -> e
    void destroySurfaceImp() -> g
    void finish() -> f
    void throwEglException(java.lang.String) -> a
    void throwEglException(java.lang.String,int) -> a
    void logEglErrorAsWarning(java.lang.String,java.lang.String,int) -> a
    java.lang.String getErrorString(int) -> a
    java.lang.String formatEglError(java.lang.String,int) -> b
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread -> com.badlogic.gdx.backends.android.a.s:
    boolean mShouldExit -> a
    boolean mExited -> b
    boolean mRequestPaused -> c
    boolean mPaused -> d
    boolean mHasSurface -> e
    boolean mSurfaceIsBad -> f
    boolean mWaitingForSurface -> g
    boolean mHaveEglContext -> h
    boolean mHaveEglSurface -> i
    boolean mFinishedCreatingEglSurface -> j
    boolean mShouldReleaseEglContext -> k
    int mWidth -> l
    int mHeight -> m
    int mRenderMode -> n
    boolean mRequestRender -> o
    boolean mRenderComplete -> p
    java.util.ArrayList mEventQueue -> q
    boolean mSizeChanged -> r
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$EglHelper mEglHelper -> s
    java.lang.ref.WeakReference mGLSurfaceViewWeakRef -> t
    void run() -> run
    void stopEglSurfaceLocked() -> j
    void stopEglContextLocked() -> k
    void guardedRun() -> l
    boolean ableToDraw() -> a
    boolean readyToDraw() -> m
    void setRenderMode(int) -> a
    int getRenderMode() -> b
    void requestRender() -> c
    void surfaceCreated() -> d
    void surfaceDestroyed() -> e
    void onPause() -> f
    void onResume() -> g
    void onWindowResize(int,int) -> a
    void requestExitAndWait() -> h
    void requestReleaseEglContextLocked() -> i
    boolean access$1102(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread,boolean) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThreadManager -> com.badlogic.gdx.backends.android.a.t:
    java.lang.String TAG -> a
    boolean mGLESVersionCheckComplete -> b
    int mGLESVersion -> c
    boolean mGLESDriverCheckComplete -> d
    boolean mMultipleGLESContextsAllowed -> e
    boolean mLimitedGLESContexts -> f
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread mEglOwner -> g
    void threadExiting(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread) -> a
    boolean tryAcquireEglContextLocked(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread) -> b
    void releaseEglContextLocked(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLThread) -> c
    boolean shouldReleaseEGLContextWhenPausing() -> a
    boolean shouldTerminateEGLWhenPausing() -> b
    void checkGLDriver(javax.microedition.khronos.opengles.GL10) -> a
    void checkGLESVersion() -> c
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$GLWrapper -> com.badlogic.gdx.backends.android.a.u:
    javax.microedition.khronos.opengles.GL wrap(javax.microedition.khronos.opengles.GL) -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$LogWriter -> com.badlogic.gdx.backends.android.a.v:
    java.lang.StringBuilder mBuilder -> a
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18$SimpleEGLConfigChooser -> com.badlogic.gdx.backends.android.a.w:
    com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewAPI18 this$0 -> j
com.badlogic.gdx.backends.android.surfaceview.GdxEglConfigChooser -> com.badlogic.gdx.backends.android.a.x:
    int mRedSize -> a
    int mGreenSize -> b
    int mBlueSize -> c
    int mAlphaSize -> d
    int mDepthSize -> e
    int mStencilSize -> f
    int mNumSamples -> g
    int[] mConfigAttribs -> h
    int[] mValue -> i
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy -> com.badlogic.gdx.backends.android.a.y:
    com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension calcMeasures(int,int) -> a
com.badlogic.gdx.backends.android.surfaceview.ResolutionStrategy$MeasuredDimension -> com.badlogic.gdx.backends.android.a.z:
    int width -> a
    int height -> b
com.badlogic.gdx.files.FileHandle -> com.badlogic.gdx.c.a:
    java.io.File file -> b
    com.badlogic.gdx.Files$FileType type -> c
    java.lang.String path() -> f
    java.lang.String name() -> g
    java.lang.String extension() -> h
    java.lang.String nameWithoutExtension() -> i
    java.lang.String pathWithoutExtension() -> j
    com.badlogic.gdx.Files$FileType type() -> k
    java.io.File file() -> e
    java.io.InputStream read() -> b
    java.io.BufferedInputStream read(int) -> a
    java.io.Reader reader(java.lang.String) -> c
    java.io.BufferedReader reader(int) -> b
    byte[] readBytes() -> l
    int estimateLength() -> m
    com.badlogic.gdx.files.FileHandle child(java.lang.String) -> a
    com.badlogic.gdx.files.FileHandle sibling(java.lang.String) -> b
    com.badlogic.gdx.files.FileHandle parent() -> a
    boolean exists() -> c
    long length() -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.badlogic.gdx.files.FileHandle$1 -> com.badlogic.gdx.c.b:
    int[] $SwitchMap$com$badlogic$gdx$Files$FileType -> a
com.badlogic.gdx.graphics.Camera -> com.badlogic.gdx.graphics.a:
    com.badlogic.gdx.math.Vector3 position -> a
    com.badlogic.gdx.math.Vector3 direction -> b
    com.badlogic.gdx.math.Vector3 up -> c
    com.badlogic.gdx.math.Matrix4 projection -> d
    com.badlogic.gdx.math.Matrix4 view -> e
    com.badlogic.gdx.math.Matrix4 combined -> f
    com.badlogic.gdx.math.Matrix4 invProjectionView -> g
    float near -> h
    float far -> i
    float viewportWidth -> j
    float viewportHeight -> k
    com.badlogic.gdx.math.Frustum frustum -> l
    com.badlogic.gdx.math.Vector3 tmpVec -> m
    com.badlogic.gdx.math.collision.Ray ray -> n
    void update() -> a
    com.badlogic.gdx.math.Vector3 unproject(com.badlogic.gdx.math.Vector3,float,float,float,float) -> a
    com.badlogic.gdx.math.Vector3 project(com.badlogic.gdx.math.Vector3,float,float,float,float) -> b
com.badlogic.gdx.graphics.Color -> com.badlogic.gdx.graphics.b:
    com.badlogic.gdx.graphics.Color CLEAR -> a
    com.badlogic.gdx.graphics.Color WHITE -> b
    com.badlogic.gdx.graphics.Color BLACK -> c
    com.badlogic.gdx.graphics.Color RED -> d
    com.badlogic.gdx.graphics.Color GREEN -> e
    com.badlogic.gdx.graphics.Color BLUE -> f
    com.badlogic.gdx.graphics.Color LIGHT_GRAY -> g
    com.badlogic.gdx.graphics.Color GRAY -> h
    com.badlogic.gdx.graphics.Color DARK_GRAY -> i
    com.badlogic.gdx.graphics.Color PINK -> j
    com.badlogic.gdx.graphics.Color ORANGE -> k
    com.badlogic.gdx.graphics.Color YELLOW -> l
    com.badlogic.gdx.graphics.Color MAGENTA -> m
    com.badlogic.gdx.graphics.Color CYAN -> n
    com.badlogic.gdx.graphics.Color OLIVE -> o
    com.badlogic.gdx.graphics.Color PURPLE -> p
    com.badlogic.gdx.graphics.Color MAROON -> q
    com.badlogic.gdx.graphics.Color TEAL -> r
    com.badlogic.gdx.graphics.Color NAVY -> s
    float r -> t
    float g -> u
    float b -> v
    float a -> w
    com.badlogic.gdx.graphics.Color set(com.badlogic.gdx.graphics.Color) -> a
    com.badlogic.gdx.graphics.Color mul(com.badlogic.gdx.graphics.Color) -> b
    com.badlogic.gdx.graphics.Color clamp() -> a
    com.badlogic.gdx.graphics.Color set(float,float,float,float) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    float toFloatBits() -> b
    int toIntBits() -> c
    java.lang.String toString() -> toString
    com.badlogic.gdx.graphics.Color valueOf(java.lang.String) -> a
    float toFloatBits(float,float,float,float) -> b
    int rgba8888(float,float,float,float) -> c
    void rgba8888ToColor(com.badlogic.gdx.graphics.Color,int) -> a
    com.badlogic.gdx.graphics.Color cpy() -> d
com.badlogic.gdx.graphics.Colors -> com.badlogic.gdx.graphics.c:
    com.badlogic.gdx.utils.ObjectMap map -> a
    com.badlogic.gdx.graphics.Color get(java.lang.String) -> a
    void reset() -> a
com.badlogic.gdx.graphics.Cubemap -> com.badlogic.gdx.graphics.d:
    com.badlogic.gdx.assets.AssetManager assetManager -> i
    java.util.Map managedCubemaps -> a
    com.badlogic.gdx.graphics.CubemapData data -> b
    void load(com.badlogic.gdx.graphics.CubemapData) -> a
    com.badlogic.gdx.graphics.CubemapData getCubemapData() -> a
    boolean isManaged() -> b
    void reload() -> d
    int getWidth() -> e
    int getHeight() -> f
    void dispose() -> c
    void clearAllCubemaps(com.badlogic.gdx.Application) -> a
    void invalidateAllCubemaps(com.badlogic.gdx.Application) -> b
    java.lang.String getManagedStatus() -> g
com.badlogic.gdx.graphics.Cubemap$1 -> com.badlogic.gdx.graphics.e:
    int val$refCount -> a
    void finishedLoading(com.badlogic.gdx.assets.AssetManager,java.lang.String,java.lang.Class) -> a
com.badlogic.gdx.graphics.CubemapData -> com.badlogic.gdx.graphics.f:
    boolean isPrepared() -> a
    void prepare() -> b
    void consumeCubemapData() -> c
    int getWidth() -> d
    int getHeight() -> e
    boolean isManaged() -> f
com.badlogic.gdx.graphics.GL20 -> com.badlogic.gdx.graphics.g:
    void glBindTexture(int,int) -> glBindTexture
    void glBlendFunc(int,int) -> glBlendFunc
    void glClear(int) -> glClear
    void glClearColor(float,float,float,float) -> glClearColor
    void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer) -> glCompressedTexImage2D
    void glDeleteTexture(int) -> glDeleteTexture
    void glDepthMask(boolean) -> glDepthMask
    void glDisable(int) -> glDisable
    void glDrawArrays(int,int,int) -> glDrawArrays
    void glDrawElements(int,int,int,java.nio.Buffer) -> glDrawElements
    void glEnable(int) -> glEnable
    int glGenTexture() -> glGenTexture
    void glGetIntegerv(int,java.nio.IntBuffer) -> glGetIntegerv
    java.lang.String glGetString(int) -> glGetString
    void glPixelStorei(int,int) -> glPixelStorei
    void glScissor(int,int,int,int) -> glScissor
    void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer) -> glTexImage2D
    void glTexParameterf(int,int,float) -> glTexParameterf
    void glViewport(int,int,int,int) -> glViewport
    void glAttachShader(int,int) -> glAttachShader
    void glBindBuffer(int,int) -> glBindBuffer
    void glBindFramebuffer(int,int) -> glBindFramebuffer
    void glBindRenderbuffer(int,int) -> glBindRenderbuffer
    void glBufferData(int,int,java.nio.Buffer,int) -> glBufferData
    void glBufferSubData(int,int,int,java.nio.Buffer) -> glBufferSubData
    int glCheckFramebufferStatus(int) -> glCheckFramebufferStatus
    void glCompileShader(int) -> glCompileShader
    int glCreateProgram() -> glCreateProgram
    int glCreateShader(int) -> glCreateShader
    void glDeleteBuffer(int) -> glDeleteBuffer
    void glDeleteFramebuffer(int) -> glDeleteFramebuffer
    void glDeleteProgram(int) -> glDeleteProgram
    void glDeleteRenderbuffer(int) -> glDeleteRenderbuffer
    void glDeleteShader(int) -> glDeleteShader
    void glDisableVertexAttribArray(int) -> glDisableVertexAttribArray
    void glDrawElements(int,int,int,int) -> glDrawElements
    void glEnableVertexAttribArray(int) -> glEnableVertexAttribArray
    void glFramebufferRenderbuffer(int,int,int,int) -> glFramebufferRenderbuffer
    void glFramebufferTexture2D(int,int,int,int,int) -> glFramebufferTexture2D
    int glGenBuffer() -> glGenBuffer
    void glGenerateMipmap(int) -> glGenerateMipmap
    int glGenFramebuffer() -> glGenFramebuffer
    int glGenRenderbuffer() -> glGenRenderbuffer
    java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.Buffer) -> glGetActiveAttrib
    java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.Buffer) -> glGetActiveUniform
    int glGetAttribLocation(int,java.lang.String) -> glGetAttribLocation
    void glGetProgramiv(int,int,java.nio.IntBuffer) -> glGetProgramiv
    java.lang.String glGetProgramInfoLog(int) -> glGetProgramInfoLog
    void glGetShaderiv(int,int,java.nio.IntBuffer) -> glGetShaderiv
    java.lang.String glGetShaderInfoLog(int) -> glGetShaderInfoLog
    int glGetUniformLocation(int,java.lang.String) -> glGetUniformLocation
    void glLinkProgram(int) -> glLinkProgram
    void glRenderbufferStorage(int,int,int,int) -> glRenderbufferStorage
    void glShaderSource(int,java.lang.String) -> glShaderSource
    void glUniform1i(int,int) -> glUniform1i
    void glUniformMatrix4fv(int,int,boolean,float[],int) -> glUniformMatrix4fv
    void glUseProgram(int) -> glUseProgram
    void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer) -> glVertexAttribPointer
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> glVertexAttribPointer
com.badlogic.gdx.graphics.GL30 -> com.badlogic.gdx.graphics.h:
    void glBindVertexArray(int) -> a
    void glDeleteVertexArrays(int,java.nio.IntBuffer) -> a
    void glGenVertexArrays(int,java.nio.IntBuffer) -> b
    boolean glIsVertexArray(int) -> b
com.badlogic.gdx.graphics.GLTexture -> com.badlogic.gdx.graphics.i:
    int glTarget -> c
    int glHandle -> d
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> f
    com.badlogic.gdx.graphics.Texture$TextureWrap uWrap -> g
    com.badlogic.gdx.graphics.Texture$TextureWrap vWrap -> h
    int getWidth() -> e
    int getHeight() -> f
    void bind() -> h
    com.badlogic.gdx.graphics.Texture$TextureFilter getMinFilter() -> i
    com.badlogic.gdx.graphics.Texture$TextureFilter getMagFilter() -> j
    com.badlogic.gdx.graphics.Texture$TextureWrap getUWrap() -> k
    com.badlogic.gdx.graphics.Texture$TextureWrap getVWrap() -> l
    int getTextureObjectHandle() -> m
    void unsafeSetWrap(com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap,boolean) -> a
    void setWrap(com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap) -> a
    void unsafeSetFilter(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,boolean) -> a
    void setFilter(com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter) -> a
    void delete() -> n
    void dispose() -> c
    void uploadImageData(int,com.badlogic.gdx.graphics.TextureData) -> a
    void uploadImageData(int,com.badlogic.gdx.graphics.TextureData,int) -> a
com.badlogic.gdx.graphics.Mesh -> com.badlogic.gdx.graphics.j:
    java.util.Map meshes -> a
    com.badlogic.gdx.graphics.glutils.VertexData vertices -> b
    com.badlogic.gdx.graphics.glutils.IndexData indices -> c
    boolean autoBind -> d
    boolean isVertexArray -> e
    com.badlogic.gdx.math.Vector3 tmpV -> f
    com.badlogic.gdx.graphics.glutils.VertexData makeVertexBuffer(boolean,int,com.badlogic.gdx.graphics.VertexAttributes) -> a
    com.badlogic.gdx.graphics.Mesh setVertices(float[],int,int) -> a
    com.badlogic.gdx.graphics.Mesh setIndices(short[]) -> a
    int getNumIndices() -> a
    int getNumVertices() -> b
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram) -> b
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int) -> a
    void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int,int,int) -> a
    void render(com.badlogic.gdx.graphics.glutils.ShaderProgram,int,int,int,boolean) -> a
    void dispose() -> c
    com.badlogic.gdx.graphics.VertexAttribute getVertexAttribute(int) -> a
    com.badlogic.gdx.graphics.VertexAttributes getVertexAttributes() -> d
    java.nio.FloatBuffer getVerticesBuffer() -> e
    java.nio.ShortBuffer getIndicesBuffer() -> f
    void addManagedMesh(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.Mesh) -> a
    void invalidateAllMeshes(com.badlogic.gdx.Application) -> a
    void clearAllMeshes(com.badlogic.gdx.Application) -> b
    java.lang.String getManagedStatus() -> g
com.badlogic.gdx.graphics.Mesh$1 -> com.badlogic.gdx.graphics.k:
    int[] $SwitchMap$com$badlogic$gdx$graphics$Mesh$VertexDataType -> a
com.badlogic.gdx.graphics.Mesh$VertexDataType -> com.badlogic.gdx.graphics.l:
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexArray -> a
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObject -> b
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObjectSubData -> c
    com.badlogic.gdx.graphics.Mesh$VertexDataType VertexBufferObjectWithVAO -> d
    com.badlogic.gdx.graphics.Mesh$VertexDataType[] $VALUES -> e
    com.badlogic.gdx.graphics.Mesh$VertexDataType[] values() -> values
    com.badlogic.gdx.graphics.Mesh$VertexDataType valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.graphics.OrthographicCamera -> com.badlogic.gdx.graphics.m:
    float zoom -> m
    com.badlogic.gdx.math.Vector3 tmp -> n
    void update() -> a
    void update(boolean) -> a
    void setToOrtho(boolean,float,float) -> a
com.badlogic.gdx.graphics.Pixmap -> com.badlogic.gdx.graphics.n:
    com.badlogic.gdx.graphics.Pixmap$Blending blending -> c
    com.badlogic.gdx.graphics.g2d.Gdx2DPixmap pixmap -> a
    int color -> b
    boolean disposed -> d
    void setBlending(com.badlogic.gdx.graphics.Pixmap$Blending) -> a
    void setColor(float,float,float,float) -> a
    void fill() -> a
    void drawPixmap(com.badlogic.gdx.graphics.Pixmap,int,int,int,int,int,int) -> a
    void drawPixmap(com.badlogic.gdx.graphics.Pixmap,int,int,int,int,int,int,int,int) -> a
    int getWidth() -> b
    int getHeight() -> d
    void dispose() -> c
    int getGLFormat() -> e
    int getGLInternalFormat() -> f
    int getGLType() -> g
    java.nio.ByteBuffer getPixels() -> h
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> i
    com.badlogic.gdx.graphics.Pixmap$Blending getBlending() -> j
com.badlogic.gdx.graphics.Pixmap$Blending -> com.badlogic.gdx.graphics.o:
    com.badlogic.gdx.graphics.Pixmap$Blending None -> a
    com.badlogic.gdx.graphics.Pixmap$Blending SourceOver -> b
    com.badlogic.gdx.graphics.Pixmap$Blending[] $VALUES -> c
    com.badlogic.gdx.graphics.Pixmap$Blending[] values() -> values
    com.badlogic.gdx.graphics.Pixmap$Blending valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.graphics.Pixmap$Format -> com.badlogic.gdx.graphics.p:
    com.badlogic.gdx.graphics.Pixmap$Format Alpha -> a
    com.badlogic.gdx.graphics.Pixmap$Format Intensity -> b
    com.badlogic.gdx.graphics.Pixmap$Format LuminanceAlpha -> c
    com.badlogic.gdx.graphics.Pixmap$Format RGB565 -> d
    com.badlogic.gdx.graphics.Pixmap$Format RGBA4444 -> e
    com.badlogic.gdx.graphics.Pixmap$Format RGB888 -> f
    com.badlogic.gdx.graphics.Pixmap$Format RGBA8888 -> g
    com.badlogic.gdx.graphics.Pixmap$Format[] $VALUES -> h
    com.badlogic.gdx.graphics.Pixmap$Format[] values() -> values
    com.badlogic.gdx.graphics.Pixmap$Format valueOf(java.lang.String) -> valueOf
    int toGdx2DPixmapFormat(com.badlogic.gdx.graphics.Pixmap$Format) -> a
    com.badlogic.gdx.graphics.Pixmap$Format fromGdx2DPixmapFormat(int) -> a
com.badlogic.gdx.graphics.PixmapIO -> com.badlogic.gdx.graphics.q:
    com.badlogic.gdx.graphics.Pixmap readCIM(com.badlogic.gdx.files.FileHandle) -> a
com.badlogic.gdx.graphics.PixmapIO$CIM -> com.badlogic.gdx.graphics.r:
    byte[] writeBuffer -> a
    byte[] readBuffer -> b
    com.badlogic.gdx.graphics.Pixmap read(com.badlogic.gdx.files.FileHandle) -> a
com.badlogic.gdx.graphics.Texture -> com.badlogic.gdx.graphics.s:
    com.badlogic.gdx.assets.AssetManager assetManager -> i
    java.util.Map managedTextures -> a
    com.badlogic.gdx.graphics.TextureData data -> b
    void load(com.badlogic.gdx.graphics.TextureData) -> a
    void reload() -> a
    int getWidth() -> e
    int getHeight() -> f
    com.badlogic.gdx.graphics.TextureData getTextureData() -> b
    boolean isManaged() -> d
    void dispose() -> c
    void addManagedTexture(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.Texture) -> a
    void clearAllTextures(com.badlogic.gdx.Application) -> a
    void invalidateAllTextures(com.badlogic.gdx.Application) -> b
    java.lang.String getManagedStatus() -> g
com.badlogic.gdx.graphics.Texture$1 -> com.badlogic.gdx.graphics.t:
    int val$refCount -> a
    void finishedLoading(com.badlogic.gdx.assets.AssetManager,java.lang.String,java.lang.Class) -> a
com.badlogic.gdx.graphics.Texture$TextureFilter -> com.badlogic.gdx.graphics.u:
    com.badlogic.gdx.graphics.Texture$TextureFilter Nearest -> a
    com.badlogic.gdx.graphics.Texture$TextureFilter Linear -> b
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMap -> c
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapNearestNearest -> d
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapLinearNearest -> e
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapNearestLinear -> f
    com.badlogic.gdx.graphics.Texture$TextureFilter MipMapLinearLinear -> g
    int glEnum -> h
    com.badlogic.gdx.graphics.Texture$TextureFilter[] $VALUES -> i
    com.badlogic.gdx.graphics.Texture$TextureFilter[] values() -> values
    com.badlogic.gdx.graphics.Texture$TextureFilter valueOf(java.lang.String) -> valueOf
    boolean isMipMap() -> a
    int getGLEnum() -> b
com.badlogic.gdx.graphics.Texture$TextureWrap -> com.badlogic.gdx.graphics.v:
    com.badlogic.gdx.graphics.Texture$TextureWrap MirroredRepeat -> a
    com.badlogic.gdx.graphics.Texture$TextureWrap ClampToEdge -> b
    com.badlogic.gdx.graphics.Texture$TextureWrap Repeat -> c
    int glEnum -> d
    com.badlogic.gdx.graphics.Texture$TextureWrap[] $VALUES -> e
    com.badlogic.gdx.graphics.Texture$TextureWrap[] values() -> values
    com.badlogic.gdx.graphics.Texture$TextureWrap valueOf(java.lang.String) -> valueOf
    int getGLEnum() -> a
com.badlogic.gdx.graphics.TextureData -> com.badlogic.gdx.graphics.w:
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> g
    boolean isPrepared() -> a
    void prepare() -> b
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> h
    boolean disposePixmap() -> i
    void consumeCustomData(int) -> a
    int getWidth() -> d
    int getHeight() -> e
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> j
    boolean useMipMaps() -> k
    boolean isManaged() -> f
com.badlogic.gdx.graphics.TextureData$Factory -> com.badlogic.gdx.graphics.x:
    com.badlogic.gdx.graphics.TextureData loadFromFile(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.Pixmap$Format,boolean) -> a
com.badlogic.gdx.graphics.TextureData$TextureDataType -> com.badlogic.gdx.graphics.y:
    com.badlogic.gdx.graphics.TextureData$TextureDataType Pixmap -> a
    com.badlogic.gdx.graphics.TextureData$TextureDataType Custom -> b
    com.badlogic.gdx.graphics.TextureData$TextureDataType[] $VALUES -> c
    com.badlogic.gdx.graphics.TextureData$TextureDataType[] values() -> values
    com.badlogic.gdx.graphics.TextureData$TextureDataType valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.graphics.VertexAttribute -> com.badlogic.gdx.graphics.z:
    int usage -> a
    int numComponents -> b
    boolean normalized -> c
    int type -> d
    int offset -> e
    java.lang.String alias -> f
    int unit -> g
    int usageIndex -> h
    com.badlogic.gdx.graphics.VertexAttribute Position() -> a
    com.badlogic.gdx.graphics.VertexAttribute TexCoords(int) -> a
    com.badlogic.gdx.graphics.VertexAttribute Normal() -> b
    com.badlogic.gdx.graphics.VertexAttribute ColorPacked() -> c
    com.badlogic.gdx.graphics.VertexAttribute ColorUnpacked() -> d
    com.badlogic.gdx.graphics.VertexAttribute Tangent() -> e
    com.badlogic.gdx.graphics.VertexAttribute Binormal() -> f
    com.badlogic.gdx.graphics.VertexAttribute BoneWeight(int) -> b
    boolean equals(java.lang.Object) -> equals
    boolean equals(com.badlogic.gdx.graphics.VertexAttribute) -> a
    int getKey() -> g
    int hashCode() -> hashCode
com.badlogic.gdx.graphics.VertexAttributes -> com.badlogic.gdx.graphics.aa:
    com.badlogic.gdx.graphics.VertexAttribute[] attributes -> b
    int vertexSize -> a
    long mask -> c
    com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterable iterable -> d
    int calculateOffsets() -> c
    int size() -> a
    com.badlogic.gdx.graphics.VertexAttribute get(int) -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    long getMask() -> b
    int compareTo(com.badlogic.gdx.graphics.VertexAttributes) -> a
    java.util.Iterator iterator() -> iterator
    int compareTo(java.lang.Object) -> compareTo
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterable -> com.badlogic.gdx.graphics.ab:
    java.lang.Object[] array -> a
    com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator iterator1 -> b
    com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator iterator2 -> c
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.graphics.VertexAttributes$ReadonlyIterator -> com.badlogic.gdx.graphics.ac:
    java.lang.Object[] array -> c
    int index -> a
    boolean valid -> b
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.graphics.g2d.Animation -> com.badlogic.gdx.graphics.g2d.a:
    com.badlogic.gdx.graphics.g2d.TextureRegion[] keyFrames -> a
    float frameDuration -> b
    float animationDuration -> c
    int lastFrameNumber -> d
    float lastStateTime -> e
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode playMode -> f
    com.badlogic.gdx.graphics.g2d.TextureRegion getKeyFrame(float,boolean) -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion getKeyFrame(float) -> a
    int getKeyFrameIndex(float) -> b
    void setPlayMode(com.badlogic.gdx.graphics.g2d.Animation$PlayMode) -> a
com.badlogic.gdx.graphics.g2d.Animation$1 -> com.badlogic.gdx.graphics.g2d.b:
    int[] $SwitchMap$com$badlogic$gdx$graphics$g2d$Animation$PlayMode -> a
com.badlogic.gdx.graphics.g2d.Animation$PlayMode -> com.badlogic.gdx.graphics.g2d.c:
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode NORMAL -> a
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode REVERSED -> b
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode LOOP -> c
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode LOOP_REVERSED -> d
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode LOOP_PINGPONG -> e
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode LOOP_RANDOM -> f
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode[] $VALUES -> g
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode[] values() -> values
    com.badlogic.gdx.graphics.g2d.Animation$PlayMode valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.graphics.g2d.Batch -> com.badlogic.gdx.graphics.g2d.d:
    void begin() -> a
    void end() -> b
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void setColor(float,float,float,float) -> a
    com.badlogic.gdx.graphics.Color getColor() -> d
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.Texture,float[],int,int) -> a
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float) -> a
    void flush() -> e
    com.badlogic.gdx.math.Matrix4 getTransformMatrix() -> f
    void setProjectionMatrix(com.badlogic.gdx.math.Matrix4) -> a
    void setTransformMatrix(com.badlogic.gdx.math.Matrix4) -> b
com.badlogic.gdx.graphics.g2d.BitmapFont -> com.badlogic.gdx.graphics.g2d.e:
    com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData data -> a
    com.badlogic.gdx.utils.Array regions -> b
    com.badlogic.gdx.graphics.g2d.BitmapFontCache cache -> d
    boolean flipped -> e
    boolean integer -> c
    boolean ownsTexture -> f
    void load(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData) -> a
    com.badlogic.gdx.graphics.g2d.GlyphLayout draw(com.badlogic.gdx.graphics.g2d.Batch,java.lang.CharSequence,float,float) -> a
    void setColor(float,float,float,float) -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion getRegion() -> a
    com.badlogic.gdx.utils.Array getRegions() -> b
    float getCapHeight() -> d
    void dispose() -> c
    com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData getData() -> e
    com.badlogic.gdx.graphics.g2d.BitmapFontCache newFontCache() -> f
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData -> com.badlogic.gdx.graphics.g2d.f:
    java.lang.String[] imagePaths -> a
    com.badlogic.gdx.files.FileHandle fontFile -> b
    boolean flipped -> c
    float padTop -> d
    float padRight -> e
    float padBottom -> f
    float padLeft -> g
    float lineHeight -> h
    float capHeight -> i
    float ascent -> j
    float descent -> k
    float down -> l
    float scaleX -> m
    float scaleY -> n
    boolean markupEnabled -> o
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph[][] glyphs -> p
    float spaceWidth -> q
    float xHeight -> r
    char[] breakChars -> s
    char[] xChars -> t
    char[] capChars -> u
    void load(com.badlogic.gdx.files.FileHandle,boolean) -> a
    void setGlyphRegion(com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph,com.badlogic.gdx.graphics.g2d.TextureRegion) -> a
    void setGlyph(int,com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph) -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph getFirstGlyph() -> a
    com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph getGlyph(char) -> a
    void getGlyphs(com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun,java.lang.CharSequence,int,int) -> a
    int getWrapIndex(com.badlogic.gdx.utils.Array,int) -> a
    boolean isBreakChar(char) -> b
    boolean isWhitespace(char) -> c
    java.lang.String getImagePath(int) -> a
    java.lang.String[] getImagePaths() -> b
    void setScale(float,float) -> a
    void setScale(float) -> a
com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph -> com.badlogic.gdx.graphics.g2d.g:
    int id -> a
    int srcX -> b
    int srcY -> c
    int width -> d
    int height -> e
    float u -> f
    float v -> g
    float u2 -> h
    float v2 -> i
    int xoffset -> j
    int yoffset -> k
    int xadvance -> l
    byte[][] kerning -> m
    int page -> n
    int getKerning(char) -> a
    void setKerning(int,int) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.g2d.BitmapFontCache -> com.badlogic.gdx.graphics.g2d.h:
    com.badlogic.gdx.graphics.Color tempColor -> a
    float whiteTint -> b
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> c
    boolean integer -> d
    com.badlogic.gdx.utils.Array layouts -> e
    com.badlogic.gdx.utils.Array pooledLayouts -> f
    int glyphCount -> g
    float x -> h
    float y -> i
    com.badlogic.gdx.graphics.Color color -> j
    float currentTint -> k
    float[][] pageVertices -> l
    int[] idx -> m
    com.badlogic.gdx.utils.IntArray[] pageGlyphIndices -> n
    int[] tempGlyphCount -> o
    com.badlogic.gdx.graphics.Color getColor() -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch) -> a
    void clear() -> b
    void requireGlyphs(com.badlogic.gdx.graphics.g2d.GlyphLayout) -> a
    void requirePageGlyphs(int,int) -> a
    void addToCache(com.badlogic.gdx.graphics.g2d.GlyphLayout,float,float) -> b
    void addGlyph(com.badlogic.gdx.graphics.g2d.BitmapFont$Glyph,float,float,float) -> a
    com.badlogic.gdx.graphics.g2d.GlyphLayout addText(java.lang.CharSequence,float,float) -> a
    com.badlogic.gdx.graphics.g2d.GlyphLayout addText(java.lang.CharSequence,float,float,int,int,float,int,boolean) -> a
    void addText(com.badlogic.gdx.graphics.g2d.GlyphLayout,float,float) -> a
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap -> com.badlogic.gdx.graphics.g2d.Gdx2DPixmap:
    long basePtr -> a
    int width -> b
    int height -> c
    int format -> d
    java.nio.ByteBuffer pixelPtr -> e
    long[] nativeData -> f
    void convert(int) -> b
    void dispose() -> c
    void clear(int) -> a
    void drawPixmap(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap,int,int,int,int,int,int) -> a
    void drawPixmap(com.badlogic.gdx.graphics.g2d.Gdx2DPixmap,int,int,int,int,int,int,int,int) -> a
    java.nio.ByteBuffer getPixels() -> a
    int getHeight() -> b
    int getWidth() -> d
    int getFormat() -> e
    int getGLInternalFormat() -> f
    int getGLFormat() -> g
    int getGLType() -> h
    java.nio.ByteBuffer load(long[],byte[],int,int) -> load
    java.nio.ByteBuffer newPixmap(long[],int,int,int) -> newPixmap
    void free(long) -> free
    void clear(long,int) -> clear
    void drawPixmap(long,long,int,int,int,int,int,int,int,int) -> drawPixmap
    void setBlend(int) -> setBlend
    void setScale(int) -> setScale
    java.lang.String getFailureReason() -> getFailureReason
com.badlogic.gdx.graphics.g2d.GlyphLayout -> com.badlogic.gdx.graphics.g2d.i:
    com.badlogic.gdx.utils.Array colorStack -> d
    com.badlogic.gdx.utils.Array runs -> a
    float width -> b
    float height -> c
    void setText(com.badlogic.gdx.graphics.g2d.BitmapFont,java.lang.CharSequence,int,int,com.badlogic.gdx.graphics.Color,float,int,boolean,java.lang.String) -> a
    void truncate(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun,float,java.lang.String,int,com.badlogic.gdx.utils.Pool) -> a
    com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun wrap(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun,com.badlogic.gdx.utils.Pool,int,int) -> a
    void adjustLastGlyph(com.badlogic.gdx.graphics.g2d.BitmapFont$BitmapFontData,com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun) -> a
    int parseColorMarkup(java.lang.CharSequence,int,int,com.badlogic.gdx.utils.Pool) -> a
    void reset() -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.g2d.GlyphLayout$GlyphRun -> com.badlogic.gdx.graphics.g2d.j:
    com.badlogic.gdx.utils.Array glyphs -> a
    com.badlogic.gdx.utils.FloatArray xAdvances -> b
    float x -> c
    float y -> d
    float width -> e
    com.badlogic.gdx.graphics.Color color -> f
    void reset() -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.g2d.NinePatch -> com.badlogic.gdx.graphics.g2d.k:
    com.badlogic.gdx.graphics.Color tmpDrawColor -> a
    com.badlogic.gdx.graphics.Texture texture -> b
    int bottomLeft -> c
    int bottomCenter -> d
    int bottomRight -> e
    int middleLeft -> f
    int middleCenter -> g
    int middleRight -> h
    int topLeft -> i
    int topCenter -> j
    int topRight -> k
    float leftWidth -> l
    float rightWidth -> m
    float middleWidth -> n
    float middleHeight -> o
    float topHeight -> p
    float bottomHeight -> q
    float[] vertices -> r
    int idx -> s
    com.badlogic.gdx.graphics.Color color -> t
    int padLeft -> u
    int padRight -> v
    int padTop -> w
    int padBottom -> x
    void load(com.badlogic.gdx.graphics.g2d.TextureRegion[]) -> a
    int add(com.badlogic.gdx.graphics.g2d.TextureRegion,float,boolean,boolean) -> a
    void set(int,float,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> a
    float getLeftWidth() -> a
    float getRightWidth() -> b
    float getTopHeight() -> c
    float getBottomHeight() -> d
    float getTotalWidth() -> e
    float getTotalHeight() -> f
    void setPadding(int,int,int,int) -> a
    float getPadLeft() -> g
    float getPadRight() -> h
    float getPadTop() -> i
    float getPadBottom() -> j
com.badlogic.gdx.graphics.g2d.ParticleEffect -> com.badlogic.gdx.graphics.g2d.l:
    com.badlogic.gdx.utils.Array emitters -> a
    boolean ownsTexture -> b
    void load(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.files.FileHandle) -> a
    void load(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.TextureAtlas,java.lang.String) -> a
    void loadEmitters(com.badlogic.gdx.files.FileHandle) -> a
    void loadEmitterImages(com.badlogic.gdx.graphics.g2d.TextureAtlas,java.lang.String) -> a
    void loadEmitterImages(com.badlogic.gdx.files.FileHandle) -> b
    com.badlogic.gdx.graphics.Texture loadTexture(com.badlogic.gdx.files.FileHandle) -> c
    void dispose() -> c
com.badlogic.gdx.graphics.g2d.ParticleEmitter -> com.badlogic.gdx.graphics.g2d.m:
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue delayValue -> c
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue lifeOffsetValue -> d
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue durationValue -> e
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue lifeValue -> f
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue emissionValue -> g
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue scaleValue -> h
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue rotationValue -> i
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue velocityValue -> j
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue angleValue -> k
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue windValue -> l
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue gravityValue -> m
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue transparencyValue -> n
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue tintValue -> o
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue xOffsetValue -> p
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue yOffsetValue -> q
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue spawnWidthValue -> r
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue spawnHeightValue -> s
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue spawnShapeValue -> t
    com.badlogic.gdx.graphics.g2d.Sprite sprite -> u
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle[] particles -> v
    int minParticleCount -> w
    int maxParticleCount -> x
    java.lang.String name -> y
    java.lang.String imagePath -> z
    int activeCount -> A
    boolean[] active -> B
    float duration -> a
    boolean attached -> C
    boolean continuous -> D
    boolean aligned -> E
    boolean behind -> F
    boolean additive -> G
    boolean premultipliedAlpha -> H
    boolean cleansUpBlendFunction -> b
    void initialize() -> c
    void setMaxParticleCount(int) -> a
    void setSprite(com.badlogic.gdx.graphics.g2d.Sprite) -> a
    com.badlogic.gdx.graphics.g2d.Sprite getSprite() -> a
    void setMinParticleCount(int) -> b
    java.lang.String getImagePath() -> b
    void setImagePath(java.lang.String) -> a
    void load(java.io.BufferedReader) -> a
    java.lang.String readString(java.lang.String) -> b
    java.lang.String readString(java.io.BufferedReader,java.lang.String) -> a
    boolean readBoolean(java.lang.String) -> c
    boolean readBoolean(java.io.BufferedReader,java.lang.String) -> b
    int readInt(java.io.BufferedReader,java.lang.String) -> c
    float readFloat(java.io.BufferedReader,java.lang.String) -> d
com.badlogic.gdx.graphics.g2d.ParticleEmitter$GradientColorValue -> com.badlogic.gdx.graphics.g2d.n:
    float[] temp -> d
    float[] colors -> e
    float[] timeline -> a
    void load(java.io.BufferedReader) -> a
com.badlogic.gdx.graphics.g2d.ParticleEmitter$Particle -> com.badlogic.gdx.graphics.g2d.o:
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ParticleValue -> com.badlogic.gdx.graphics.g2d.p:
    boolean active -> b
    boolean alwaysActive -> c
    void setAlwaysActive(boolean) -> a
    void load(java.io.BufferedReader) -> a
com.badlogic.gdx.graphics.g2d.ParticleEmitter$RangedNumericValue -> com.badlogic.gdx.graphics.g2d.q:
    float lowMin -> a
    float lowMax -> d
    void load(java.io.BufferedReader) -> a
com.badlogic.gdx.graphics.g2d.ParticleEmitter$ScaledNumericValue -> com.badlogic.gdx.graphics.g2d.r:
    float[] scaling -> d
    float[] timeline -> a
    float highMin -> e
    float highMax -> f
    boolean relative -> g
    void load(java.io.BufferedReader) -> a
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide -> com.badlogic.gdx.graphics.g2d.s:
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide both -> a
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide top -> b
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide bottom -> c
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide[] $VALUES -> d
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide[] values() -> values
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape -> com.badlogic.gdx.graphics.g2d.t:
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape point -> a
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape line -> b
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape square -> c
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape ellipse -> d
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape[] $VALUES -> e
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape[] values() -> values
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShapeValue -> com.badlogic.gdx.graphics.g2d.u:
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape shape -> a
    boolean edges -> d
    com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide side -> e
    void load(java.io.BufferedReader) -> a
com.badlogic.gdx.graphics.g2d.PolygonRegion -> com.badlogic.gdx.graphics.g2d.v:
    float[] textureCoords -> a
    float[] vertices -> b
    short[] triangles -> c
    com.badlogic.gdx.graphics.g2d.TextureRegion region -> d
com.badlogic.gdx.graphics.g2d.PolygonRegionLoader -> com.badlogic.gdx.graphics.g2d.w:
    com.badlogic.gdx.graphics.g2d.PolygonRegionLoader$PolygonRegionParameters defaultParameters -> a
    com.badlogic.gdx.math.EarClippingTriangulator triangulator -> b
    com.badlogic.gdx.graphics.g2d.PolygonRegion load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.PolygonRegionLoader$PolygonRegionParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g2d.PolygonRegionLoader$PolygonRegionParameters) -> a
    com.badlogic.gdx.graphics.g2d.PolygonRegion load(com.badlogic.gdx.graphics.g2d.TextureRegion,com.badlogic.gdx.files.FileHandle) -> a
    java.lang.Object load(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.graphics.g2d.PolygonRegionLoader$PolygonRegionParameters -> com.badlogic.gdx.graphics.g2d.x:
    java.lang.String texturePrefix -> b
    int readerBuffer -> c
    java.lang.String[] textureExtensions -> d
com.badlogic.gdx.graphics.g2d.Sprite -> com.badlogic.gdx.graphics.g2d.y:
    float[] vertices -> a
    com.badlogic.gdx.graphics.Color color -> d
    float x -> e
    float y -> f
    float width -> b
    float height -> c
    float originX -> g
    float originY -> h
    float rotation -> i
    float scaleX -> j
    float scaleY -> k
    boolean dirty -> s
    void set(com.badlogic.gdx.graphics.g2d.Sprite) -> a
    void setBounds(float,float,float,float) -> a
    void setSize(float,float) -> a
    void translate(float,float) -> b
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void setAlpha(float) -> a
    void setColor(float,float,float,float) -> b
    void setOrigin(float,float) -> c
    void setRotation(float) -> b
    void rotate90(boolean) -> a
    void setScale(float,float) -> d
    void scale(float) -> c
    float[] getVertices() -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    float getX() -> b
    float getY() -> c
    float getWidth() -> d
    float getHeight() -> e
    float getOriginX() -> f
    float getOriginY() -> g
    com.badlogic.gdx.graphics.Color getColor() -> h
    void setRegion(float,float,float,float) -> c
    void flip(boolean,boolean) -> a
com.badlogic.gdx.graphics.g2d.SpriteBatch -> com.badlogic.gdx.graphics.g2d.z:
    com.badlogic.gdx.graphics.Mesh mesh -> k
    float[] vertices -> a
    int idx -> b
    com.badlogic.gdx.graphics.Texture lastTexture -> c
    float invTexWidth -> d
    float invTexHeight -> e
    boolean drawing -> f
    com.badlogic.gdx.math.Matrix4 transformMatrix -> l
    com.badlogic.gdx.math.Matrix4 projectionMatrix -> m
    com.badlogic.gdx.math.Matrix4 combinedMatrix -> n
    boolean blendingDisabled -> o
    int blendSrcFunc -> p
    int blendDstFunc -> q
    com.badlogic.gdx.graphics.glutils.ShaderProgram shader -> r
    com.badlogic.gdx.graphics.glutils.ShaderProgram customShader -> s
    boolean ownsShader -> t
    float color -> g
    com.badlogic.gdx.graphics.Color tempColor -> u
    int renderCalls -> h
    int totalRenderCalls -> i
    int maxSpritesInBatch -> j
    com.badlogic.gdx.graphics.glutils.ShaderProgram createDefaultShader() -> g
    void begin() -> a
    void end() -> b
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void setColor(float,float,float,float) -> a
    com.badlogic.gdx.graphics.Color getColor() -> d
    void draw(com.badlogic.gdx.graphics.Texture,float,float,float,float,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.Texture,float[],int,int) -> a
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.TextureRegion,float,float,float,float,float,float,float,float,float) -> a
    void flush() -> e
    void dispose() -> c
    com.badlogic.gdx.math.Matrix4 getTransformMatrix() -> f
    void setProjectionMatrix(com.badlogic.gdx.math.Matrix4) -> a
    void setTransformMatrix(com.badlogic.gdx.math.Matrix4) -> b
    void setupMatrices() -> i
    void switchTexture(com.badlogic.gdx.graphics.Texture) -> a
    boolean isBlendingEnabled() -> h
com.badlogic.gdx.graphics.g2d.TextureAtlas -> com.badlogic.gdx.graphics.g2d.aa:
    java.lang.String[] tuple -> a
    com.badlogic.gdx.utils.ObjectSet textures -> c
    com.badlogic.gdx.utils.Array regions -> d
    java.util.Comparator indexComparator -> b
    void load(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData) -> a
    com.badlogic.gdx.utils.Array getRegions() -> a
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion findRegion(java.lang.String) -> a
    com.badlogic.gdx.graphics.g2d.Sprite createSprite(java.lang.String) -> b
    com.badlogic.gdx.graphics.g2d.Sprite newSprite(com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion) -> a
    void dispose() -> c
    java.lang.String readValue(java.io.BufferedReader) -> a
    int readTuple(java.io.BufferedReader) -> b
com.badlogic.gdx.graphics.g2d.TextureAtlas$1 -> com.badlogic.gdx.graphics.g2d.ab:
    int compare(com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region,com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion -> com.badlogic.gdx.graphics.g2d.ac:
    int index -> a
    java.lang.String name -> b
    float offsetX -> c
    float offsetY -> d
    int packedWidth -> e
    int packedHeight -> f
    int originalWidth -> g
    int originalHeight -> h
    boolean rotate -> i
    int[] splits -> j
    int[] pads -> k
    void flip(boolean,boolean) -> a
    float getRotatedPackedWidth() -> a
    float getRotatedPackedHeight() -> b
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasSprite -> com.badlogic.gdx.graphics.g2d.ad:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion region -> d
    float originalOffsetX -> e
    float originalOffsetY -> f
    void setBounds(float,float,float,float) -> a
    void setSize(float,float) -> a
    void setOrigin(float,float) -> c
    void flip(boolean,boolean) -> a
    void rotate90(boolean) -> a
    float getX() -> b
    float getY() -> c
    float getOriginX() -> f
    float getOriginY() -> g
    float getWidth() -> d
    float getHeight() -> e
    float getWidthRatio() -> i
    float getHeightRatio() -> j
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData -> com.badlogic.gdx.graphics.g2d.ae:
    com.badlogic.gdx.utils.Array pages -> a
    com.badlogic.gdx.utils.Array regions -> b
    com.badlogic.gdx.utils.Array getPages() -> a
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page -> com.badlogic.gdx.graphics.g2d.af:
    com.badlogic.gdx.files.FileHandle textureFile -> a
    com.badlogic.gdx.graphics.Texture texture -> b
    float width -> c
    float height -> d
    boolean useMipMaps -> e
    com.badlogic.gdx.graphics.Pixmap$Format format -> f
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> g
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> h
    com.badlogic.gdx.graphics.Texture$TextureWrap uWrap -> i
    com.badlogic.gdx.graphics.Texture$TextureWrap vWrap -> j
com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Region -> com.badlogic.gdx.graphics.g2d.ag:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$TextureAtlasData$Page page -> a
    int index -> b
    java.lang.String name -> c
    float offsetX -> d
    float offsetY -> e
    int originalWidth -> f
    int originalHeight -> g
    boolean rotate -> h
    int left -> i
    int top -> j
    int width -> k
    int height -> l
    boolean flip -> m
    int[] splits -> n
    int[] pads -> o
com.badlogic.gdx.graphics.g2d.TextureRegion -> com.badlogic.gdx.graphics.g2d.ah:
    com.badlogic.gdx.graphics.Texture texture -> l
    float u -> m
    float v -> n
    float u2 -> o
    float v2 -> p
    int regionWidth -> q
    int regionHeight -> r
    void setRegion(int,int,int,int) -> a
    void setRegion(float,float,float,float) -> c
    void setRegion(com.badlogic.gdx.graphics.g2d.TextureRegion) -> a
    void setRegion(com.badlogic.gdx.graphics.g2d.TextureRegion,int,int,int,int) -> a
    com.badlogic.gdx.graphics.Texture getTexture() -> k
    void setTexture(com.badlogic.gdx.graphics.Texture) -> a
    float getU() -> l
    float getV() -> m
    float getU2() -> n
    float getV2() -> o
    int getRegionX() -> p
    int getRegionY() -> q
    int getRegionWidth() -> r
    int getRegionHeight() -> s
    void flip(boolean,boolean) -> a
com.badlogic.gdx.graphics.g3d.Attribute -> com.badlogic.gdx.graphics.a.a:
    com.badlogic.gdx.utils.Array types -> b
    long type -> a
    int typeBit -> c
    long getAttributeType(java.lang.String) -> a
    java.lang.String getAttributeAlias(long) -> a
    long register(java.lang.String) -> b
    boolean equals(com.badlogic.gdx.graphics.g3d.Attribute) -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
com.badlogic.gdx.graphics.g3d.Attributes -> com.badlogic.gdx.graphics.a.b:
    long mask -> a
    com.badlogic.gdx.utils.Array attributes -> b
    boolean sorted -> c
    void sort() -> a
    void enable(long) -> c
    void set(com.badlogic.gdx.graphics.g3d.Attribute) -> a
    boolean has(long) -> a
    int indexOf(long) -> b
    boolean same(com.badlogic.gdx.graphics.g3d.Attributes,boolean) -> a
    int compare(com.badlogic.gdx.graphics.g3d.Attribute,com.badlogic.gdx.graphics.g3d.Attribute) -> a
    java.util.Iterator iterator() -> iterator
    int attributesHash() -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(com.badlogic.gdx.graphics.g3d.Attributes) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
    int compareTo(java.lang.Object) -> compareTo
com.badlogic.gdx.graphics.g3d.Material -> com.badlogic.gdx.graphics.a.c:
    int counter -> e
    java.lang.String id -> d
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.graphics.g3d.Model -> com.badlogic.gdx.graphics.a.d:
    com.badlogic.gdx.utils.Array materials -> a
    com.badlogic.gdx.utils.Array nodes -> b
    com.badlogic.gdx.utils.Array animations -> c
    com.badlogic.gdx.utils.Array meshes -> d
    com.badlogic.gdx.utils.Array meshParts -> e
    com.badlogic.gdx.utils.Array disposables -> f
    com.badlogic.gdx.utils.ObjectMap nodePartBones -> g
    void load(com.badlogic.gdx.graphics.g3d.model.data.ModelData,com.badlogic.gdx.graphics.g3d.utils.TextureProvider) -> a
    void loadAnimations(java.lang.Iterable) -> a
    void loadNodes(java.lang.Iterable) -> b
    com.badlogic.gdx.graphics.g3d.model.Node loadNode(com.badlogic.gdx.graphics.g3d.model.data.ModelNode) -> a
    void loadMeshes(java.lang.Iterable) -> c
    void convertMesh(com.badlogic.gdx.graphics.g3d.model.data.ModelMesh) -> a
    void loadMaterials(java.lang.Iterable,com.badlogic.gdx.graphics.g3d.utils.TextureProvider) -> a
    com.badlogic.gdx.graphics.g3d.Material convertMaterial(com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial,com.badlogic.gdx.graphics.g3d.utils.TextureProvider) -> a
    java.lang.Iterable getManagedDisposables() -> a
    void dispose() -> c
    void calculateTransforms() -> b
    com.badlogic.gdx.graphics.g3d.model.Node getNode(java.lang.String) -> a
    com.badlogic.gdx.graphics.g3d.model.Node getNode(java.lang.String,boolean) -> a
    com.badlogic.gdx.graphics.g3d.model.Node getNode(java.lang.String,boolean,boolean) -> a
com.badlogic.gdx.graphics.g3d.attributes.BlendingAttribute -> com.badlogic.gdx.graphics.a.a.a:
    long Type -> b
    boolean blended -> c
    int sourceFunction -> d
    int destFunction -> e
    float opacity -> f
    int hashCode() -> hashCode
    int compareTo(com.badlogic.gdx.graphics.g3d.Attribute) -> b
    int compareTo(java.lang.Object) -> compareTo
com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute -> com.badlogic.gdx.graphics.a.a.b:
    long Diffuse -> b
    long Specular -> c
    long Ambient -> d
    long Emissive -> e
    long Reflection -> f
    long AmbientLight -> g
    long Fog -> h
    long Mask -> i
    com.badlogic.gdx.graphics.Color color -> j
    boolean is(long) -> b
    int hashCode() -> hashCode
    int compareTo(com.badlogic.gdx.graphics.g3d.Attribute) -> b
    int compareTo(java.lang.Object) -> compareTo
com.badlogic.gdx.graphics.g3d.attributes.FloatAttribute -> com.badlogic.gdx.graphics.a.a.c:
    long Shininess -> b
    long AlphaTest -> c
    float value -> d
    int hashCode() -> hashCode
    int compareTo(com.badlogic.gdx.graphics.g3d.Attribute) -> b
    int compareTo(java.lang.Object) -> compareTo
com.badlogic.gdx.graphics.g3d.attributes.TextureAttribute -> com.badlogic.gdx.graphics.a.a.d:
    long Diffuse -> b
    long Specular -> c
    long Bump -> d
    long Normal -> e
    long Ambient -> f
    long Emissive -> g
    long Reflection -> h
    long Mask -> i
    com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor textureDescription -> j
    float offsetU -> k
    float offsetV -> l
    float scaleU -> m
    float scaleV -> n
    int uvIndex -> o
    boolean is(long) -> b
    int hashCode() -> hashCode
    int compareTo(com.badlogic.gdx.graphics.g3d.Attribute) -> b
    int compareTo(java.lang.Object) -> compareTo
com.badlogic.gdx.graphics.g3d.loader.G3dModelLoader -> com.badlogic.gdx.graphics.a.b.a:
    com.badlogic.gdx.utils.BaseJsonReader reader -> c
    com.badlogic.gdx.math.Quaternion tempQ -> d
    com.badlogic.gdx.graphics.g3d.model.data.ModelData loadModelData(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters) -> a
    com.badlogic.gdx.graphics.g3d.model.data.ModelData parseModel(com.badlogic.gdx.files.FileHandle) -> a
    void parseMeshes(com.badlogic.gdx.graphics.g3d.model.data.ModelData,com.badlogic.gdx.utils.JsonValue) -> a
    int parseType(java.lang.String) -> b
    com.badlogic.gdx.graphics.VertexAttribute[] parseAttributes(com.badlogic.gdx.utils.JsonValue) -> a
    void parseMaterials(com.badlogic.gdx.graphics.g3d.model.data.ModelData,com.badlogic.gdx.utils.JsonValue,java.lang.String) -> a
    int parseTextureUsage(java.lang.String) -> c
    com.badlogic.gdx.graphics.Color parseColor(com.badlogic.gdx.utils.JsonValue) -> b
    com.badlogic.gdx.math.Vector2 readVector2(com.badlogic.gdx.utils.JsonValue,float,float) -> a
    com.badlogic.gdx.utils.Array parseNodes(com.badlogic.gdx.graphics.g3d.model.data.ModelData,com.badlogic.gdx.utils.JsonValue) -> b
    com.badlogic.gdx.graphics.g3d.model.data.ModelNode parseNodesRecursively(com.badlogic.gdx.utils.JsonValue) -> c
    void parseAnimations(com.badlogic.gdx.graphics.g3d.model.data.ModelData,com.badlogic.gdx.utils.JsonValue) -> c
com.badlogic.gdx.graphics.g3d.loader.MtlLoader -> com.badlogic.gdx.graphics.a.b.b:
    com.badlogic.gdx.utils.Array materials -> a
    void load(com.badlogic.gdx.files.FileHandle) -> a
    com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial getMaterial(java.lang.String) -> a
com.badlogic.gdx.graphics.g3d.loader.ObjLoader -> com.badlogic.gdx.graphics.a.b.c:
    boolean logWarning -> c
    com.badlogic.gdx.utils.FloatArray verts -> d
    com.badlogic.gdx.utils.FloatArray norms -> e
    com.badlogic.gdx.utils.FloatArray uvs -> f
    com.badlogic.gdx.utils.Array groups -> g
    com.badlogic.gdx.graphics.g3d.model.data.ModelData loadModelData(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g3d.loader.ObjLoader$ObjLoaderParameters) -> a
    com.badlogic.gdx.graphics.g3d.model.data.ModelData loadModelData(com.badlogic.gdx.files.FileHandle,boolean) -> a
    com.badlogic.gdx.graphics.g3d.loader.ObjLoader$Group setActiveGroup(java.lang.String) -> b
    int getIndex(java.lang.String,int) -> a
    com.badlogic.gdx.graphics.g3d.model.data.ModelData loadModelData(com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.loaders.ModelLoader$ModelParameters) -> a
com.badlogic.gdx.graphics.g3d.loader.ObjLoader$Group -> com.badlogic.gdx.graphics.a.b.d:
    java.lang.String name -> a
    java.lang.String materialName -> b
    com.badlogic.gdx.utils.Array faces -> c
    int numFaces -> d
    boolean hasNorms -> e
    boolean hasUVs -> f
    com.badlogic.gdx.graphics.g3d.Material mat -> g
    com.badlogic.gdx.graphics.g3d.loader.ObjLoader this$0 -> h
com.badlogic.gdx.graphics.g3d.loader.ObjLoader$ObjLoaderParameters -> com.badlogic.gdx.graphics.a.b.e:
    boolean flipV -> c
com.badlogic.gdx.graphics.g3d.model.Animation -> com.badlogic.gdx.graphics.a.c.a:
    java.lang.String id -> a
    float duration -> b
    com.badlogic.gdx.utils.Array nodeAnimations -> c
com.badlogic.gdx.graphics.g3d.model.MeshPart -> com.badlogic.gdx.graphics.a.c.b:
    java.lang.String id -> a
    int primitiveType -> b
    int indexOffset -> c
    int numVertices -> d
    com.badlogic.gdx.graphics.Mesh mesh -> e
    boolean equals(com.badlogic.gdx.graphics.g3d.model.MeshPart) -> a
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.graphics.g3d.model.Node -> com.badlogic.gdx.graphics.a.c.c:
    java.lang.String id -> a
    boolean inheritTransform -> b
    boolean isAnimated -> c
    com.badlogic.gdx.math.Vector3 translation -> d
    com.badlogic.gdx.math.Quaternion rotation -> e
    com.badlogic.gdx.math.Vector3 scale -> f
    com.badlogic.gdx.math.Matrix4 localTransform -> g
    com.badlogic.gdx.math.Matrix4 globalTransform -> h
    com.badlogic.gdx.utils.Array parts -> i
    com.badlogic.gdx.graphics.g3d.model.Node parent -> j
    com.badlogic.gdx.utils.Array children -> k
    com.badlogic.gdx.math.Matrix4 calculateLocalTransform() -> a
    com.badlogic.gdx.math.Matrix4 calculateWorldTransform() -> b
    void calculateTransforms(boolean) -> a
    void calculateBoneTransforms(boolean) -> b
    int addChild(com.badlogic.gdx.graphics.g3d.model.Node) -> a
    int insertChild(int,com.badlogic.gdx.graphics.g3d.model.Node) -> a
    boolean removeChild(com.badlogic.gdx.graphics.g3d.model.Node) -> b
    com.badlogic.gdx.graphics.g3d.model.Node getParent() -> c
    com.badlogic.gdx.graphics.g3d.model.Node getNode(com.badlogic.gdx.utils.Array,java.lang.String,boolean,boolean) -> a
com.badlogic.gdx.graphics.g3d.model.NodeAnimation -> com.badlogic.gdx.graphics.a.c.d:
    com.badlogic.gdx.graphics.g3d.model.Node node -> a
    com.badlogic.gdx.utils.Array translation -> b
    com.badlogic.gdx.utils.Array rotation -> c
    com.badlogic.gdx.utils.Array scaling -> d
com.badlogic.gdx.graphics.g3d.model.NodeKeyframe -> com.badlogic.gdx.graphics.a.c.e:
    float keytime -> a
    java.lang.Object value -> b
com.badlogic.gdx.graphics.g3d.model.NodePart -> com.badlogic.gdx.graphics.a.c.f:
    com.badlogic.gdx.graphics.g3d.model.MeshPart meshPart -> a
    com.badlogic.gdx.graphics.g3d.Material material -> b
    com.badlogic.gdx.utils.ArrayMap invBoneBindTransforms -> c
    com.badlogic.gdx.math.Matrix4[] bones -> d
    boolean enabled -> e
com.badlogic.gdx.graphics.g3d.model.data.ModelAnimation -> com.badlogic.gdx.graphics.a.c.a.a:
    java.lang.String id -> a
    com.badlogic.gdx.utils.Array nodeAnimations -> b
com.badlogic.gdx.graphics.g3d.model.data.ModelData -> com.badlogic.gdx.graphics.a.c.a.b:
    java.lang.String id -> a
    short[] version -> b
    com.badlogic.gdx.utils.Array meshes -> c
    com.badlogic.gdx.utils.Array materials -> d
    com.badlogic.gdx.utils.Array nodes -> e
    com.badlogic.gdx.utils.Array animations -> f
com.badlogic.gdx.graphics.g3d.model.data.ModelMaterial -> com.badlogic.gdx.graphics.a.c.a.c:
    java.lang.String id -> a
    com.badlogic.gdx.graphics.Color ambient -> b
    com.badlogic.gdx.graphics.Color diffuse -> c
    com.badlogic.gdx.graphics.Color specular -> d
    com.badlogic.gdx.graphics.Color emissive -> e
    com.badlogic.gdx.graphics.Color reflection -> f
    float shininess -> g
    float opacity -> h
    com.badlogic.gdx.utils.Array textures -> i
com.badlogic.gdx.graphics.g3d.model.data.ModelMesh -> com.badlogic.gdx.graphics.a.c.a.d:
    java.lang.String id -> a
    com.badlogic.gdx.graphics.VertexAttribute[] attributes -> b
    float[] vertices -> c
    com.badlogic.gdx.graphics.g3d.model.data.ModelMeshPart[] parts -> d
com.badlogic.gdx.graphics.g3d.model.data.ModelMeshPart -> com.badlogic.gdx.graphics.a.c.a.e:
    java.lang.String id -> a
    short[] indices -> b
    int primitiveType -> c
com.badlogic.gdx.graphics.g3d.model.data.ModelNode -> com.badlogic.gdx.graphics.a.c.a.f:
    java.lang.String id -> a
    int boneId -> b
    com.badlogic.gdx.math.Vector3 translation -> c
    com.badlogic.gdx.math.Quaternion rotation -> d
    com.badlogic.gdx.math.Vector3 scale -> e
    java.lang.String meshId -> f
    com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart[] parts -> g
    com.badlogic.gdx.graphics.g3d.model.data.ModelNode[] children -> h
com.badlogic.gdx.graphics.g3d.model.data.ModelNodeAnimation -> com.badlogic.gdx.graphics.a.c.a.g:
    java.lang.String nodeId -> a
    com.badlogic.gdx.utils.Array translation -> b
    com.badlogic.gdx.utils.Array rotation -> c
    com.badlogic.gdx.utils.Array scaling -> d
com.badlogic.gdx.graphics.g3d.model.data.ModelNodeKeyframe -> com.badlogic.gdx.graphics.a.c.a.h:
    float keytime -> a
    java.lang.Object value -> b
com.badlogic.gdx.graphics.g3d.model.data.ModelNodePart -> com.badlogic.gdx.graphics.a.c.a.i:
    java.lang.String materialId -> a
    java.lang.String meshPartId -> b
    com.badlogic.gdx.utils.ArrayMap bones -> c
com.badlogic.gdx.graphics.g3d.model.data.ModelTexture -> com.badlogic.gdx.graphics.a.c.a.j:
    java.lang.String id -> a
    java.lang.String fileName -> b
    com.badlogic.gdx.math.Vector2 uvTranslation -> c
    com.badlogic.gdx.math.Vector2 uvScaling -> d
    int usage -> e
com.badlogic.gdx.graphics.g3d.particles.ParticleController -> com.badlogic.gdx.graphics.a.d.a:
    java.lang.String name -> a
    com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter emitter -> b
    com.badlogic.gdx.utils.Array influencers -> c
    com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderer renderer -> d
    com.badlogic.gdx.math.Matrix4 transform -> e
    com.badlogic.gdx.math.Vector3 scale -> f
    float deltaTime -> g
    float deltaTimeSqr -> h
    void setTimeStep(float) -> a
    void dispose() -> a
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> a
    void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> a
com.badlogic.gdx.graphics.g3d.particles.ParticleControllerComponent -> com.badlogic.gdx.graphics.a.d.b:
    com.badlogic.gdx.math.Vector3 TMP_V1 -> a
    com.badlogic.gdx.math.Vector3 TMP_V2 -> b
    com.badlogic.gdx.math.Vector3 TMP_V3 -> c
    com.badlogic.gdx.math.Vector3 TMP_V4 -> d
    com.badlogic.gdx.math.Vector3 TMP_V5 -> e
    com.badlogic.gdx.math.Vector3 TMP_V6 -> f
    com.badlogic.gdx.math.Quaternion TMP_Q -> g
    com.badlogic.gdx.math.Quaternion TMP_Q2 -> h
    com.badlogic.gdx.math.Matrix3 TMP_M3 -> i
    com.badlogic.gdx.math.Matrix4 TMP_M4 -> j
    void dispose() -> c
    void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> a
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> a
com.badlogic.gdx.graphics.g3d.particles.ParticleEffect -> com.badlogic.gdx.graphics.a.d.c:
    com.badlogic.gdx.utils.Array controllers -> a
    void dispose() -> c
    void setBatch(com.badlogic.gdx.utils.Array) -> a
    void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> a
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader -> com.badlogic.gdx.graphics.a.d.d:
    com.badlogic.gdx.utils.Array items -> a
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectLoadParameter) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectLoadParameter) -> a
    com.badlogic.gdx.graphics.g3d.particles.ParticleEffect loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectLoadParameter) -> b
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader$ParticleEffectLoadParameter -> com.badlogic.gdx.graphics.a.d.e:
    com.badlogic.gdx.utils.Array batches -> b
com.badlogic.gdx.graphics.g3d.particles.ResourceData -> com.badlogic.gdx.graphics.a.d.f:
    com.badlogic.gdx.utils.ObjectMap uniqueData -> c
    com.badlogic.gdx.utils.Array data -> d
    com.badlogic.gdx.utils.Array sharedAssets -> a
    int currentLoadIndex -> e
    java.lang.Object resource -> b
    com.badlogic.gdx.utils.Array getAssets() -> a
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> a
com.badlogic.gdx.graphics.g3d.particles.ResourceData$AssetData -> com.badlogic.gdx.graphics.a.d.g:
    java.lang.String filename -> a
    java.lang.Class type -> b
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> a
com.badlogic.gdx.graphics.g3d.particles.ResourceData$SaveData -> com.badlogic.gdx.graphics.a.d.h:
    com.badlogic.gdx.utils.ObjectMap data -> a
    com.badlogic.gdx.utils.IntArray assets -> b
    int loadIndex -> d
    com.badlogic.gdx.graphics.g3d.particles.ResourceData resources -> c
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> a
com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch -> com.badlogic.gdx.graphics.a.d.a.a:
    void load(com.badlogic.gdx.assets.AssetManager,com.badlogic.gdx.graphics.g3d.particles.ResourceData) -> a
com.badlogic.gdx.graphics.g3d.particles.emitters.Emitter -> com.badlogic.gdx.graphics.a.d.b.a:
    int minParticleCount -> k
    int maxParticleCount -> l
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> a
com.badlogic.gdx.graphics.g3d.particles.influencers.Influencer -> com.badlogic.gdx.graphics.a.d.c.a:
com.badlogic.gdx.graphics.g3d.particles.renderers.ParticleControllerRenderer -> com.badlogic.gdx.graphics.a.d.d.a:
    com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch batch -> k
    boolean setBatch(com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch) -> a
    boolean isCompatible(com.badlogic.gdx.graphics.g3d.particles.batches.ParticleBatch) -> b
com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor -> com.badlogic.gdx.graphics.a.e.a:
    com.badlogic.gdx.graphics.GLTexture texture -> a
    com.badlogic.gdx.graphics.Texture$TextureFilter minFilter -> b
    com.badlogic.gdx.graphics.Texture$TextureFilter magFilter -> c
    com.badlogic.gdx.graphics.Texture$TextureWrap uWrap -> d
    com.badlogic.gdx.graphics.Texture$TextureWrap vWrap -> e
    void set(com.badlogic.gdx.graphics.GLTexture,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureFilter,com.badlogic.gdx.graphics.Texture$TextureWrap,com.badlogic.gdx.graphics.Texture$TextureWrap) -> a
    void set(com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(com.badlogic.gdx.graphics.g3d.utils.TextureDescriptor) -> b
    int compareTo(java.lang.Object) -> compareTo
com.badlogic.gdx.graphics.g3d.utils.TextureProvider -> com.badlogic.gdx.graphics.a.e.b:
    com.badlogic.gdx.graphics.Texture load(java.lang.String) -> a
com.badlogic.gdx.graphics.g3d.utils.TextureProvider$AssetTextureProvider -> com.badlogic.gdx.graphics.a.e.c:
    com.badlogic.gdx.assets.AssetManager assetManager -> a
    com.badlogic.gdx.graphics.Texture load(java.lang.String) -> a
com.badlogic.gdx.graphics.glutils.ETC1 -> com.badlogic.gdx.graphics.glutils.ETC1:
    int PKM_HEADER_SIZE -> a
    int ETC1_RGB8_OES -> b
    int getPixelSize(com.badlogic.gdx.graphics.Pixmap$Format) -> a
    com.badlogic.gdx.graphics.Pixmap decodeImage(com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data,com.badlogic.gdx.graphics.Pixmap$Format) -> a
    int getWidthPKM(java.nio.ByteBuffer,int) -> getWidthPKM
    int getHeightPKM(java.nio.ByteBuffer,int) -> getHeightPKM
    boolean isValidPKM(java.nio.ByteBuffer,int) -> isValidPKM
    void decodeImage(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int) -> decodeImage
com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data -> com.badlogic.gdx.graphics.glutils.a:
    int width -> a
    int height -> b
    java.nio.ByteBuffer compressedData -> c
    int dataOffset -> d
    void checkNPOT() -> b
    boolean hasPKMHeader() -> a
    void dispose() -> c
    java.lang.String toString() -> toString
com.badlogic.gdx.graphics.glutils.ETC1TextureData -> com.badlogic.gdx.graphics.glutils.b:
    com.badlogic.gdx.files.FileHandle file -> a
    com.badlogic.gdx.graphics.glutils.ETC1$ETC1Data data -> b
    boolean useMipMaps -> c
    int width -> d
    int height -> e
    boolean isPrepared -> f
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> g
    boolean isPrepared() -> a
    void prepare() -> b
    void consumeCustomData(int) -> a
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> h
    boolean disposePixmap() -> i
    int getWidth() -> d
    int getHeight() -> e
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> j
    boolean useMipMaps() -> k
    boolean isManaged() -> f
com.badlogic.gdx.graphics.glutils.FileTextureData -> com.badlogic.gdx.graphics.glutils.c:
    boolean copyToPOT -> a
    com.badlogic.gdx.files.FileHandle file -> b
    int width -> c
    int height -> d
    com.badlogic.gdx.graphics.Pixmap$Format format -> e
    com.badlogic.gdx.graphics.Pixmap pixmap -> f
    boolean useMipMaps -> g
    boolean isPrepared -> h
    boolean isPrepared() -> a
    void prepare() -> b
    com.badlogic.gdx.graphics.Pixmap ensurePot(com.badlogic.gdx.graphics.Pixmap) -> a
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> h
    boolean disposePixmap() -> i
    int getWidth() -> d
    int getHeight() -> e
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> j
    boolean useMipMaps() -> k
    boolean isManaged() -> f
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> g
    void consumeCustomData(int) -> a
com.badlogic.gdx.graphics.glutils.FrameBuffer -> com.badlogic.gdx.graphics.glutils.d:
    void setupTexture() -> a
com.badlogic.gdx.graphics.glutils.GLFrameBuffer -> com.badlogic.gdx.graphics.glutils.e:
    java.util.Map buffers -> g
    com.badlogic.gdx.graphics.GLTexture colorTexture -> a
    int defaultFramebufferHandle -> h
    boolean defaultFramebufferHandleInitialized -> i
    int framebufferHandle -> j
    int depthbufferHandle -> k
    int stencilbufferHandle -> l
    int width -> b
    int height -> c
    boolean hasDepth -> d
    boolean hasStencil -> e
    com.badlogic.gdx.graphics.Pixmap$Format format -> f
    void setupTexture() -> a
    void build() -> d
    void dispose() -> c
    void invalidateAllFrameBuffers(com.badlogic.gdx.Application) -> a
    void clearAllFrameBuffers(com.badlogic.gdx.Application) -> b
    java.lang.StringBuilder getManagedStatus(java.lang.StringBuilder) -> a
    java.lang.String getManagedStatus() -> b
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer -> com.badlogic.gdx.graphics.glutils.f:
    void begin(com.badlogic.gdx.math.Matrix4,int) -> a
    void color(float,float,float,float) -> a
    void color(float) -> a
    void vertex(float,float,float) -> a
    void end() -> a
    int getNumVertices() -> b
    int getMaxVertices() -> c
    void dispose() -> d
com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20 -> com.badlogic.gdx.graphics.glutils.g:
    int primitiveType -> a
    int vertexIdx -> b
    int numSetTexCoords -> c
    int maxVertices -> d
    int numVertices -> e
    com.badlogic.gdx.graphics.Mesh mesh -> f
    com.badlogic.gdx.graphics.glutils.ShaderProgram shader -> g
    boolean ownsShader -> h
    int numTexCoords -> i
    int vertexSize -> j
    int normalOffset -> k
    int colorOffset -> l
    int texCoordOffset -> m
    com.badlogic.gdx.math.Matrix4 projModelView -> n
    float[] vertices -> o
    java.lang.String[] shaderUniformNames -> p
    com.badlogic.gdx.graphics.VertexAttribute[] buildVertexAttributes(boolean,boolean,int) -> b
    void begin(com.badlogic.gdx.math.Matrix4,int) -> a
    void color(float,float,float,float) -> a
    void color(float) -> a
    void vertex(float,float,float) -> a
    void flush() -> e
    void end() -> a
    int getNumVertices() -> b
    int getMaxVertices() -> c
    void dispose() -> d
    java.lang.String createVertexShader(boolean,boolean,int) -> c
    java.lang.String createFragmentShader(boolean,boolean,int) -> d
    com.badlogic.gdx.graphics.glutils.ShaderProgram createDefaultShader(boolean,boolean,int) -> a
com.badlogic.gdx.graphics.glutils.IndexArray -> com.badlogic.gdx.graphics.glutils.h:
    java.nio.IntBuffer tmpHandle -> a
    java.nio.ShortBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    boolean empty -> d
    int getNumIndices() -> a
    int getNumMaxIndices() -> b
    void setIndices(short[],int,int) -> a
    java.nio.ShortBuffer getBuffer() -> d
    void bind() -> e
    void unbind() -> f
    void invalidate() -> g
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.IndexBufferObject -> com.badlogic.gdx.graphics.glutils.i:
    java.nio.ShortBuffer buffer -> a
    java.nio.ByteBuffer byteBuffer -> b
    int bufferHandle -> c
    boolean isDirect -> d
    boolean isDirty -> e
    boolean isBound -> f
    int usage -> g
    boolean empty -> h
    int getNumIndices() -> a
    int getNumMaxIndices() -> b
    void setIndices(short[],int,int) -> a
    java.nio.ShortBuffer getBuffer() -> d
    void bind() -> e
    void unbind() -> f
    void invalidate() -> g
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.IndexBufferObjectSubData -> com.badlogic.gdx.graphics.glutils.j:
    java.nio.ShortBuffer buffer -> a
    java.nio.ByteBuffer byteBuffer -> b
    int bufferHandle -> c
    boolean isDirect -> d
    boolean isDirty -> e
    boolean isBound -> f
    int usage -> g
    int createBufferObject() -> h
    int getNumIndices() -> a
    int getNumMaxIndices() -> b
    void setIndices(short[],int,int) -> a
    java.nio.ShortBuffer getBuffer() -> d
    void bind() -> e
    void unbind() -> f
    void invalidate() -> g
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.IndexData -> com.badlogic.gdx.graphics.glutils.k:
    int getNumIndices() -> a
    int getNumMaxIndices() -> b
    void setIndices(short[],int,int) -> a
    java.nio.ShortBuffer getBuffer() -> d
    void bind() -> e
    void unbind() -> f
    void invalidate() -> g
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.KTXTextureData -> com.badlogic.gdx.graphics.glutils.l:
    com.badlogic.gdx.files.FileHandle file -> a
    int glType -> b
    int glTypeSize -> c
    int glFormat -> d
    int glInternalFormat -> e
    int glBaseInternalFormat -> f
    int pixelWidth -> g
    int pixelHeight -> h
    int pixelDepth -> i
    int numberOfArrayElements -> j
    int numberOfFaces -> k
    int numberOfMipmapLevels -> l
    int imagePos -> m
    java.nio.ByteBuffer compressedData -> n
    boolean useMipMaps -> o
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> g
    boolean isPrepared() -> a
    void prepare() -> b
    void consumeCubemapData() -> c
    void consumeCustomData(int) -> a
    void disposePreparedData() -> l
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> h
    boolean disposePixmap() -> i
    int getWidth() -> d
    int getHeight() -> e
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> j
    boolean useMipMaps() -> k
    boolean isManaged() -> f
com.badlogic.gdx.graphics.glutils.MipMapGenerator -> com.badlogic.gdx.graphics.glutils.m:
    boolean useHWMipMap -> a
    void generateMipMap(int,com.badlogic.gdx.graphics.Pixmap,int,int) -> a
    void generateMipMapGLES20(int,com.badlogic.gdx.graphics.Pixmap) -> a
    void generateMipMapDesktop(int,com.badlogic.gdx.graphics.Pixmap,int,int) -> b
    void generateMipMapCPU(int,com.badlogic.gdx.graphics.Pixmap,int,int) -> c
com.badlogic.gdx.graphics.glutils.PixmapTextureData -> com.badlogic.gdx.graphics.glutils.n:
    com.badlogic.gdx.graphics.Pixmap pixmap -> a
    com.badlogic.gdx.graphics.Pixmap$Format format -> b
    boolean useMipMaps -> c
    boolean disposePixmap -> d
    boolean managed -> e
    boolean disposePixmap() -> i
    com.badlogic.gdx.graphics.Pixmap consumePixmap() -> h
    int getWidth() -> d
    int getHeight() -> e
    com.badlogic.gdx.graphics.Pixmap$Format getFormat() -> j
    boolean useMipMaps() -> k
    boolean isManaged() -> f
    com.badlogic.gdx.graphics.TextureData$TextureDataType getType() -> g
    void consumeCustomData(int) -> a
    boolean isPrepared() -> a
    void prepare() -> b
com.badlogic.gdx.graphics.glutils.ShaderProgram -> com.badlogic.gdx.graphics.glutils.o:
    boolean pedantic -> a
    com.badlogic.gdx.utils.ObjectMap shaders -> e
    java.lang.String log -> f
    boolean isCompiled -> g
    com.badlogic.gdx.utils.ObjectIntMap uniforms -> h
    com.badlogic.gdx.utils.ObjectIntMap uniformTypes -> i
    com.badlogic.gdx.utils.ObjectIntMap uniformSizes -> j
    java.lang.String[] uniformNames -> k
    com.badlogic.gdx.utils.ObjectIntMap attributes -> l
    com.badlogic.gdx.utils.ObjectIntMap attributeTypes -> m
    com.badlogic.gdx.utils.ObjectIntMap attributeSizes -> n
    java.lang.String[] attributeNames -> o
    int program -> p
    int vertexShaderHandle -> q
    int fragmentShaderHandle -> r
    java.nio.FloatBuffer matrix -> s
    java.lang.String vertexShaderSource -> t
    java.lang.String fragmentShaderSource -> u
    boolean invalidated -> v
    int refCount -> w
    java.nio.IntBuffer intbuf -> b
    java.nio.IntBuffer params -> c
    java.nio.IntBuffer type -> d
    void compileShaders(java.lang.String,java.lang.String) -> a
    int loadShader(int,java.lang.String) -> a
    int linkProgram() -> g
    java.lang.String getLog() -> a
    boolean isCompiled() -> b
    int fetchAttributeLocation(java.lang.String) -> c
    int fetchUniformLocation(java.lang.String) -> d
    int fetchUniformLocation(java.lang.String,boolean) -> a
    void setUniformi(java.lang.String,int) -> a
    void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix4) -> a
    void setUniformMatrix(java.lang.String,com.badlogic.gdx.math.Matrix4,boolean) -> a
    void setUniformMatrix(int,com.badlogic.gdx.math.Matrix4,boolean) -> a
    void setVertexAttribute(int,int,int,boolean,int,java.nio.Buffer) -> a
    void setVertexAttribute(int,int,int,boolean,int,int) -> a
    void begin() -> d
    void end() -> e
    void dispose() -> c
    void disableVertexAttribute(java.lang.String) -> a
    void disableVertexAttribute(int) -> a
    void enableVertexAttribute(int) -> b
    void checkManaged() -> h
    void addManagedShader(com.badlogic.gdx.Application,com.badlogic.gdx.graphics.glutils.ShaderProgram) -> a
    void invalidateAllShaderPrograms(com.badlogic.gdx.Application) -> a
    void clearAllShaderPrograms(com.badlogic.gdx.Application) -> b
    java.lang.String getManagedStatus() -> f
    void fetchUniforms() -> i
    void fetchAttributes() -> j
    int getAttributeLocation(java.lang.String) -> b
com.badlogic.gdx.graphics.glutils.ShapeRenderer -> com.badlogic.gdx.graphics.glutils.p:
    com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer renderer -> a
    boolean matrixDirty -> b
    com.badlogic.gdx.math.Matrix4 projectionMatrix -> c
    com.badlogic.gdx.math.Matrix4 transformMatrix -> d
    com.badlogic.gdx.math.Matrix4 combinedMatrix -> e
    com.badlogic.gdx.math.Vector2 tmp -> f
    com.badlogic.gdx.graphics.Color color -> g
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType shapeType -> h
    boolean autoShapeType -> i
    float defaultRectLineWidth -> j
    void setColor(com.badlogic.gdx.graphics.Color) -> a
    void setProjectionMatrix(com.badlogic.gdx.math.Matrix4) -> a
    void setTransformMatrix(com.badlogic.gdx.math.Matrix4) -> b
    com.badlogic.gdx.math.Matrix4 getTransformMatrix() -> a
    void setAutoShapeType(boolean) -> a
    void begin() -> b
    void begin(com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType) -> a
    void set(com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType) -> b
    void rect(float,float,float,float) -> a
    void rect(float,float,float,float,float,float,float,float,float) -> a
    void rect(float,float,float,float,float,float,float,float,float,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color,com.badlogic.gdx.graphics.Color) -> a
    void check(com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType,com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType,int) -> a
    void end() -> d
    void flush() -> e
    boolean isDrawing() -> f
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType -> com.badlogic.gdx.graphics.glutils.q:
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Point -> a
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Line -> b
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType Filled -> c
    int glType -> d
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType[] $VALUES -> e
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType[] values() -> values
    com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType valueOf(java.lang.String) -> valueOf
    int getGlType() -> a
com.badlogic.gdx.graphics.glutils.VertexArray -> com.badlogic.gdx.graphics.glutils.r:
    com.badlogic.gdx.graphics.VertexAttributes attributes -> a
    java.nio.FloatBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    boolean isBound -> d
    void dispose() -> c
    java.nio.FloatBuffer getBuffer() -> a
    int getNumVertices() -> b
    void setVertices(float[],int,int) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> d
    void invalidate() -> e
com.badlogic.gdx.graphics.glutils.VertexBufferObject -> com.badlogic.gdx.graphics.glutils.s:
    com.badlogic.gdx.graphics.VertexAttributes attributes -> c
    java.nio.FloatBuffer buffer -> d
    java.nio.ByteBuffer byteBuffer -> e
    boolean ownsBuffer -> f
    int bufferHandle -> g
    int usage -> h
    boolean isDirty -> a
    boolean isBound -> b
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> d
    int getNumVertices() -> b
    java.nio.FloatBuffer getBuffer() -> a
    void setBuffer(java.nio.Buffer,boolean,com.badlogic.gdx.graphics.VertexAttributes) -> a
    void bufferChanged() -> f
    void setVertices(float[],int,int) -> a
    void setUsage(int) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void invalidate() -> e
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.VertexBufferObjectSubData -> com.badlogic.gdx.graphics.glutils.t:
    com.badlogic.gdx.graphics.VertexAttributes attributes -> a
    java.nio.FloatBuffer buffer -> b
    java.nio.ByteBuffer byteBuffer -> c
    int bufferHandle -> d
    boolean isDirect -> e
    boolean isStatic -> f
    int usage -> g
    boolean isDirty -> h
    boolean isBound -> i
    int createBufferObject() -> f
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> d
    int getNumVertices() -> b
    java.nio.FloatBuffer getBuffer() -> a
    void bufferChanged() -> g
    void setVertices(float[],int,int) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void invalidate() -> e
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.VertexBufferObjectWithVAO -> com.badlogic.gdx.graphics.glutils.u:
    java.nio.IntBuffer tmpHandle -> a
    com.badlogic.gdx.graphics.VertexAttributes attributes -> b
    java.nio.FloatBuffer buffer -> c
    java.nio.ByteBuffer byteBuffer -> d
    int bufferHandle -> e
    boolean isStatic -> f
    int usage -> g
    boolean isDirty -> h
    boolean isBound -> i
    boolean vaoDirty -> j
    int vaoHandle -> k
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> d
    int getNumVertices() -> b
    java.nio.FloatBuffer getBuffer() -> a
    void bufferChanged() -> f
    void setVertices(float[],int,int) -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void bindAttributes(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> c
    void bindData(com.badlogic.gdx.graphics.GL20) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void invalidate() -> e
    void dispose() -> c
com.badlogic.gdx.graphics.glutils.VertexData -> com.badlogic.gdx.graphics.glutils.v:
    int getNumVertices() -> b
    com.badlogic.gdx.graphics.VertexAttributes getAttributes() -> d
    void setVertices(float[],int,int) -> a
    java.nio.FloatBuffer getBuffer() -> a
    void bind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> a
    void unbind(com.badlogic.gdx.graphics.glutils.ShaderProgram,int[]) -> b
    void invalidate() -> e
    void dispose() -> c
com.badlogic.gdx.input.GestureDetector -> com.badlogic.gdx.d.a:
    com.badlogic.gdx.input.GestureDetector$GestureListener listener -> a
    float tapSquareSize -> d
    long tapCountInterval -> e
    float longPressSeconds -> f
    long maxFlingDelay -> g
    boolean inTapSquare -> h
    int tapCount -> i
    long lastTapTime -> j
    float lastTapX -> k
    float lastTapY -> l
    int lastTapButton -> m
    int lastTapPointer -> n
    boolean longPressFired -> b
    boolean pinching -> o
    boolean panning -> p
    com.badlogic.gdx.input.GestureDetector$VelocityTracker tracker -> q
    float tapSquareCenterX -> r
    float tapSquareCenterY -> s
    long gestureStartTime -> t
    com.badlogic.gdx.math.Vector2 pointer1 -> c
    com.badlogic.gdx.math.Vector2 pointer2 -> u
    com.badlogic.gdx.math.Vector2 initialPointer1 -> v
    com.badlogic.gdx.math.Vector2 initialPointer2 -> w
    com.badlogic.gdx.utils.Timer$Task longPressTask -> x
    boolean touchDown(int,int,int,int) -> a
    boolean touchDown(float,float,int,int) -> a
    boolean touchDragged(int,int,int) -> a
    boolean touchDragged(float,float,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchUp(float,float,int,int) -> b
    boolean isWithinTapSquare(float,float,float,float) -> a
com.badlogic.gdx.input.GestureDetector$1 -> com.badlogic.gdx.d.b:
    com.badlogic.gdx.input.GestureDetector this$0 -> a
    void run() -> run
com.badlogic.gdx.input.GestureDetector$GestureListener -> com.badlogic.gdx.d.c:
    boolean touchDown(float,float,int,int) -> a
    boolean tap(float,float,int,int) -> b
    boolean longPress(float,float) -> a
    boolean fling(float,float,int) -> a
    boolean pan(float,float,float,float) -> a
    boolean panStop(float,float,int,int) -> c
    boolean zoom(float,float) -> b
    boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> a
com.badlogic.gdx.input.GestureDetector$VelocityTracker -> com.badlogic.gdx.d.d:
    int sampleSize -> a
    float lastX -> b
    float lastY -> c
    float deltaX -> d
    float deltaY -> e
    long lastTime -> f
    int numSamples -> g
    float[] meanX -> h
    float[] meanY -> i
    long[] meanTime -> j
    void start(float,float,long) -> a
    void update(float,float,long) -> b
    float getVelocityX() -> a
    float getVelocityY() -> b
    float getAverage(float[],int) -> a
    long getAverage(long[],int) -> a
com.badlogic.gdx.maps.ImageResolver -> com.badlogic.gdx.e.a:
    com.badlogic.gdx.graphics.g2d.TextureRegion getImage(java.lang.String) -> a
com.badlogic.gdx.maps.ImageResolver$AssetManagerImageResolver -> com.badlogic.gdx.e.b:
    com.badlogic.gdx.assets.AssetManager assetManager -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion getImage(java.lang.String) -> a
com.badlogic.gdx.maps.Map -> com.badlogic.gdx.e.c:
    com.badlogic.gdx.maps.MapLayers layers -> a
    com.badlogic.gdx.maps.MapProperties properties -> b
    com.badlogic.gdx.maps.MapLayers getLayers() -> a
    com.badlogic.gdx.maps.MapProperties getProperties() -> b
    void dispose() -> c
com.badlogic.gdx.maps.MapLayer -> com.badlogic.gdx.e.d:
    java.lang.String name -> a
    float opacity -> b
    boolean visible -> c
    com.badlogic.gdx.maps.MapObjects objects -> d
    com.badlogic.gdx.maps.MapProperties properties -> e
    java.lang.String getName() -> a
    void setName(java.lang.String) -> a
    float getOpacity() -> b
    void setOpacity(float) -> a
    com.badlogic.gdx.maps.MapObjects getObjects() -> c
    boolean isVisible() -> d
    void setVisible(boolean) -> a
    com.badlogic.gdx.maps.MapProperties getProperties() -> e
com.badlogic.gdx.maps.MapLayers -> com.badlogic.gdx.e.e:
    com.badlogic.gdx.utils.Array layers -> a
    void add(com.badlogic.gdx.maps.MapLayer) -> a
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.maps.MapObject -> com.badlogic.gdx.e.f:
    java.lang.String name -> a
    float opacity -> b
    boolean visible -> c
    com.badlogic.gdx.maps.MapProperties properties -> d
    com.badlogic.gdx.graphics.Color color -> e
    void setName(java.lang.String) -> a
    void setVisible(boolean) -> a
    com.badlogic.gdx.maps.MapProperties getProperties() -> a
com.badlogic.gdx.maps.MapObjects -> com.badlogic.gdx.e.g:
    com.badlogic.gdx.utils.Array objects -> a
    void add(com.badlogic.gdx.maps.MapObject) -> a
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.maps.MapProperties -> com.badlogic.gdx.e.h:
    com.badlogic.gdx.utils.ObjectMap properties -> a
    void put(java.lang.String,java.lang.Object) -> a
com.badlogic.gdx.maps.MapRenderer -> com.badlogic.gdx.e.i:
    void setView(com.badlogic.gdx.graphics.OrthographicCamera) -> a
    void render() -> a
com.badlogic.gdx.maps.objects.EllipseMapObject -> com.badlogic.gdx.e.a.a:
    com.badlogic.gdx.math.Ellipse ellipse -> a
com.badlogic.gdx.maps.objects.PolygonMapObject -> com.badlogic.gdx.e.a.b:
    com.badlogic.gdx.math.Polygon polygon -> a
com.badlogic.gdx.maps.objects.PolylineMapObject -> com.badlogic.gdx.e.a.c:
    com.badlogic.gdx.math.Polyline polyline -> a
com.badlogic.gdx.maps.objects.RectangleMapObject -> com.badlogic.gdx.e.a.d:
    com.badlogic.gdx.math.Rectangle rectangle -> a
com.badlogic.gdx.maps.objects.TextureMapObject -> com.badlogic.gdx.e.a.e:
    float x -> a
    float y -> b
    float originX -> c
    float originY -> d
    float scaleX -> e
    float scaleY -> f
    float rotation -> g
    com.badlogic.gdx.graphics.g2d.TextureRegion textureRegion -> h
    void setX(float) -> a
    void setY(float) -> b
    void setScaleX(float) -> c
    void setScaleY(float) -> d
    void setRotation(float) -> e
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader -> com.badlogic.gdx.e.b.a:
    com.badlogic.gdx.utils.XmlReader xml -> a
    com.badlogic.gdx.utils.XmlReader$Element root -> b
    boolean convertObjectToTileSpace -> c
    boolean flipY -> d
    int mapTileWidth -> e
    int mapTileHeight -> f
    int mapWidthInPixels -> g
    int mapHeightInPixels -> h
    com.badlogic.gdx.maps.tiled.TiledMap map -> i
    void loadTileLayer(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.utils.XmlReader$Element) -> a
    void loadObjectGroup(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.utils.XmlReader$Element) -> b
    void loadImageLayer(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver) -> a
    void loadBasicLayerInfo(com.badlogic.gdx.maps.MapLayer,com.badlogic.gdx.utils.XmlReader$Element) -> a
    void loadObject(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.maps.MapLayer,com.badlogic.gdx.utils.XmlReader$Element) -> a
    void loadProperties(com.badlogic.gdx.maps.MapProperties,com.badlogic.gdx.utils.XmlReader$Element) -> a
    com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell createTileLayerCell(boolean,boolean,boolean) -> a
    int[] getTileIds(com.badlogic.gdx.utils.XmlReader$Element,int,int) -> a
    int unsignedByteToInt(byte) -> a
    com.badlogic.gdx.files.FileHandle getRelativeFileHandle(com.badlogic.gdx.files.FileHandle,java.lang.String) -> a
com.badlogic.gdx.maps.tiled.BaseTmxMapLoader$Parameters -> com.badlogic.gdx.e.b.b:
    boolean generateMipMaps -> b
    com.badlogic.gdx.graphics.Texture$TextureFilter textureMinFilter -> c
    com.badlogic.gdx.graphics.Texture$TextureFilter textureMagFilter -> d
    boolean convertObjectToTileSpace -> e
    boolean flipY -> f
com.badlogic.gdx.maps.tiled.TiledMap -> com.badlogic.gdx.e.b.c:
    com.badlogic.gdx.maps.tiled.TiledMapTileSets tilesets -> a
    com.badlogic.gdx.utils.Array ownedResources -> b
    com.badlogic.gdx.maps.tiled.TiledMapTileSets getTileSets() -> d
    void dispose() -> c
com.badlogic.gdx.maps.tiled.TiledMapImageLayer -> com.badlogic.gdx.e.b.d:
    com.badlogic.gdx.graphics.g2d.TextureRegion region -> a
    float x -> b
    float y -> c
    com.badlogic.gdx.graphics.g2d.TextureRegion getTextureRegion() -> f
    float getX() -> g
    float getY() -> h
com.badlogic.gdx.maps.tiled.TiledMapRenderer -> com.badlogic.gdx.e.b.e:
    void renderTileLayer(com.badlogic.gdx.maps.tiled.TiledMapTileLayer) -> a
com.badlogic.gdx.maps.tiled.TiledMapTile -> com.badlogic.gdx.e.b.f:
    int getId() -> a
    void setId(int) -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion getTextureRegion() -> b
    float getOffsetX() -> c
    void setOffsetX(float) -> a
    float getOffsetY() -> d
    void setOffsetY(float) -> b
    com.badlogic.gdx.maps.MapProperties getProperties() -> e
com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode -> com.badlogic.gdx.e.b.g:
    com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode NONE -> a
    com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode ALPHA -> b
    com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode[] $VALUES -> c
    com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode[] values() -> values
    com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.maps.tiled.TiledMapTileLayer -> com.badlogic.gdx.e.b.h:
    int width -> a
    int height -> b
    float tileWidth -> c
    float tileHeight -> d
    com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell[][] cells -> e
    int getWidth() -> f
    int getHeight() -> g
    float getTileWidth() -> h
    float getTileHeight() -> i
    com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell getCell(int,int) -> a
    void setCell(int,int,com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell) -> a
com.badlogic.gdx.maps.tiled.TiledMapTileLayer$Cell -> com.badlogic.gdx.e.b.i:
    com.badlogic.gdx.maps.tiled.TiledMapTile tile -> a
    boolean flipHorizontally -> b
    boolean flipVertically -> c
    int rotation -> d
    com.badlogic.gdx.maps.tiled.TiledMapTile getTile() -> a
    void setTile(com.badlogic.gdx.maps.tiled.TiledMapTile) -> a
    boolean getFlipHorizontally() -> b
    void setFlipHorizontally(boolean) -> a
    boolean getFlipVertically() -> c
    void setFlipVertically(boolean) -> b
    int getRotation() -> d
    void setRotation(int) -> a
com.badlogic.gdx.maps.tiled.TiledMapTileSet -> com.badlogic.gdx.e.b.j:
    java.lang.String name -> a
    com.badlogic.gdx.utils.IntMap tiles -> b
    com.badlogic.gdx.maps.MapProperties properties -> c
    void setName(java.lang.String) -> a
    com.badlogic.gdx.maps.MapProperties getProperties() -> a
    com.badlogic.gdx.maps.tiled.TiledMapTile getTile(int) -> a
    java.util.Iterator iterator() -> iterator
    void putTile(int,com.badlogic.gdx.maps.tiled.TiledMapTile) -> a
com.badlogic.gdx.maps.tiled.TiledMapTileSets -> com.badlogic.gdx.e.b.k:
    com.badlogic.gdx.utils.Array tilesets -> a
    void addTileSet(com.badlogic.gdx.maps.tiled.TiledMapTileSet) -> a
    com.badlogic.gdx.maps.tiled.TiledMapTile getTile(int) -> a
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.maps.tiled.TmxMapLoader -> com.badlogic.gdx.e.b.l:
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.tiled.TmxMapLoader$Parameters) -> a
    com.badlogic.gdx.maps.tiled.TiledMap loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.tiled.TmxMapLoader$Parameters) -> b
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.tiled.TmxMapLoader$Parameters) -> a
    com.badlogic.gdx.maps.tiled.TiledMap loadTilemap(com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver) -> a
    com.badlogic.gdx.utils.Array loadTilesets(com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle) -> a
    com.badlogic.gdx.utils.Array loadImages(com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle) -> b
    void loadTileSet(com.badlogic.gdx.maps.tiled.TiledMap,com.badlogic.gdx.utils.XmlReader$Element,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.maps.ImageResolver) -> b
    java.lang.Object loadSync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> b
    void loadAsync(com.badlogic.gdx.assets.AssetManager,java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
    com.badlogic.gdx.utils.Array getDependencies(java.lang.String,com.badlogic.gdx.files.FileHandle,com.badlogic.gdx.assets.AssetLoaderParameters) -> a
com.badlogic.gdx.maps.tiled.TmxMapLoader$Parameters -> com.badlogic.gdx.e.b.m:
com.badlogic.gdx.maps.tiled.renderers.BatchTiledMapRenderer -> com.badlogic.gdx.e.b.a.a:
    com.badlogic.gdx.maps.tiled.TiledMap map -> a
    float unitScale -> b
    com.badlogic.gdx.graphics.g2d.Batch batch -> c
    com.badlogic.gdx.math.Rectangle viewBounds -> d
    com.badlogic.gdx.math.Rectangle imageBounds -> e
    boolean ownsBatch -> f
    float[] vertices -> g
    void setView(com.badlogic.gdx.graphics.OrthographicCamera) -> a
    void render() -> a
    void renderObjects(com.badlogic.gdx.maps.MapLayer) -> a
    void renderObject(com.badlogic.gdx.maps.MapObject) -> a
    void renderImageLayer(com.badlogic.gdx.maps.tiled.TiledMapImageLayer) -> a
    void beginRender() -> b
    void endRender() -> d
    void dispose() -> c
com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer -> com.badlogic.gdx.e.b.a.b:
    void renderTileLayer(com.badlogic.gdx.maps.tiled.TiledMapTileLayer) -> a
com.badlogic.gdx.maps.tiled.tiles.AnimatedTiledMapTile -> com.badlogic.gdx.e.b.b.a:
    long lastTiledMapRenderTime -> a
    int id -> b
    com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode blendMode -> c
    com.badlogic.gdx.maps.MapProperties properties -> d
    com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile[] frameTiles -> e
    int[] animationIntervals -> f
    int frameCount -> g
    int loopDuration -> h
    long initialTimeOffset -> i
    int getId() -> a
    void setId(int) -> a
    int getCurrentFrameIndex() -> f
    com.badlogic.gdx.maps.tiled.TiledMapTile getCurrentFrame() -> g
    com.badlogic.gdx.graphics.g2d.TextureRegion getTextureRegion() -> b
    float getOffsetX() -> c
    void setOffsetX(float) -> a
    float getOffsetY() -> d
    void setOffsetY(float) -> b
    com.badlogic.gdx.maps.MapProperties getProperties() -> e
    void updateAnimationBaseTime() -> h
com.badlogic.gdx.maps.tiled.tiles.StaticTiledMapTile -> com.badlogic.gdx.e.b.b.b:
    int id -> a
    com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode blendMode -> b
    com.badlogic.gdx.maps.MapProperties properties -> c
    com.badlogic.gdx.graphics.g2d.TextureRegion textureRegion -> d
    float offsetX -> e
    float offsetY -> f
    int getId() -> a
    void setId(int) -> a
    com.badlogic.gdx.maps.MapProperties getProperties() -> e
    com.badlogic.gdx.graphics.g2d.TextureRegion getTextureRegion() -> b
    float getOffsetX() -> c
    void setOffsetX(float) -> a
    float getOffsetY() -> d
    void setOffsetY(float) -> b
com.badlogic.gdx.math.Affine2 -> com.badlogic.gdx.math.a:
    float m00 -> a
    float m01 -> b
    float m02 -> c
    float m10 -> d
    float m11 -> e
    float m12 -> f
    com.badlogic.gdx.math.Affine2 setToTrnRotScl(float,float,float,float,float) -> a
    com.badlogic.gdx.math.Affine2 preMul(com.badlogic.gdx.math.Affine2) -> a
    com.badlogic.gdx.math.Affine2 translate(float,float) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.math.EarClippingTriangulator -> com.badlogic.gdx.math.b:
    com.badlogic.gdx.utils.ShortArray indicesArray -> a
    short[] indices -> b
    float[] vertices -> c
    int vertexCount -> d
    com.badlogic.gdx.utils.IntArray vertexTypes -> e
    com.badlogic.gdx.utils.ShortArray triangles -> f
    com.badlogic.gdx.utils.ShortArray computeTriangles(float[]) -> a
    com.badlogic.gdx.utils.ShortArray computeTriangles(float[],int,int) -> a
    void triangulate() -> a
    int classifyVertex(int) -> a
    int findEarTip() -> b
    boolean isEarTip(int) -> b
    void cutEarTip(int) -> c
    int previousIndex(int) -> d
    int nextIndex(int) -> e
    boolean areVerticesClockwise(float[],int,int) -> b
    int computeSpannedAreaSign(float,float,float,float,float,float) -> a
com.badlogic.gdx.math.Ellipse -> com.badlogic.gdx.math.c:
    float x -> a
    float y -> b
    float width -> c
    float height -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.badlogic.gdx.math.Frustum -> com.badlogic.gdx.math.d:
    com.badlogic.gdx.math.Vector3[] clipSpacePlanePoints -> a
    float[] clipSpacePlanePointsArray -> b
    com.badlogic.gdx.math.Vector3 tmpV -> f
    com.badlogic.gdx.math.Plane[] planes -> c
    com.badlogic.gdx.math.Vector3[] planePoints -> d
    float[] planePointsArray -> e
    void update(com.badlogic.gdx.math.Matrix4) -> a
com.badlogic.gdx.math.Interpolation -> com.badlogic.gdx.math.e:
    com.badlogic.gdx.math.Interpolation linear -> a
    com.badlogic.gdx.math.Interpolation fade -> b
    com.badlogic.gdx.math.Interpolation$Pow pow2 -> c
    com.badlogic.gdx.math.Interpolation$PowIn pow2In -> d
    com.badlogic.gdx.math.Interpolation$PowOut pow2Out -> e
    com.badlogic.gdx.math.Interpolation$Pow pow3 -> f
    com.badlogic.gdx.math.Interpolation$PowIn pow3In -> g
    com.badlogic.gdx.math.Interpolation$PowOut pow3Out -> h
    com.badlogic.gdx.math.Interpolation$Pow pow4 -> i
    com.badlogic.gdx.math.Interpolation$PowIn pow4In -> j
    com.badlogic.gdx.math.Interpolation$PowOut pow4Out -> k
    com.badlogic.gdx.math.Interpolation$Pow pow5 -> l
    com.badlogic.gdx.math.Interpolation$PowIn pow5In -> m
    com.badlogic.gdx.math.Interpolation$PowOut pow5Out -> n
    com.badlogic.gdx.math.Interpolation sine -> o
    com.badlogic.gdx.math.Interpolation sineIn -> p
    com.badlogic.gdx.math.Interpolation sineOut -> q
    com.badlogic.gdx.math.Interpolation$Exp exp10 -> r
    com.badlogic.gdx.math.Interpolation$ExpIn exp10In -> s
    com.badlogic.gdx.math.Interpolation$ExpOut exp10Out -> t
    com.badlogic.gdx.math.Interpolation$Exp exp5 -> u
    com.badlogic.gdx.math.Interpolation$ExpIn exp5In -> v
    com.badlogic.gdx.math.Interpolation$ExpOut exp5Out -> w
    com.badlogic.gdx.math.Interpolation circle -> x
    com.badlogic.gdx.math.Interpolation circleIn -> y
    com.badlogic.gdx.math.Interpolation circleOut -> z
    com.badlogic.gdx.math.Interpolation$Elastic elastic -> A
    com.badlogic.gdx.math.Interpolation$ElasticIn elasticIn -> B
    com.badlogic.gdx.math.Interpolation$ElasticOut elasticOut -> C
    com.badlogic.gdx.math.Interpolation$Swing swing -> D
    com.badlogic.gdx.math.Interpolation$SwingIn swingIn -> E
    com.badlogic.gdx.math.Interpolation$SwingOut swingOut -> F
    com.badlogic.gdx.math.Interpolation$Bounce bounce -> G
    com.badlogic.gdx.math.Interpolation$BounceIn bounceIn -> H
    com.badlogic.gdx.math.Interpolation$BounceOut bounceOut -> I
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$1 -> com.badlogic.gdx.math.f:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$2 -> com.badlogic.gdx.math.g:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$3 -> com.badlogic.gdx.math.h:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$4 -> com.badlogic.gdx.math.i:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$5 -> com.badlogic.gdx.math.j:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$6 -> com.badlogic.gdx.math.k:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$7 -> com.badlogic.gdx.math.l:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$8 -> com.badlogic.gdx.math.m:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$Bounce -> com.badlogic.gdx.math.n:
    float out(float) -> b
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$BounceIn -> com.badlogic.gdx.math.o:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$BounceOut -> com.badlogic.gdx.math.p:
    float[] widths -> J
    float[] heights -> K
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$Elastic -> com.badlogic.gdx.math.q:
    float value -> J
    float power -> K
    float scale -> L
    float bounces -> M
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$ElasticIn -> com.badlogic.gdx.math.r:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$ElasticOut -> com.badlogic.gdx.math.s:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$Exp -> com.badlogic.gdx.math.t:
    float value -> J
    float power -> K
    float min -> L
    float scale -> M
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$ExpIn -> com.badlogic.gdx.math.u:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$ExpOut -> com.badlogic.gdx.math.v:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$Pow -> com.badlogic.gdx.math.w:
    int power -> J
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$PowIn -> com.badlogic.gdx.math.x:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$PowOut -> com.badlogic.gdx.math.y:
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$Swing -> com.badlogic.gdx.math.z:
    float scale -> J
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$SwingIn -> com.badlogic.gdx.math.aa:
    float scale -> J
    float apply(float) -> a
com.badlogic.gdx.math.Interpolation$SwingOut -> com.badlogic.gdx.math.ab:
    float scale -> J
    float apply(float) -> a
com.badlogic.gdx.math.MathUtils -> com.badlogic.gdx.math.ac:
    int ATAN2_DIM -> a
    float INV_ATAN2_DIM_MINUS_1 -> c
    java.util.Random random -> b
    float sin(float) -> a
    float cos(float) -> b
    float sinDeg(float) -> c
    float cosDeg(float) -> d
    int random(int) -> a
    int nextPowerOfTwo(int) -> b
    boolean isPowerOfTwo(int) -> c
    float clamp(float,float,float) -> a
    boolean isEqual(float,float) -> a
com.badlogic.gdx.math.MathUtils$Sin -> com.badlogic.gdx.math.ad:
    float[] table -> a
com.badlogic.gdx.math.Matrix3 -> com.badlogic.gdx.math.ae:
    float[] val -> a
    float[] tmp -> b
    com.badlogic.gdx.math.Matrix3 idt() -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.math.Matrix4 -> com.badlogic.gdx.math.Matrix4:
    float[] tmp -> l
    float[] val -> a
    com.badlogic.gdx.math.Quaternion quat -> b
    com.badlogic.gdx.math.Quaternion quat2 -> c
    com.badlogic.gdx.math.Vector3 l_vez -> d
    com.badlogic.gdx.math.Vector3 l_vex -> e
    com.badlogic.gdx.math.Vector3 l_vey -> f
    com.badlogic.gdx.math.Vector3 tmpVec -> g
    com.badlogic.gdx.math.Matrix4 tmpMat -> h
    com.badlogic.gdx.math.Vector3 right -> i
    com.badlogic.gdx.math.Vector3 tmpForward -> j
    com.badlogic.gdx.math.Vector3 tmpUp -> k
    com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Matrix4) -> a
    com.badlogic.gdx.math.Matrix4 set(float[]) -> a
    com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Quaternion,com.badlogic.gdx.math.Vector3) -> a
    com.badlogic.gdx.math.Matrix4 set(float,float,float,float,float,float,float,float,float,float) -> a
    com.badlogic.gdx.math.Matrix4 mul(com.badlogic.gdx.math.Matrix4) -> b
    com.badlogic.gdx.math.Matrix4 idt() -> a
    com.badlogic.gdx.math.Matrix4 inv() -> b
    com.badlogic.gdx.math.Matrix4 setToOrtho2D(float,float,float,float) -> a
    com.badlogic.gdx.math.Matrix4 setToOrtho(float,float,float,float,float,float) -> a
    com.badlogic.gdx.math.Matrix4 setToTranslation(float,float,float) -> a
    com.badlogic.gdx.math.Matrix4 setToLookAt(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> a
    com.badlogic.gdx.math.Matrix4 setToLookAt(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> a
    java.lang.String toString() -> toString
    com.badlogic.gdx.math.Matrix4 set(com.badlogic.gdx.math.Affine2) -> a
    void mul(float[],float[]) -> mul
    void prj(float[],float[],int,int,int) -> prj
    boolean inv(float[]) -> inv
    com.badlogic.gdx.math.Matrix4 translate(float,float,float) -> b
    com.badlogic.gdx.math.Matrix4 rotate(com.badlogic.gdx.math.Quaternion) -> a
    com.badlogic.gdx.math.Matrix4 scale(float,float,float) -> c
com.badlogic.gdx.math.Plane -> com.badlogic.gdx.math.af:
    com.badlogic.gdx.math.Vector3 normal -> a
    float d -> b
    void set(com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3,com.badlogic.gdx.math.Vector3) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.math.Polygon -> com.badlogic.gdx.math.ag:
    float[] localVertices -> a
    float x -> b
    float y -> c
    float scaleX -> d
    float scaleY -> e
    boolean dirty -> f
    void setPosition(float,float) -> a
com.badlogic.gdx.math.Polyline -> com.badlogic.gdx.math.ah:
    float[] localVertices -> a
    float x -> b
    float y -> c
    float scaleX -> d
    float scaleY -> e
    boolean calculateScaledLength -> f
    boolean calculateLength -> g
    boolean dirty -> h
    void setPosition(float,float) -> a
com.badlogic.gdx.math.Quaternion -> com.badlogic.gdx.math.ai:
    com.badlogic.gdx.math.Quaternion tmp1 -> e
    com.badlogic.gdx.math.Quaternion tmp2 -> f
    float x -> a
    float y -> b
    float z -> c
    float w -> d
    com.badlogic.gdx.math.Quaternion set(float,float,float,float) -> a
    com.badlogic.gdx.math.Quaternion set(com.badlogic.gdx.math.Quaternion) -> a
    java.lang.String toString() -> toString
    void toMatrix(float[]) -> a
    com.badlogic.gdx.math.Quaternion idt() -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.math.RandomXS128 -> com.badlogic.gdx.math.aj:
    long seed0 -> a
    long seed1 -> b
    long nextLong() -> nextLong
    int next(int) -> next
    int nextInt() -> nextInt
    int nextInt(int) -> nextInt
    long nextLong(long) -> a
    double nextDouble() -> nextDouble
    float nextFloat() -> nextFloat
    boolean nextBoolean() -> nextBoolean
    void nextBytes(byte[]) -> nextBytes
    void setSeed(long) -> setSeed
    void setState(long,long) -> a
    long murmurHash3(long) -> b
com.badlogic.gdx.math.Rectangle -> com.badlogic.gdx.math.ak:
    com.badlogic.gdx.math.Rectangle tmp -> a
    com.badlogic.gdx.math.Rectangle tmp2 -> b
    float x -> c
    float y -> d
    float width -> e
    float height -> f
    com.badlogic.gdx.math.Rectangle set(float,float,float,float) -> a
    boolean contains(com.badlogic.gdx.math.Rectangle) -> a
    boolean overlaps(com.badlogic.gdx.math.Rectangle) -> b
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.math.Vector2 -> com.badlogic.gdx.math.al:
    com.badlogic.gdx.math.Vector2 X -> a
    com.badlogic.gdx.math.Vector2 Y -> b
    com.badlogic.gdx.math.Vector2 Zero -> c
    float x -> d
    float y -> e
    com.badlogic.gdx.math.Vector2 set(com.badlogic.gdx.math.Vector2) -> a
    com.badlogic.gdx.math.Vector2 set(float,float) -> a
    float dst(com.badlogic.gdx.math.Vector2) -> b
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.math.Vector3 -> com.badlogic.gdx.math.am:
    float x -> a
    float y -> b
    float z -> c
    com.badlogic.gdx.math.Vector3 X -> d
    com.badlogic.gdx.math.Vector3 Y -> e
    com.badlogic.gdx.math.Vector3 Z -> f
    com.badlogic.gdx.math.Vector3 Zero -> g
    com.badlogic.gdx.math.Matrix4 tmpMat -> h
    com.badlogic.gdx.math.Vector3 set(float,float,float) -> a
    com.badlogic.gdx.math.Vector3 set(com.badlogic.gdx.math.Vector3) -> a
    com.badlogic.gdx.math.Vector3 add(com.badlogic.gdx.math.Vector3) -> b
    com.badlogic.gdx.math.Vector3 add(float,float,float) -> b
    com.badlogic.gdx.math.Vector3 sub(com.badlogic.gdx.math.Vector3) -> c
    com.badlogic.gdx.math.Vector3 sub(float,float,float) -> c
    com.badlogic.gdx.math.Vector3 scl(float) -> a
    float len2() -> a
    com.badlogic.gdx.math.Vector3 nor() -> b
    float dot(com.badlogic.gdx.math.Vector3) -> d
    com.badlogic.gdx.math.Vector3 crs(com.badlogic.gdx.math.Vector3) -> e
    com.badlogic.gdx.math.Vector3 crs(float,float,float) -> d
    com.badlogic.gdx.math.Vector3 mul(com.badlogic.gdx.math.Matrix4) -> a
    com.badlogic.gdx.math.Vector3 prj(com.badlogic.gdx.math.Matrix4) -> b
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.math.WindowedMean -> com.badlogic.gdx.math.an:
    float[] values -> a
    int added_values -> b
    int last_value -> c
    float mean -> d
    boolean dirty -> e
    boolean hasEnoughData() -> a
    void clear() -> b
    void addValue(float) -> a
    float getMean() -> c
com.badlogic.gdx.math.collision.Ray -> com.badlogic.gdx.math.a.a:
    com.badlogic.gdx.math.Vector3 origin -> a
    com.badlogic.gdx.math.Vector3 direction -> b
    com.badlogic.gdx.math.Vector3 tmp -> c
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.badlogic.gdx.net.NetJavaImpl -> com.badlogic.gdx.f.a:
    java.util.concurrent.ExecutorService executorService -> c
    com.badlogic.gdx.utils.ObjectMap connections -> a
    com.badlogic.gdx.utils.ObjectMap listeners -> b
com.badlogic.gdx.scenes.scene2d.Action -> com.badlogic.gdx.g.a.a:
    com.badlogic.gdx.scenes.scene2d.Actor actor -> a
    com.badlogic.gdx.scenes.scene2d.Actor target -> b
    com.badlogic.gdx.utils.Pool pool -> c
    boolean act(float) -> a
    void restart() -> b
    void setActor(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    void setTarget(com.badlogic.gdx.scenes.scene2d.Actor) -> b
    void reset() -> a
    com.badlogic.gdx.utils.Pool getPool() -> c
    void setPool(com.badlogic.gdx.utils.Pool) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.Actor -> com.badlogic.gdx.g.a.b:
    com.badlogic.gdx.scenes.scene2d.Stage stage -> l
    com.badlogic.gdx.scenes.scene2d.Group parent -> a
    com.badlogic.gdx.utils.DelayedRemovalArray listeners -> m
    com.badlogic.gdx.utils.DelayedRemovalArray captureListeners -> n
    com.badlogic.gdx.utils.Array actions -> o
    java.lang.String name -> p
    com.badlogic.gdx.scenes.scene2d.Touchable touchable -> q
    boolean visible -> r
    boolean debug -> s
    float x -> b
    float y -> c
    float width -> d
    float height -> e
    float originX -> f
    float originY -> g
    float scaleX -> h
    float scaleY -> i
    float rotation -> j
    com.badlogic.gdx.graphics.Color color -> k
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    void act(float) -> a
    boolean fire(com.badlogic.gdx.scenes.scene2d.Event) -> a
    boolean notify(com.badlogic.gdx.scenes.scene2d.Event,boolean) -> a
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    boolean remove() -> a
    boolean addListener(com.badlogic.gdx.scenes.scene2d.EventListener) -> a
    void addAction(com.badlogic.gdx.scenes.scene2d.Action) -> a
    void clearActions() -> b
    void clearListeners() -> c
    void clear() -> d
    com.badlogic.gdx.scenes.scene2d.Stage getStage() -> e
    void setStage(com.badlogic.gdx.scenes.scene2d.Stage) -> a
    boolean isDescendantOf(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    com.badlogic.gdx.scenes.scene2d.Group getParent() -> f
    void setParent(com.badlogic.gdx.scenes.scene2d.Group) -> a
    com.badlogic.gdx.scenes.scene2d.Touchable getTouchable() -> g
    void setTouchable(com.badlogic.gdx.scenes.scene2d.Touchable) -> a
    boolean isVisible() -> h
    void setVisible(boolean) -> a
    float getX() -> i
    float getX(int) -> a
    float getY() -> j
    float getY(int) -> b
    void setPosition(float,float) -> a
    void setPosition(float,float,int) -> a
    float getWidth() -> k
    void setWidth(float) -> b
    float getHeight() -> l
    void setHeight(float) -> c
    void positionChanged() -> m
    void sizeChanged() -> n
    void setSize(float,float) -> b
    void setBounds(float,float,float,float) -> a
    float getOriginX() -> o
    float getOriginY() -> p
    void setOrigin(int) -> c
    float getScaleX() -> q
    float getScaleY() -> r
    float getRotation() -> s
    void setRotation(float) -> d
    com.badlogic.gdx.graphics.Color getColor() -> t
    boolean clipBegin(float,float,float,float) -> b
    void clipEnd() -> u
    com.badlogic.gdx.math.Vector2 stageToLocalCoordinates(com.badlogic.gdx.math.Vector2) -> a
    com.badlogic.gdx.math.Vector2 parentToLocalCoordinates(com.badlogic.gdx.math.Vector2) -> b
    void drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> a
    void drawDebugBounds(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> b
    void setDebug(boolean) -> b
    boolean getDebug() -> v
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.Event -> com.badlogic.gdx.g.a.c:
    com.badlogic.gdx.scenes.scene2d.Stage stage -> a
    com.badlogic.gdx.scenes.scene2d.Actor targetActor -> b
    com.badlogic.gdx.scenes.scene2d.Actor listenerActor -> c
    boolean capture -> d
    boolean bubbles -> e
    boolean handled -> f
    boolean stopped -> g
    boolean cancelled -> h
    void handle() -> b
    void reset() -> a
    com.badlogic.gdx.scenes.scene2d.Actor getTarget() -> c
    void setTarget(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    com.badlogic.gdx.scenes.scene2d.Actor getListenerActor() -> d
    void setListenerActor(com.badlogic.gdx.scenes.scene2d.Actor) -> b
    boolean getBubbles() -> e
    boolean isHandled() -> f
    boolean isStopped() -> g
    boolean isCancelled() -> h
    void setCapture(boolean) -> a
    void setStage(com.badlogic.gdx.scenes.scene2d.Stage) -> a
    com.badlogic.gdx.scenes.scene2d.Stage getStage() -> i
com.badlogic.gdx.scenes.scene2d.EventListener -> com.badlogic.gdx.g.a.d:
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> a
com.badlogic.gdx.scenes.scene2d.Group -> com.badlogic.gdx.g.a.e:
    com.badlogic.gdx.math.Vector2 tmp -> n
    com.badlogic.gdx.utils.SnapshotArray children -> l
    com.badlogic.gdx.math.Affine2 worldTransform -> o
    com.badlogic.gdx.math.Matrix4 computedTransform -> p
    com.badlogic.gdx.math.Matrix4 oldTransform -> q
    boolean transform -> m
    com.badlogic.gdx.math.Rectangle cullingArea -> r
    void act(float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    void drawChildren(com.badlogic.gdx.graphics.g2d.Batch,float) -> b
    void drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> a
    void drawDebugChildren(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> c
    com.badlogic.gdx.math.Matrix4 computeTransform() -> w
    void applyTransform(com.badlogic.gdx.graphics.g2d.Batch,com.badlogic.gdx.math.Matrix4) -> a
    void resetTransform(com.badlogic.gdx.graphics.g2d.Batch) -> a
    void applyTransform(com.badlogic.gdx.graphics.glutils.ShapeRenderer,com.badlogic.gdx.math.Matrix4) -> a
    void resetTransform(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> d
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    void childrenChanged() -> x
    void addActor(com.badlogic.gdx.scenes.scene2d.Actor) -> b
    boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean) -> a
    void clearChildren() -> y
    void clear() -> d
    void setStage(com.badlogic.gdx.scenes.scene2d.Stage) -> a
    com.badlogic.gdx.utils.SnapshotArray getChildren() -> z
    void setTransform(boolean) -> c
    boolean isTransform() -> A
    void setDebug(boolean,boolean) -> a
    com.badlogic.gdx.scenes.scene2d.Group debugAll() -> B
    java.lang.String toString() -> toString
    void toString(java.lang.StringBuilder,int) -> a
com.badlogic.gdx.scenes.scene2d.InputEvent -> com.badlogic.gdx.g.a.f:
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type type -> a
    float stageX -> b
    float stageY -> c
    int pointer -> d
    int button -> e
    int keyCode -> f
    int scrollAmount -> g
    char character -> h
    com.badlogic.gdx.scenes.scene2d.Actor relatedActor -> i
    void reset() -> a
    void setStageX(float) -> a
    void setStageY(float) -> b
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type getType() -> j
    void setType(com.badlogic.gdx.scenes.scene2d.InputEvent$Type) -> a
    int getPointer() -> k
    void setPointer(int) -> a
    int getButton() -> l
    void setButton(int) -> b
    int getKeyCode() -> m
    void setKeyCode(int) -> c
    char getCharacter() -> n
    void setCharacter(char) -> a
    int getScrollAmount() -> o
    void setScrollAmount(int) -> d
    com.badlogic.gdx.scenes.scene2d.Actor getRelatedActor() -> p
    void setRelatedActor(com.badlogic.gdx.scenes.scene2d.Actor) -> c
    com.badlogic.gdx.math.Vector2 toCoordinates(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.math.Vector2) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.InputEvent$Type -> com.badlogic.gdx.g.a.g:
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type touchDown -> a
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type touchUp -> b
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type touchDragged -> c
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type mouseMoved -> d
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type enter -> e
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type exit -> f
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type scrolled -> g
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type keyDown -> h
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type keyUp -> i
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type keyTyped -> j
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type[] $VALUES -> k
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type[] values() -> values
    com.badlogic.gdx.scenes.scene2d.InputEvent$Type valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.scenes.scene2d.InputListener -> com.badlogic.gdx.g.a.h:
    com.badlogic.gdx.math.Vector2 tmpCoords -> a
    boolean handle(com.badlogic.gdx.scenes.scene2d.Event) -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
    void touchDragged(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> a
    boolean mouseMoved(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float) -> a
    void enter(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor) -> a
    void exit(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,com.badlogic.gdx.scenes.scene2d.Actor) -> b
    boolean scrolled(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int) -> b
    boolean keyDown(com.badlogic.gdx.scenes.scene2d.InputEvent,int) -> a
    boolean keyUp(com.badlogic.gdx.scenes.scene2d.InputEvent,int) -> b
    boolean keyTyped(com.badlogic.gdx.scenes.scene2d.InputEvent,char) -> a
com.badlogic.gdx.scenes.scene2d.InputListener$1 -> com.badlogic.gdx.g.a.i:
    int[] $SwitchMap$com$badlogic$gdx$scenes$scene2d$InputEvent$Type -> a
com.badlogic.gdx.scenes.scene2d.Stage -> com.badlogic.gdx.g.a.j:
    boolean debug -> a
    com.badlogic.gdx.utils.viewport.Viewport viewport -> b
    com.badlogic.gdx.graphics.g2d.Batch batch -> c
    boolean ownsBatch -> d
    com.badlogic.gdx.scenes.scene2d.Group root -> e
    com.badlogic.gdx.math.Vector2 tempCoords -> f
    com.badlogic.gdx.scenes.scene2d.Actor[] pointerOverActors -> g
    boolean[] pointerTouched -> h
    int[] pointerScreenX -> i
    int[] pointerScreenY -> j
    int mouseScreenX -> k
    int mouseScreenY -> l
    com.badlogic.gdx.scenes.scene2d.Actor mouseOverActor -> m
    com.badlogic.gdx.scenes.scene2d.Actor keyboardFocus -> n
    com.badlogic.gdx.scenes.scene2d.Actor scrollFocus -> o
    com.badlogic.gdx.utils.SnapshotArray touchFocuses -> p
    boolean actionsRequestRendering -> q
    com.badlogic.gdx.graphics.glutils.ShapeRenderer debugShapes -> r
    boolean debugAll -> s
    boolean debugUnderMouse -> t
    boolean debugParentUnderMouse -> u
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug debugTableUnderMouse -> v
    com.badlogic.gdx.graphics.Color debugColor -> w
    void draw() -> a
    void drawDebug() -> l
    void disableDebug(com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor) -> a
    void act() -> b
    void act(float) -> a
    com.badlogic.gdx.scenes.scene2d.Actor fireEnterAndExit(com.badlogic.gdx.scenes.scene2d.Actor,int,int,int) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchDragged(int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean mouseMoved(int,int) -> a
    boolean scrolled(int) -> c
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    void addTouchFocus(com.badlogic.gdx.scenes.scene2d.EventListener,com.badlogic.gdx.scenes.scene2d.Actor,com.badlogic.gdx.scenes.scene2d.Actor,int,int) -> a
    void cancelTouchFocus(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    void cancelTouchFocus() -> d
    void cancelTouchFocusExcept(com.badlogic.gdx.scenes.scene2d.EventListener,com.badlogic.gdx.scenes.scene2d.Actor) -> a
    void addActor(com.badlogic.gdx.scenes.scene2d.Actor) -> b
    void clear() -> e
    void unfocusAll() -> f
    void unfocus(com.badlogic.gdx.scenes.scene2d.Actor) -> c
    float getWidth() -> g
    float getHeight() -> h
    com.badlogic.gdx.scenes.scene2d.Group getRoot() -> i
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    com.badlogic.gdx.math.Vector2 screenToStageCoordinates(com.badlogic.gdx.math.Vector2) -> a
    void calculateScissors(com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle) -> a
    boolean getActionsRequestRendering() -> j
    com.badlogic.gdx.graphics.Color getDebugColor() -> k
    void dispose() -> c
com.badlogic.gdx.scenes.scene2d.Stage$TouchFocus -> com.badlogic.gdx.g.a.k:
    com.badlogic.gdx.scenes.scene2d.EventListener listener -> a
    com.badlogic.gdx.scenes.scene2d.Actor listenerActor -> b
    com.badlogic.gdx.scenes.scene2d.Actor target -> c
    int pointer -> d
    int button -> e
    void reset() -> a
com.badlogic.gdx.scenes.scene2d.Touchable -> com.badlogic.gdx.g.a.l:
    com.badlogic.gdx.scenes.scene2d.Touchable enabled -> a
    com.badlogic.gdx.scenes.scene2d.Touchable disabled -> b
    com.badlogic.gdx.scenes.scene2d.Touchable childrenOnly -> c
    com.badlogic.gdx.scenes.scene2d.Touchable[] $VALUES -> d
    com.badlogic.gdx.scenes.scene2d.Touchable[] values() -> values
    com.badlogic.gdx.scenes.scene2d.Touchable valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.scenes.scene2d.actions.Actions -> com.badlogic.gdx.g.a.a.a:
    com.badlogic.gdx.scenes.scene2d.Action action(java.lang.Class) -> a
    com.badlogic.gdx.scenes.scene2d.actions.MoveToAction moveTo(float,float,float) -> a
    com.badlogic.gdx.scenes.scene2d.actions.MoveToAction moveTo(float,float,float,com.badlogic.gdx.math.Interpolation) -> a
    com.badlogic.gdx.scenes.scene2d.actions.SizeToAction sizeTo(float,float,float) -> b
    com.badlogic.gdx.scenes.scene2d.actions.SizeToAction sizeTo(float,float,float,com.badlogic.gdx.math.Interpolation) -> b
    com.badlogic.gdx.scenes.scene2d.actions.RotateToAction rotateTo(float,float) -> a
    com.badlogic.gdx.scenes.scene2d.actions.RotateToAction rotateTo(float,float,com.badlogic.gdx.math.Interpolation) -> a
    com.badlogic.gdx.scenes.scene2d.actions.AlphaAction alpha(float,float) -> b
    com.badlogic.gdx.scenes.scene2d.actions.AlphaAction alpha(float,float,com.badlogic.gdx.math.Interpolation) -> b
    com.badlogic.gdx.scenes.scene2d.actions.DelayAction delay(float) -> a
    com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action) -> a
    com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action) -> a
    com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action) -> a
    com.badlogic.gdx.scenes.scene2d.actions.SequenceAction sequence(com.badlogic.gdx.scenes.scene2d.Action[]) -> a
    com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel(com.badlogic.gdx.scenes.scene2d.Action) -> a
    com.badlogic.gdx.scenes.scene2d.actions.ParallelAction parallel(com.badlogic.gdx.scenes.scene2d.Action,com.badlogic.gdx.scenes.scene2d.Action) -> b
    com.badlogic.gdx.scenes.scene2d.actions.RepeatAction repeat(int,com.badlogic.gdx.scenes.scene2d.Action) -> a
    com.badlogic.gdx.scenes.scene2d.actions.RepeatAction forever(com.badlogic.gdx.scenes.scene2d.Action) -> b
    com.badlogic.gdx.scenes.scene2d.actions.RunnableAction run(java.lang.Runnable) -> a
com.badlogic.gdx.scenes.scene2d.actions.AlphaAction -> com.badlogic.gdx.g.a.a.b:
    float start -> c
    float end -> d
    com.badlogic.gdx.graphics.Color color -> e
    void begin() -> d
    void update(float) -> b
    void reset() -> a
    void setAlpha(float) -> c
com.badlogic.gdx.scenes.scene2d.actions.DelayAction -> com.badlogic.gdx.g.a.a.c:
    float duration -> d
    float time -> e
    boolean delegate(float) -> b
    void restart() -> b
    void setDuration(float) -> c
com.badlogic.gdx.scenes.scene2d.actions.DelegateAction -> com.badlogic.gdx.g.a.a.d:
    com.badlogic.gdx.scenes.scene2d.Action action -> c
    void setAction(com.badlogic.gdx.scenes.scene2d.Action) -> a
    boolean delegate(float) -> b
    boolean act(float) -> a
    void restart() -> b
    void reset() -> a
    void setActor(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    void setTarget(com.badlogic.gdx.scenes.scene2d.Actor) -> b
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.actions.MoveToAction -> com.badlogic.gdx.g.a.a.e:
    float startX -> c
    float startY -> d
    float endX -> e
    float endY -> f
    int alignment -> g
    void begin() -> d
    void update(float) -> b
    void reset() -> a
    void setPosition(float,float) -> a
com.badlogic.gdx.scenes.scene2d.actions.ParallelAction -> com.badlogic.gdx.g.a.a.f:
    com.badlogic.gdx.utils.Array actions -> c
    boolean complete -> d
    boolean act(float) -> a
    void restart() -> b
    void reset() -> a
    void addAction(com.badlogic.gdx.scenes.scene2d.Action) -> a
    void setActor(com.badlogic.gdx.scenes.scene2d.Actor) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.actions.RepeatAction -> com.badlogic.gdx.g.a.a.g:
    int repeatCount -> d
    int executedCount -> e
    boolean finished -> f
    boolean delegate(float) -> b
    void restart() -> b
    void setCount(int) -> a
com.badlogic.gdx.scenes.scene2d.actions.RotateToAction -> com.badlogic.gdx.g.a.a.h:
    float start -> c
    float end -> d
    void begin() -> d
    void update(float) -> b
    void setRotation(float) -> c
com.badlogic.gdx.scenes.scene2d.actions.RunnableAction -> com.badlogic.gdx.g.a.a.i:
    java.lang.Runnable runnable -> c
    boolean ran -> d
    boolean act(float) -> a
    void run() -> d
    void restart() -> b
    void reset() -> a
    void setRunnable(java.lang.Runnable) -> a
com.badlogic.gdx.scenes.scene2d.actions.SequenceAction -> com.badlogic.gdx.g.a.a.j:
    int index -> d
    boolean act(float) -> a
    void restart() -> b
com.badlogic.gdx.scenes.scene2d.actions.SizeToAction -> com.badlogic.gdx.g.a.a.k:
    float startWidth -> c
    float startHeight -> d
    float endWidth -> e
    float endHeight -> f
    void begin() -> d
    void update(float) -> b
    void setSize(float,float) -> a
com.badlogic.gdx.scenes.scene2d.actions.TemporalAction -> com.badlogic.gdx.g.a.a.l:
    float duration -> c
    float time -> d
    com.badlogic.gdx.math.Interpolation interpolation -> e
    boolean reverse -> f
    boolean began -> g
    boolean complete -> h
    boolean act(float) -> a
    void begin() -> d
    void end() -> e
    void update(float) -> b
    void restart() -> b
    void reset() -> a
    void setDuration(float) -> d
    void setInterpolation(com.badlogic.gdx.math.Interpolation) -> a
    void setReverse(boolean) -> a
com.badlogic.gdx.scenes.scene2d.ui.Cell -> com.badlogic.gdx.g.a.b.a:
    java.lang.Float zerof -> J
    java.lang.Float onef -> K
    java.lang.Integer zeroi -> L
    java.lang.Integer onei -> M
    java.lang.Integer centeri -> N
    java.lang.Integer topi -> O
    java.lang.Integer bottomi -> P
    java.lang.Integer lefti -> Q
    java.lang.Integer righti -> R
    com.badlogic.gdx.scenes.scene2d.ui.Value minWidth -> a
    com.badlogic.gdx.scenes.scene2d.ui.Value minHeight -> b
    com.badlogic.gdx.scenes.scene2d.ui.Value prefWidth -> c
    com.badlogic.gdx.scenes.scene2d.ui.Value prefHeight -> d
    com.badlogic.gdx.scenes.scene2d.ui.Value maxWidth -> e
    com.badlogic.gdx.scenes.scene2d.ui.Value maxHeight -> f
    com.badlogic.gdx.scenes.scene2d.ui.Value spaceTop -> g
    com.badlogic.gdx.scenes.scene2d.ui.Value spaceLeft -> h
    com.badlogic.gdx.scenes.scene2d.ui.Value spaceBottom -> i
    com.badlogic.gdx.scenes.scene2d.ui.Value spaceRight -> j
    com.badlogic.gdx.scenes.scene2d.ui.Value padTop -> k
    com.badlogic.gdx.scenes.scene2d.ui.Value padLeft -> l
    com.badlogic.gdx.scenes.scene2d.ui.Value padBottom -> m
    com.badlogic.gdx.scenes.scene2d.ui.Value padRight -> n
    java.lang.Float fillX -> o
    java.lang.Float fillY -> p
    java.lang.Integer align -> q
    java.lang.Integer expandX -> r
    java.lang.Integer expandY -> s
    java.lang.Integer colspan -> t
    java.lang.Boolean uniformX -> u
    java.lang.Boolean uniformY -> v
    com.badlogic.gdx.scenes.scene2d.Actor actor -> w
    float actorX -> x
    float actorY -> y
    float actorWidth -> z
    float actorHeight -> A
    com.badlogic.gdx.scenes.scene2d.ui.Table table -> S
    boolean endRow -> B
    int column -> C
    int row -> D
    int cellAboveIndex -> E
    float computedPadTop -> F
    float computedPadLeft -> G
    float computedPadBottom -> H
    float computedPadRight -> I
    void setLayout(com.badlogic.gdx.scenes.scene2d.ui.Table) -> a
    void setActorBounds(float,float,float,float) -> a
    void setActorY(float) -> a
    void reset() -> a
com.badlogic.gdx.scenes.scene2d.ui.Skin -> com.badlogic.gdx.g.a.b.b:
    com.badlogic.gdx.utils.ObjectMap resources -> a
    com.badlogic.gdx.graphics.g2d.TextureAtlas atlas -> b
    void load(com.badlogic.gdx.files.FileHandle) -> a
    void addRegions(com.badlogic.gdx.graphics.g2d.TextureAtlas) -> a
    void add(java.lang.String,java.lang.Object) -> a
    void add(java.lang.String,java.lang.Object,java.lang.Class) -> a
    java.lang.Object get(java.lang.String,java.lang.Class) -> a
    java.lang.Object optional(java.lang.String,java.lang.Class) -> b
    com.badlogic.gdx.graphics.g2d.TextureRegion getRegion(java.lang.String) -> a
    com.badlogic.gdx.graphics.g2d.NinePatch getPatch(java.lang.String) -> b
    com.badlogic.gdx.graphics.g2d.Sprite getSprite(java.lang.String) -> c
    com.badlogic.gdx.scenes.scene2d.utils.Drawable getDrawable(java.lang.String) -> d
    com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(java.lang.String,com.badlogic.gdx.graphics.Color) -> a
    com.badlogic.gdx.scenes.scene2d.utils.Drawable newDrawable(com.badlogic.gdx.scenes.scene2d.utils.Drawable,com.badlogic.gdx.graphics.Color) -> a
    void dispose() -> c
    com.badlogic.gdx.utils.Json getJsonLoader(com.badlogic.gdx.files.FileHandle) -> b
com.badlogic.gdx.scenes.scene2d.ui.Skin$1 -> com.badlogic.gdx.g.a.b.c:
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> a
    java.lang.Object readValue(java.lang.Class,java.lang.Class,com.badlogic.gdx.utils.JsonValue) -> a
com.badlogic.gdx.scenes.scene2d.ui.Skin$2 -> com.badlogic.gdx.g.a.b.d:
    com.badlogic.gdx.scenes.scene2d.ui.Skin val$skin -> a
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> b
    com.badlogic.gdx.scenes.scene2d.ui.Skin read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> a
    void readNamedObjects(com.badlogic.gdx.utils.Json,java.lang.Class,com.badlogic.gdx.utils.JsonValue) -> a
    java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> b
com.badlogic.gdx.scenes.scene2d.ui.Skin$3 -> com.badlogic.gdx.g.a.b.e:
    com.badlogic.gdx.files.FileHandle val$skinFile -> a
    com.badlogic.gdx.scenes.scene2d.ui.Skin val$skin -> b
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> c
    com.badlogic.gdx.graphics.g2d.BitmapFont read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> a
    java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> b
com.badlogic.gdx.scenes.scene2d.ui.Skin$4 -> com.badlogic.gdx.g.a.b.f:
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> a
    com.badlogic.gdx.graphics.Color read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> a
    java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> b
com.badlogic.gdx.scenes.scene2d.ui.Skin$5 -> com.badlogic.gdx.g.a.b.g:
    com.badlogic.gdx.scenes.scene2d.ui.Skin this$0 -> a
    java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> b
com.badlogic.gdx.scenes.scene2d.ui.Skin$TintedDrawable -> com.badlogic.gdx.g.a.b.h:
com.badlogic.gdx.scenes.scene2d.ui.Table -> com.badlogic.gdx.g.a.b.i:
    com.badlogic.gdx.graphics.Color debugTableColor -> n
    com.badlogic.gdx.graphics.Color debugCellColor -> o
    com.badlogic.gdx.graphics.Color debugActorColor -> p
    com.badlogic.gdx.utils.Pool cellPool -> q
    float[] columnWeightedWidth -> E
    float[] rowWeightedHeight -> F
    int columns -> G
    int rows -> H
    com.badlogic.gdx.utils.Array cells -> I
    com.badlogic.gdx.scenes.scene2d.ui.Cell cellDefaults -> J
    com.badlogic.gdx.utils.Array columnDefaults -> K
    com.badlogic.gdx.scenes.scene2d.ui.Cell rowDefaults -> L
    boolean sizeInvalid -> M
    float[] columnMinWidth -> N
    float[] rowMinHeight -> O
    float[] columnPrefWidth -> P
    float[] rowPrefHeight -> Q
    float tableMinWidth -> R
    float tableMinHeight -> S
    float tablePrefWidth -> T
    float tablePrefHeight -> U
    float[] columnWidth -> V
    float[] rowHeight -> W
    float[] expandWidth -> X
    float[] expandHeight -> Y
    com.badlogic.gdx.scenes.scene2d.ui.Value padTop -> r
    com.badlogic.gdx.scenes.scene2d.ui.Value padLeft -> s
    com.badlogic.gdx.scenes.scene2d.ui.Value padBottom -> t
    com.badlogic.gdx.scenes.scene2d.ui.Value padRight -> u
    int align -> v
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug debug -> w
    com.badlogic.gdx.utils.Array debugRects -> x
    com.badlogic.gdx.scenes.scene2d.utils.Drawable background -> y
    boolean clip -> Z
    com.badlogic.gdx.scenes.scene2d.ui.Skin skin -> aa
    boolean round -> z
    com.badlogic.gdx.scenes.scene2d.ui.Value backgroundTop -> A
    com.badlogic.gdx.scenes.scene2d.ui.Value backgroundLeft -> B
    com.badlogic.gdx.scenes.scene2d.ui.Value backgroundBottom -> C
    com.badlogic.gdx.scenes.scene2d.ui.Value backgroundRight -> D
    com.badlogic.gdx.scenes.scene2d.ui.Cell obtainCell() -> N
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    void drawBackground(com.badlogic.gdx.graphics.g2d.Batch,float,float,float) -> a
    com.badlogic.gdx.scenes.scene2d.Actor hit(float,float,boolean) -> a
    void invalidate() -> C
    boolean removeActor(com.badlogic.gdx.scenes.scene2d.Actor,boolean) -> a
    void clearChildren() -> y
    void endRow() -> O
    com.badlogic.gdx.scenes.scene2d.ui.Cell getCell(com.badlogic.gdx.scenes.scene2d.Actor) -> c
    float getPrefWidth() -> D
    float getPrefHeight() -> E
    float getMinWidth() -> F
    float getMinHeight() -> G
    void setDebug(boolean) -> b
    com.badlogic.gdx.scenes.scene2d.ui.Table debugAll() -> H
    com.badlogic.gdx.scenes.scene2d.ui.Table debug(com.badlogic.gdx.scenes.scene2d.ui.Table$Debug) -> a
    float[] ensureSize(float[],int) -> a
    void layout() -> I
    void computeSize() -> P
    void layout(float,float,float,float) -> c
    void clearDebugRects() -> Q
    void addDebugRect(float,float,float,float,com.badlogic.gdx.graphics.Color) -> a
    void drawDebug(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> a
    void drawDebugBounds(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> b
    void drawDebugRects(com.badlogic.gdx.graphics.glutils.ShapeRenderer) -> e
    com.badlogic.gdx.scenes.scene2d.Group debugAll() -> B
com.badlogic.gdx.scenes.scene2d.ui.Table$1 -> com.badlogic.gdx.g.a.b.j:
    com.badlogic.gdx.scenes.scene2d.ui.Cell newObject() -> a
    java.lang.Object newObject() -> b
com.badlogic.gdx.scenes.scene2d.ui.Table$2 -> com.badlogic.gdx.g.a.b.k:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Table$3 -> com.badlogic.gdx.g.a.b.l:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Table$4 -> com.badlogic.gdx.g.a.b.m:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Table$5 -> com.badlogic.gdx.g.a.b.n:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Table$Debug -> com.badlogic.gdx.g.a.b.o:
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug none -> a
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug all -> b
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug table -> c
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug cell -> d
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug actor -> e
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug[] $VALUES -> f
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug[] values() -> values
    com.badlogic.gdx.scenes.scene2d.ui.Table$Debug valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.scenes.scene2d.ui.Table$DebugRect -> com.badlogic.gdx.g.a.b.p:
    com.badlogic.gdx.utils.Pool pool -> g
    com.badlogic.gdx.graphics.Color color -> h
com.badlogic.gdx.scenes.scene2d.ui.Value -> com.badlogic.gdx.g.a.b.q:
    com.badlogic.gdx.scenes.scene2d.ui.Value$Fixed zero -> a
    com.badlogic.gdx.scenes.scene2d.ui.Value minWidth -> b
    com.badlogic.gdx.scenes.scene2d.ui.Value minHeight -> c
    com.badlogic.gdx.scenes.scene2d.ui.Value prefWidth -> d
    com.badlogic.gdx.scenes.scene2d.ui.Value prefHeight -> e
    com.badlogic.gdx.scenes.scene2d.ui.Value maxWidth -> f
    com.badlogic.gdx.scenes.scene2d.ui.Value maxHeight -> g
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$1 -> com.badlogic.gdx.g.a.b.r:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$2 -> com.badlogic.gdx.g.a.b.s:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$3 -> com.badlogic.gdx.g.a.b.t:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$4 -> com.badlogic.gdx.g.a.b.u:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$5 -> com.badlogic.gdx.g.a.b.v:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$6 -> com.badlogic.gdx.g.a.b.w:
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.Value$Fixed -> com.badlogic.gdx.g.a.b.x:
    float value -> h
    float get(com.badlogic.gdx.scenes.scene2d.Actor) -> a
com.badlogic.gdx.scenes.scene2d.ui.WidgetGroup -> com.badlogic.gdx.g.a.b.y:
    boolean needsLayout -> n
    boolean fillParent -> o
    boolean layoutEnabled -> p
    float getMinWidth() -> F
    float getMinHeight() -> G
    float getPrefWidth() -> D
    float getPrefHeight() -> E
    float getMaxWidth() -> J
    float getMaxHeight() -> K
    void validate() -> L
    void invalidate() -> C
    void invalidateHierarchy() -> M
    void childrenChanged() -> x
    void sizeChanged() -> n
    void layout() -> I
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
com.badlogic.gdx.scenes.scene2d.utils.BaseDrawable -> com.badlogic.gdx.g.a.c.a:
    java.lang.String name -> a
    float leftWidth -> b
    float rightWidth -> c
    float topHeight -> d
    float bottomHeight -> e
    float minWidth -> f
    float minHeight -> g
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> a
    float getLeftWidth() -> a
    void setLeftWidth(float) -> a
    float getRightWidth() -> b
    void setRightWidth(float) -> b
    float getTopHeight() -> c
    void setTopHeight(float) -> c
    float getBottomHeight() -> d
    void setBottomHeight(float) -> d
    float getMinWidth() -> e
    void setMinWidth(float) -> e
    float getMinHeight() -> f
    void setMinHeight(float) -> f
    java.lang.String getName() -> g
    void setName(java.lang.String) -> a
    java.lang.String toString() -> toString
com.badlogic.gdx.scenes.scene2d.utils.Drawable -> com.badlogic.gdx.g.a.c.b:
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> a
    float getLeftWidth() -> a
    float getRightWidth() -> b
    float getTopHeight() -> c
    float getBottomHeight() -> d
    float getMinWidth() -> e
    float getMinHeight() -> f
com.badlogic.gdx.scenes.scene2d.utils.Layout -> com.badlogic.gdx.g.a.c.c:
    void invalidateHierarchy() -> M
    void validate() -> L
    float getMinWidth() -> F
    float getMinHeight() -> G
    float getPrefWidth() -> D
    float getPrefHeight() -> E
    float getMaxWidth() -> J
    float getMaxHeight() -> K
com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable -> com.badlogic.gdx.g.a.c.d:
    com.badlogic.gdx.graphics.g2d.NinePatch patch -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> a
    void setPatch(com.badlogic.gdx.graphics.g2d.NinePatch) -> a
    com.badlogic.gdx.graphics.g2d.NinePatch getPatch() -> h
    com.badlogic.gdx.scenes.scene2d.utils.NinePatchDrawable tint(com.badlogic.gdx.graphics.Color) -> a
com.badlogic.gdx.scenes.scene2d.utils.ScissorStack -> com.badlogic.gdx.g.a.c.e:
    com.badlogic.gdx.utils.Array scissors -> c
    com.badlogic.gdx.math.Vector3 tmp -> a
    com.badlogic.gdx.math.Rectangle viewport -> b
    boolean pushScissors(com.badlogic.gdx.math.Rectangle) -> a
    com.badlogic.gdx.math.Rectangle popScissors() -> a
    void fix(com.badlogic.gdx.math.Rectangle) -> b
    void calculateScissors(com.badlogic.gdx.graphics.Camera,float,float,float,float,com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle) -> a
com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable -> com.badlogic.gdx.g.a.c.f:
    com.badlogic.gdx.graphics.g2d.Sprite sprite -> a
    com.badlogic.gdx.graphics.Color tmpColor -> b
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float,float,float,float,float,float) -> a
    void setSprite(com.badlogic.gdx.graphics.g2d.Sprite) -> a
    com.badlogic.gdx.graphics.g2d.Sprite getSprite() -> h
    com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable tint(com.badlogic.gdx.graphics.Color) -> a
com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable -> com.badlogic.gdx.g.a.c.g:
    com.badlogic.gdx.graphics.g2d.TextureRegion region -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> a
    void setRegion(com.badlogic.gdx.graphics.g2d.TextureRegion) -> a
    com.badlogic.gdx.graphics.g2d.TextureRegion getRegion() -> h
    com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable tint(com.badlogic.gdx.graphics.Color) -> a
com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable -> com.badlogic.gdx.g.a.c.h:
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float,float,float,float) -> a
com.badlogic.gdx.scenes.scene2d.utils.TransformDrawable -> com.badlogic.gdx.g.a.c.i:
com.badlogic.gdx.utils.Array -> com.badlogic.gdx.utils.a:
    java.lang.Object[] items -> a
    int size -> b
    boolean ordered -> c
    com.badlogic.gdx.utils.Array$ArrayIterable iterable -> d
    void add(java.lang.Object) -> a
    void addAll(com.badlogic.gdx.utils.Array) -> a
    void addAll(com.badlogic.gdx.utils.Array,int,int) -> a
    void addAll(java.lang.Object[],int,int) -> a
    java.lang.Object get(int) -> a
    void set(int,java.lang.Object) -> a
    void insert(int,java.lang.Object) -> b
    boolean contains(java.lang.Object,boolean) -> a
    int indexOf(java.lang.Object,boolean) -> b
    boolean removeValue(java.lang.Object,boolean) -> c
    java.lang.Object removeIndex(int) -> b
    java.lang.Object pop() -> a
    java.lang.Object peek() -> b
    java.lang.Object first() -> c
    void clear() -> d
    java.lang.Object[] ensureCapacity(int) -> c
    java.lang.Object[] resize(int) -> d
    void sort(java.util.Comparator) -> a
    java.util.Iterator iterator() -> iterator
    void truncate(int) -> e
    java.lang.Object[] toArray(java.lang.Class) -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    com.badlogic.gdx.utils.Array with(java.lang.Object[]) -> a
com.badlogic.gdx.utils.Array$ArrayIterable -> com.badlogic.gdx.utils.b:
    com.badlogic.gdx.utils.Array array -> a
    boolean allowRemove -> b
    com.badlogic.gdx.utils.Array$ArrayIterator iterator1 -> c
    com.badlogic.gdx.utils.Array$ArrayIterator iterator2 -> d
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.Array$ArrayIterator -> com.badlogic.gdx.utils.c:
    com.badlogic.gdx.utils.Array array -> c
    boolean allowRemove -> d
    int index -> a
    boolean valid -> b
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.ArrayMap -> com.badlogic.gdx.utils.d:
    java.lang.Object[] keys -> a
    java.lang.Object[] values -> b
    int size -> c
    boolean ordered -> d
    com.badlogic.gdx.utils.ArrayMap$Entries entries1 -> e
    com.badlogic.gdx.utils.ArrayMap$Entries entries2 -> f
    int put(java.lang.Object,java.lang.Object) -> a
    int indexOfKey(java.lang.Object) -> a
    void removeIndex(int) -> a
    void clear() -> a
    void resize(int) -> b
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
    com.badlogic.gdx.utils.ArrayMap$Entries entries() -> b
com.badlogic.gdx.utils.ArrayMap$Entries -> com.badlogic.gdx.utils.e:
    com.badlogic.gdx.utils.ArrayMap map -> d
    com.badlogic.gdx.utils.ObjectMap$Entry entry -> a
    int index -> b
    boolean valid -> c
    boolean hasNext() -> hasNext
    java.util.Iterator iterator() -> iterator
    com.badlogic.gdx.utils.ObjectMap$Entry next() -> a
    void remove() -> remove
    java.lang.Object next() -> next
com.badlogic.gdx.utils.Base64Coder -> com.badlogic.gdx.utils.f:
    char[] map1 -> a
    byte[] map2 -> b
    byte[] decode(java.lang.String) -> a
    byte[] decode(char[]) -> a
    byte[] decode(char[],int,int) -> a
com.badlogic.gdx.utils.BaseJsonReader -> com.badlogic.gdx.utils.g:
    com.badlogic.gdx.utils.JsonValue parse(com.badlogic.gdx.files.FileHandle) -> a
com.badlogic.gdx.utils.BufferUtils -> com.badlogic.gdx.utils.BufferUtils:
    com.badlogic.gdx.utils.Array unsafeBuffers -> a
    int allocatedUnsafe -> b
    void copy(float[],java.nio.Buffer,int,int) -> a
    java.nio.FloatBuffer newFloatBuffer(int) -> a
    java.nio.ByteBuffer newByteBuffer(int) -> b
    java.nio.IntBuffer newIntBuffer(int) -> c
    void disposeUnsafeByteBuffer(java.nio.ByteBuffer) -> a
    java.nio.ByteBuffer newUnsafeByteBuffer(int) -> d
    void freeMemory(java.nio.ByteBuffer) -> freeMemory
    java.nio.ByteBuffer newDisposableByteBuffer(int) -> newDisposableByteBuffer
    void copyJni(float[],java.nio.Buffer,int,int) -> copyJni
com.badlogic.gdx.utils.DelayedRemovalArray -> com.badlogic.gdx.utils.h:
    int iterating -> d
    com.badlogic.gdx.utils.IntArray remove -> e
    void begin() -> e
    void end() -> f
    void remove(int) -> f
    boolean removeValue(java.lang.Object,boolean) -> c
    java.lang.Object removeIndex(int) -> b
    void set(int,java.lang.Object) -> a
    void insert(int,java.lang.Object) -> b
    java.lang.Object pop() -> a
    void clear() -> d
    void sort(java.util.Comparator) -> a
    void truncate(int) -> e
com.badlogic.gdx.utils.Disposable -> com.badlogic.gdx.utils.i:
    void dispose() -> c
com.badlogic.gdx.utils.FloatArray -> com.badlogic.gdx.utils.j:
    float[] items -> a
    int size -> b
    boolean ordered -> c
    void add(float) -> a
    void addAll(com.badlogic.gdx.utils.FloatArray) -> a
    void addAll(com.badlogic.gdx.utils.FloatArray,int,int) -> a
    void addAll(float[],int,int) -> a
    float get(int) -> a
    void set(int,float) -> a
    float peek() -> a
    void clear() -> b
    float[] resize(int) -> b
    void truncate(int) -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.GdxNativesLoader -> com.badlogic.gdx.utils.k:
    boolean disableNativesLoading -> a
    boolean nativesLoaded -> b
    void load() -> a
com.badlogic.gdx.utils.GdxRuntimeException -> com.badlogic.gdx.utils.l:
com.badlogic.gdx.utils.I18NBundle -> com.badlogic.gdx.utils.m:
    java.util.Locale ROOT_LOCALE -> a
    boolean simpleFormatter -> b
    boolean exceptionOnMissingKey -> c
    com.badlogic.gdx.utils.I18NBundle parent -> d
    java.util.Locale locale -> e
    com.badlogic.gdx.utils.ObjectMap properties -> f
    com.badlogic.gdx.utils.TextFormatter formatter -> g
    com.badlogic.gdx.utils.I18NBundle createBundle(com.badlogic.gdx.files.FileHandle,java.util.Locale) -> a
    com.badlogic.gdx.utils.I18NBundle createBundle(com.badlogic.gdx.files.FileHandle,java.util.Locale,java.lang.String) -> a
    com.badlogic.gdx.utils.I18NBundle createBundleImpl(com.badlogic.gdx.files.FileHandle,java.util.Locale,java.lang.String) -> b
    java.util.List getCandidateLocales(java.util.Locale) -> a
    java.util.Locale getFallbackLocale(java.util.Locale) -> b
    com.badlogic.gdx.utils.I18NBundle loadBundleChain(com.badlogic.gdx.files.FileHandle,java.lang.String,java.util.List,int,com.badlogic.gdx.utils.I18NBundle) -> a
    com.badlogic.gdx.utils.I18NBundle loadBundle(com.badlogic.gdx.files.FileHandle,java.lang.String,java.util.Locale) -> a
    boolean checkFileExistence(com.badlogic.gdx.files.FileHandle) -> a
    void load(java.io.Reader) -> a
    com.badlogic.gdx.files.FileHandle toFileHandle(com.badlogic.gdx.files.FileHandle,java.util.Locale) -> b
    java.util.Locale getLocale() -> a
    void setLocale(java.util.Locale) -> c
com.badlogic.gdx.utils.IntArray -> com.badlogic.gdx.utils.n:
    int[] items -> a
    int size -> b
    boolean ordered -> c
    void add(int) -> a
    void addAll(int[]) -> a
    void addAll(int[],int,int) -> a
    int get(int) -> b
    void insert(int,int) -> a
    int removeIndex(int) -> c
    int pop() -> a
    void clear() -> b
    int[] ensureCapacity(int) -> d
    int[] resize(int) -> e
    int[] toArray() -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.IntMap -> com.badlogic.gdx.utils.o:
    int size -> a
    int[] keyTable -> b
    java.lang.Object[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    java.lang.Object zeroValue -> f
    boolean hasZeroValue -> g
    float loadFactor -> h
    int hashShift -> i
    int mask -> j
    int threshold -> k
    int stashCapacity -> l
    int pushIterations -> m
    com.badlogic.gdx.utils.IntMap$Entries entries1 -> n
    com.badlogic.gdx.utils.IntMap$Entries entries2 -> o
    com.badlogic.gdx.utils.IntMap$Values values1 -> p
    com.badlogic.gdx.utils.IntMap$Values values2 -> q
    java.lang.Object put(int,java.lang.Object) -> a
    void putResize(int,java.lang.Object) -> b
    void push(int,java.lang.Object,int,int,int,int,int,int) -> a
    void putStash(int,java.lang.Object) -> c
    java.lang.Object get(int) -> a
    java.lang.Object getStash(int,java.lang.Object) -> d
    void removeStashIndex(int) -> b
    void resize(int) -> c
    int hash2(int) -> d
    int hash3(int) -> e
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
    com.badlogic.gdx.utils.IntMap$Entries entries() -> a
    com.badlogic.gdx.utils.IntMap$Values values() -> b
com.badlogic.gdx.utils.IntMap$Entries -> com.badlogic.gdx.utils.p:
    com.badlogic.gdx.utils.IntMap$Entry entry -> f
    com.badlogic.gdx.utils.IntMap$Entry next() -> a
    boolean hasNext() -> hasNext
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
    void reset() -> b
    java.lang.Object next() -> next
com.badlogic.gdx.utils.IntMap$Entry -> com.badlogic.gdx.utils.q:
    int key -> a
    java.lang.Object value -> b
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.IntMap$MapIterator -> com.badlogic.gdx.utils.r:
    boolean hasNext -> a
    com.badlogic.gdx.utils.IntMap map -> b
    int nextIndex -> c
    int currentIndex -> d
    boolean valid -> e
    void reset() -> b
    void findNextIndex() -> c
    void remove() -> remove
com.badlogic.gdx.utils.IntMap$Values -> com.badlogic.gdx.utils.s:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    java.util.Iterator iterator() -> iterator
    void remove() -> remove
    void reset() -> b
com.badlogic.gdx.utils.Json -> com.badlogic.gdx.utils.t:
    java.lang.String typeName -> a
    boolean usePrototypes -> b
    com.badlogic.gdx.utils.JsonWriter$OutputType outputType -> c
    boolean ignoreUnknownFields -> d
    boolean enumNames -> e
    com.badlogic.gdx.utils.Json$Serializer defaultSerializer -> f
    com.badlogic.gdx.utils.ObjectMap typeToFields -> g
    com.badlogic.gdx.utils.ObjectMap tagToClass -> h
    com.badlogic.gdx.utils.ObjectMap classToTag -> i
    com.badlogic.gdx.utils.ObjectMap classToSerializer -> j
    com.badlogic.gdx.utils.ObjectMap classToDefaultValues -> k
    java.lang.Object[] equals1 -> l
    java.lang.Object[] equals2 -> m
    java.lang.Class getClass(java.lang.String) -> a
    void setTypeName(java.lang.String) -> b
    void setSerializer(java.lang.Class,com.badlogic.gdx.utils.Json$Serializer) -> a
    void setUsePrototypes(boolean) -> a
    com.badlogic.gdx.utils.OrderedMap getFields(java.lang.Class) -> b
    java.lang.Object fromJson(java.lang.Class,com.badlogic.gdx.files.FileHandle) -> a
    void readFields(java.lang.Object,com.badlogic.gdx.utils.JsonValue) -> a
    java.lang.Object readValue(java.lang.String,java.lang.Class,com.badlogic.gdx.utils.JsonValue) -> a
    java.lang.Object readValue(java.lang.String,java.lang.Class,java.lang.Object,com.badlogic.gdx.utils.JsonValue) -> a
    java.lang.Object readValue(java.lang.String,java.lang.Class,java.lang.Class,com.badlogic.gdx.utils.JsonValue) -> a
    java.lang.Object readValue(java.lang.Class,com.badlogic.gdx.utils.JsonValue) -> a
    java.lang.Object readValue(java.lang.Class,java.lang.Class,com.badlogic.gdx.utils.JsonValue) -> a
    java.lang.String convertToString(java.lang.Enum) -> a
    java.lang.Object newInstance(java.lang.Class) -> a
com.badlogic.gdx.utils.Json$FieldMetadata -> com.badlogic.gdx.utils.u:
    com.badlogic.gdx.utils.reflect.Field field -> a
    java.lang.Class elementType -> b
com.badlogic.gdx.utils.Json$ReadOnlySerializer -> com.badlogic.gdx.utils.v:
com.badlogic.gdx.utils.Json$Serializable -> com.badlogic.gdx.utils.w:
    void read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue) -> a
com.badlogic.gdx.utils.Json$Serializer -> com.badlogic.gdx.utils.x:
    java.lang.Object read(com.badlogic.gdx.utils.Json,com.badlogic.gdx.utils.JsonValue,java.lang.Class) -> b
com.badlogic.gdx.utils.JsonReader -> com.badlogic.gdx.utils.y:
    byte[] _json_actions -> a
    short[] _json_key_offsets -> b
    char[] _json_trans_keys -> c
    byte[] _json_single_lengths -> d
    byte[] _json_range_lengths -> e
    short[] _json_index_offsets -> f
    byte[] _json_indicies -> g
    byte[] _json_trans_targs -> h
    byte[] _json_trans_actions -> i
    byte[] _json_eof_actions -> j
    com.badlogic.gdx.utils.Array elements -> k
    com.badlogic.gdx.utils.Array lastChild -> l
    com.badlogic.gdx.utils.JsonValue root -> m
    com.badlogic.gdx.utils.JsonValue current -> n
    com.badlogic.gdx.utils.JsonValue parse(java.io.Reader) -> a
    com.badlogic.gdx.utils.JsonValue parse(com.badlogic.gdx.files.FileHandle) -> a
    com.badlogic.gdx.utils.JsonValue parse(char[],int,int) -> a
    byte[] init__json_actions_0() -> b
    short[] init__json_key_offsets_0() -> c
    char[] init__json_trans_keys_0() -> d
    byte[] init__json_single_lengths_0() -> e
    byte[] init__json_range_lengths_0() -> f
    short[] init__json_index_offsets_0() -> g
    byte[] init__json_indicies_0() -> h
    byte[] init__json_trans_targs_0() -> i
    byte[] init__json_trans_actions_0() -> j
    byte[] init__json_eof_actions_0() -> k
    void addChild(java.lang.String,com.badlogic.gdx.utils.JsonValue) -> a
    void startObject(java.lang.String) -> a
    void startArray(java.lang.String) -> b
    void pop() -> a
    void string(java.lang.String,java.lang.String) -> a
    void number(java.lang.String,double,java.lang.String) -> a
    void number(java.lang.String,long,java.lang.String) -> a
    void bool(java.lang.String,boolean) -> a
    java.lang.String unescape(java.lang.String) -> c
com.badlogic.gdx.utils.JsonValue -> com.badlogic.gdx.utils.z:
    com.badlogic.gdx.utils.JsonValue$ValueType type -> f
    java.lang.String stringValue -> g
    double doubleValue -> h
    long longValue -> i
    java.lang.String name -> a
    com.badlogic.gdx.utils.JsonValue child -> b
    com.badlogic.gdx.utils.JsonValue next -> c
    com.badlogic.gdx.utils.JsonValue prev -> d
    int size -> e
    com.badlogic.gdx.utils.JsonValue get(int) -> a
    com.badlogic.gdx.utils.JsonValue get(java.lang.String) -> a
    com.badlogic.gdx.utils.JsonValue require(java.lang.String) -> b
    com.badlogic.gdx.utils.JsonValue remove(java.lang.String) -> c
    java.lang.String asString() -> a
    float asFloat() -> b
    double asDouble() -> c
    long asLong() -> d
    int asInt() -> e
    boolean asBoolean() -> f
    byte asByte() -> g
    short asShort() -> h
    float[] asFloatArray() -> i
    short[] asShortArray() -> j
    java.lang.String getString(java.lang.String,java.lang.String) -> a
    float getFloat(java.lang.String,float) -> a
    java.lang.String getString(java.lang.String) -> d
    float getFloat(int) -> b
    short getShort(int) -> c
    boolean isArray() -> k
    boolean isObject() -> l
    boolean isString() -> m
    boolean isNumber() -> n
    boolean isDouble() -> o
    boolean isLong() -> p
    boolean isBoolean() -> q
    boolean isNull() -> r
    boolean isValue() -> s
    java.lang.String name() -> t
    void setName(java.lang.String) -> e
    void set(java.lang.String) -> f
    void set(double,java.lang.String) -> a
    void set(long,java.lang.String) -> a
    void set(boolean) -> a
    java.lang.String toString() -> toString
    java.lang.String prettyPrint(com.badlogic.gdx.utils.JsonWriter$OutputType,int) -> a
    java.lang.String prettyPrint(com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings) -> a
    void prettyPrint(com.badlogic.gdx.utils.JsonValue,com.badlogic.gdx.utils.StringBuilder,int,com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings) -> a
    boolean isFlat(com.badlogic.gdx.utils.JsonValue) -> a
    boolean isNumeric(com.badlogic.gdx.utils.JsonValue) -> b
    void indent(int,com.badlogic.gdx.utils.StringBuilder) -> a
    com.badlogic.gdx.utils.JsonValue$JsonIterator iterator() -> u
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.JsonValue$1 -> com.badlogic.gdx.utils.aa:
    int[] $SwitchMap$com$badlogic$gdx$utils$JsonValue$ValueType -> a
com.badlogic.gdx.utils.JsonValue$JsonIterator -> com.badlogic.gdx.utils.ab:
    com.badlogic.gdx.utils.JsonValue entry -> a
    com.badlogic.gdx.utils.JsonValue current -> b
    com.badlogic.gdx.utils.JsonValue this$0 -> c
    boolean hasNext() -> hasNext
    com.badlogic.gdx.utils.JsonValue next() -> a
    void remove() -> remove
    java.util.Iterator iterator() -> iterator
    java.lang.Object next() -> next
com.badlogic.gdx.utils.JsonValue$PrettyPrintSettings -> com.badlogic.gdx.utils.ac:
    com.badlogic.gdx.utils.JsonWriter$OutputType outputType -> a
    int singleLineColumns -> b
    boolean wrapNumericArrays -> c
com.badlogic.gdx.utils.JsonValue$ValueType -> com.badlogic.gdx.utils.ad:
    com.badlogic.gdx.utils.JsonValue$ValueType object -> a
    com.badlogic.gdx.utils.JsonValue$ValueType array -> b
    com.badlogic.gdx.utils.JsonValue$ValueType stringValue -> c
    com.badlogic.gdx.utils.JsonValue$ValueType doubleValue -> d
    com.badlogic.gdx.utils.JsonValue$ValueType longValue -> e
    com.badlogic.gdx.utils.JsonValue$ValueType booleanValue -> f
    com.badlogic.gdx.utils.JsonValue$ValueType nullValue -> g
    com.badlogic.gdx.utils.JsonValue$ValueType[] $VALUES -> h
    com.badlogic.gdx.utils.JsonValue$ValueType[] values() -> values
    com.badlogic.gdx.utils.JsonValue$ValueType valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.utils.JsonWriter -> com.badlogic.gdx.utils.ae:
    java.io.Writer writer -> a
    com.badlogic.gdx.utils.Array stack -> b
    com.badlogic.gdx.utils.JsonWriter$JsonObject current -> c
    boolean named -> d
    com.badlogic.gdx.utils.JsonWriter pop() -> a
    void write(char[],int,int) -> write
    void flush() -> flush
    void close() -> close
com.badlogic.gdx.utils.JsonWriter$1 -> com.badlogic.gdx.utils.af:
    int[] $SwitchMap$com$badlogic$gdx$utils$JsonWriter$OutputType -> a
com.badlogic.gdx.utils.JsonWriter$JsonObject -> com.badlogic.gdx.utils.ag:
    boolean array -> a
    com.badlogic.gdx.utils.JsonWriter this$0 -> b
    void close() -> a
com.badlogic.gdx.utils.JsonWriter$OutputType -> com.badlogic.gdx.utils.ah:
    com.badlogic.gdx.utils.JsonWriter$OutputType json -> a
    com.badlogic.gdx.utils.JsonWriter$OutputType javascript -> b
    com.badlogic.gdx.utils.JsonWriter$OutputType minimal -> c
    java.util.regex.Pattern javascriptPattern -> d
    java.util.regex.Pattern minimalNamePattern -> e
    java.util.regex.Pattern minimalValuePattern -> f
    com.badlogic.gdx.utils.JsonWriter$OutputType[] $VALUES -> g
    com.badlogic.gdx.utils.JsonWriter$OutputType[] values() -> values
    com.badlogic.gdx.utils.JsonWriter$OutputType valueOf(java.lang.String) -> valueOf
    java.lang.String quoteValue(java.lang.Object) -> a
    java.lang.String quoteName(java.lang.String) -> a
com.badlogic.gdx.utils.Logger -> com.badlogic.gdx.utils.ai:
    java.lang.String tag -> a
    int level -> b
    void debug(java.lang.String) -> a
    void info(java.lang.String) -> b
    void error(java.lang.String,java.lang.Throwable) -> a
    int getLevel() -> a
com.badlogic.gdx.utils.NumberUtils -> com.badlogic.gdx.utils.aj:
    int floatToIntBits(float) -> a
    int floatToRawIntBits(float) -> b
    int floatToIntColor(float) -> c
    float intToFloatColor(int) -> a
com.badlogic.gdx.utils.ObjectIntMap -> com.badlogic.gdx.utils.ak:
    int size -> a
    java.lang.Object[] keyTable -> b
    int[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    float loadFactor -> f
    int hashShift -> g
    int mask -> h
    int threshold -> i
    int stashCapacity -> j
    int pushIterations -> k
    com.badlogic.gdx.utils.ObjectIntMap$Entries entries1 -> l
    com.badlogic.gdx.utils.ObjectIntMap$Entries entries2 -> m
    void put(java.lang.Object,int) -> a
    void putResize(java.lang.Object,int) -> c
    void push(java.lang.Object,int,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object) -> a
    void putStash(java.lang.Object,int) -> d
    int get(java.lang.Object,int) -> b
    int getStash(java.lang.Object,int) -> e
    void removeStashIndex(int) -> a
    void clear() -> a
    void resize(int) -> b
    int hash2(int) -> c
    int hash3(int) -> d
    java.lang.String toString() -> toString
    com.badlogic.gdx.utils.ObjectIntMap$Entries iterator() -> b
    com.badlogic.gdx.utils.ObjectIntMap$Entries entries() -> c
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.ObjectIntMap$Entries -> com.badlogic.gdx.utils.al:
    com.badlogic.gdx.utils.ObjectIntMap$Entry entry -> f
    com.badlogic.gdx.utils.ObjectIntMap$Entry next() -> a
    boolean hasNext() -> hasNext
    com.badlogic.gdx.utils.ObjectIntMap$Entries iterator() -> b
    void remove() -> remove
    void reset() -> c
    java.util.Iterator iterator() -> iterator
    java.lang.Object next() -> next
com.badlogic.gdx.utils.ObjectIntMap$Entry -> com.badlogic.gdx.utils.am:
    java.lang.Object key -> a
    int value -> b
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.ObjectIntMap$MapIterator -> com.badlogic.gdx.utils.an:
    boolean hasNext -> a
    com.badlogic.gdx.utils.ObjectIntMap map -> b
    int nextIndex -> c
    int currentIndex -> d
    boolean valid -> e
    void reset() -> c
    void findNextIndex() -> d
    void remove() -> remove
com.badlogic.gdx.utils.ObjectMap -> com.badlogic.gdx.utils.ao:
    int size -> a
    java.lang.Object[] keyTable -> b
    java.lang.Object[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    float loadFactor -> f
    int hashShift -> g
    int mask -> h
    int threshold -> i
    int stashCapacity -> j
    int pushIterations -> k
    com.badlogic.gdx.utils.ObjectMap$Entries entries1 -> l
    com.badlogic.gdx.utils.ObjectMap$Entries entries2 -> m
    com.badlogic.gdx.utils.ObjectMap$Values values1 -> n
    com.badlogic.gdx.utils.ObjectMap$Values values2 -> o
    com.badlogic.gdx.utils.ObjectMap$Keys keys1 -> p
    com.badlogic.gdx.utils.ObjectMap$Keys keys2 -> q
    java.lang.Object put(java.lang.Object,java.lang.Object) -> a
    java.lang.Object put_internal(java.lang.Object,java.lang.Object) -> b
    void putResize(java.lang.Object,java.lang.Object) -> c
    void push(java.lang.Object,java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object) -> a
    void putStash(java.lang.Object,java.lang.Object) -> d
    java.lang.Object get(java.lang.Object) -> a
    java.lang.Object getStash(java.lang.Object) -> e
    java.lang.Object remove(java.lang.Object) -> b
    java.lang.Object removeStash(java.lang.Object) -> c
    void removeStashIndex(int) -> a
    void clear() -> a
    boolean containsKey(java.lang.Object) -> d
    boolean containsKeyStash(java.lang.Object) -> f
    void resize(int) -> b
    int hash2(int) -> c
    int hash3(int) -> d
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String,boolean) -> a
    com.badlogic.gdx.utils.ObjectMap$Entries iterator() -> b
    com.badlogic.gdx.utils.ObjectMap$Entries entries() -> c
    com.badlogic.gdx.utils.ObjectMap$Values values() -> d
    com.badlogic.gdx.utils.ObjectMap$Keys keys() -> e
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.ObjectMap$Entries -> com.badlogic.gdx.utils.ap:
    com.badlogic.gdx.utils.ObjectMap$Entry entry -> a
    com.badlogic.gdx.utils.ObjectMap$Entry next() -> a
    boolean hasNext() -> hasNext
    com.badlogic.gdx.utils.ObjectMap$Entries iterator() -> b
    void remove() -> remove
    void reset() -> c
    java.util.Iterator iterator() -> iterator
    java.lang.Object next() -> next
com.badlogic.gdx.utils.ObjectMap$Entry -> com.badlogic.gdx.utils.aq:
    java.lang.Object key -> a
    java.lang.Object value -> b
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.ObjectMap$Keys -> com.badlogic.gdx.utils.ar:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    com.badlogic.gdx.utils.ObjectMap$Keys iterator() -> a
    com.badlogic.gdx.utils.Array toArray() -> b
    com.badlogic.gdx.utils.Array toArray(com.badlogic.gdx.utils.Array) -> a
    void remove() -> remove
    void reset() -> c
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.ObjectMap$MapIterator -> com.badlogic.gdx.utils.as:
    boolean hasNext -> b
    com.badlogic.gdx.utils.ObjectMap map -> c
    int nextIndex -> d
    int currentIndex -> e
    boolean valid -> f
    void reset() -> c
    void findNextIndex() -> d
    void remove() -> remove
com.badlogic.gdx.utils.ObjectMap$Values -> com.badlogic.gdx.utils.at:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    com.badlogic.gdx.utils.ObjectMap$Values iterator() -> a
    void remove() -> remove
    void reset() -> c
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.ObjectSet -> com.badlogic.gdx.utils.au:
    int size -> a
    java.lang.Object[] keyTable -> b
    int capacity -> c
    int stashSize -> d
    float loadFactor -> e
    int hashShift -> f
    int mask -> g
    int threshold -> h
    int stashCapacity -> i
    int pushIterations -> j
    com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator1 -> k
    com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator2 -> l
    boolean add(java.lang.Object) -> a
    void addResize(java.lang.Object) -> c
    void push(java.lang.Object,int,java.lang.Object,int,java.lang.Object,int,java.lang.Object) -> a
    void addStash(java.lang.Object) -> d
    void removeStashIndex(int) -> a
    void clear() -> a
    boolean contains(java.lang.Object) -> b
    boolean containsKeyStash(java.lang.Object) -> e
    void resize(int) -> b
    int hash2(int) -> c
    int hash3(int) -> d
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String) -> a
    com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator() -> b
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator -> com.badlogic.gdx.utils.av:
    boolean hasNext -> a
    com.badlogic.gdx.utils.ObjectSet set -> b
    int nextIndex -> c
    int currentIndex -> d
    boolean valid -> e
    void reset() -> a
    void findNextIndex() -> b
    void remove() -> remove
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    com.badlogic.gdx.utils.ObjectSet$ObjectSetIterator iterator() -> c
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.OrderedMap -> com.badlogic.gdx.utils.aw:
    com.badlogic.gdx.utils.Array keys -> f
    com.badlogic.gdx.utils.ObjectMap$Entries entries1 -> g
    com.badlogic.gdx.utils.ObjectMap$Entries entries2 -> h
    com.badlogic.gdx.utils.ObjectMap$Values values1 -> i
    com.badlogic.gdx.utils.ObjectMap$Values values2 -> j
    com.badlogic.gdx.utils.ObjectMap$Keys keys1 -> k
    com.badlogic.gdx.utils.ObjectMap$Keys keys2 -> l
    java.lang.Object put(java.lang.Object,java.lang.Object) -> a
    java.lang.Object remove(java.lang.Object) -> b
    void clear() -> a
    com.badlogic.gdx.utils.ObjectMap$Entries iterator() -> b
    com.badlogic.gdx.utils.ObjectMap$Entries entries() -> c
    com.badlogic.gdx.utils.ObjectMap$Values values() -> d
    com.badlogic.gdx.utils.ObjectMap$Keys keys() -> e
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
com.badlogic.gdx.utils.OrderedMap$OrderedMapEntries -> com.badlogic.gdx.utils.ax:
    com.badlogic.gdx.utils.Array keys -> g
    void reset() -> c
    com.badlogic.gdx.utils.ObjectMap$Entry next() -> a
    void remove() -> remove
    java.lang.Object next() -> next
com.badlogic.gdx.utils.OrderedMap$OrderedMapKeys -> com.badlogic.gdx.utils.ay:
    com.badlogic.gdx.utils.Array keys -> a
    void reset() -> c
    java.lang.Object next() -> next
    void remove() -> remove
com.badlogic.gdx.utils.OrderedMap$OrderedMapValues -> com.badlogic.gdx.utils.az:
    com.badlogic.gdx.utils.Array keys -> a
    void reset() -> c
    java.lang.Object next() -> next
    void remove() -> remove
com.badlogic.gdx.utils.Pool -> com.badlogic.gdx.utils.ba:
    int max -> b
    int peak -> c
    com.badlogic.gdx.utils.Array freeObjects -> a
    java.lang.Object newObject() -> b
    java.lang.Object obtain() -> c
    void free(java.lang.Object) -> a
    void freeAll(com.badlogic.gdx.utils.Array) -> a
com.badlogic.gdx.utils.Pool$Poolable -> com.badlogic.gdx.utils.bb:
    void reset() -> a
com.badlogic.gdx.utils.Pools -> com.badlogic.gdx.utils.bc:
    com.badlogic.gdx.utils.ObjectMap typePools -> a
    com.badlogic.gdx.utils.Pool get(java.lang.Class,int) -> a
    com.badlogic.gdx.utils.Pool get(java.lang.Class) -> a
    java.lang.Object obtain(java.lang.Class) -> b
    void free(java.lang.Object) -> a
    void freeAll(com.badlogic.gdx.utils.Array,boolean) -> a
com.badlogic.gdx.utils.PropertiesUtils -> com.badlogic.gdx.utils.bd:
    void load(com.badlogic.gdx.utils.ObjectMap,java.io.Reader) -> a
com.badlogic.gdx.utils.ReflectionPool -> com.badlogic.gdx.utils.be:
    com.badlogic.gdx.utils.reflect.Constructor constructor -> a
    com.badlogic.gdx.utils.reflect.Constructor findConstructor(java.lang.Class) -> a
    java.lang.Object newObject() -> b
com.badlogic.gdx.utils.Scaling -> com.badlogic.gdx.utils.bf:
    com.badlogic.gdx.utils.Scaling fit -> a
    com.badlogic.gdx.utils.Scaling fill -> b
    com.badlogic.gdx.utils.Scaling fillX -> c
    com.badlogic.gdx.utils.Scaling fillY -> d
    com.badlogic.gdx.utils.Scaling stretch -> e
    com.badlogic.gdx.utils.Scaling stretchX -> f
    com.badlogic.gdx.utils.Scaling stretchY -> g
    com.badlogic.gdx.utils.Scaling none -> h
    com.badlogic.gdx.math.Vector2 temp -> i
    com.badlogic.gdx.utils.Scaling[] $VALUES -> j
    com.badlogic.gdx.utils.Scaling[] values() -> values
    com.badlogic.gdx.utils.Scaling valueOf(java.lang.String) -> valueOf
    com.badlogic.gdx.math.Vector2 apply(float,float,float,float) -> a
com.badlogic.gdx.utils.Scaling$1 -> com.badlogic.gdx.utils.bg:
    int[] $SwitchMap$com$badlogic$gdx$utils$Scaling -> a
com.badlogic.gdx.utils.SerializationException -> com.badlogic.gdx.utils.bh:
    java.lang.StringBuffer trace -> a
    java.lang.String getMessage() -> getMessage
    void addTrace(java.lang.String) -> a
com.badlogic.gdx.utils.SharedLibraryLoader -> com.badlogic.gdx.utils.bi:
    boolean isWindows -> a
    boolean isLinux -> b
    boolean isMac -> c
    boolean isIos -> d
    boolean isAndroid -> e
    boolean isARM -> f
    boolean is64Bit -> g
    java.lang.String abi -> h
    java.util.HashSet loadedLibraries -> i
    java.lang.String nativesJar -> j
    java.lang.String crc(java.io.InputStream) -> a
    java.lang.String mapLibraryName(java.lang.String) -> a
    void load(java.lang.String) -> b
    java.io.InputStream readFile(java.lang.String) -> c
    java.io.File extractFile(java.lang.String,java.lang.String,java.io.File) -> a
    void loadFile(java.lang.String) -> d
    java.lang.Throwable loadFile(java.lang.String,java.lang.String,java.io.File) -> b
com.badlogic.gdx.utils.ShortArray -> com.badlogic.gdx.utils.bj:
    short[] items -> a
    int size -> b
    boolean ordered -> c
    void add(short) -> a
    short removeIndex(int) -> a
    void clear() -> a
    short[] ensureCapacity(int) -> b
    short[] resize(int) -> c
    short[] toArray() -> b
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.SnapshotArray -> com.badlogic.gdx.utils.bk:
    java.lang.Object[] snapshot -> d
    java.lang.Object[] recycled -> e
    int snapshots -> f
    java.lang.Object[] begin() -> e
    void end() -> f
    void modified() -> g
    void set(int,java.lang.Object) -> a
    void insert(int,java.lang.Object) -> b
    boolean removeValue(java.lang.Object,boolean) -> c
    java.lang.Object removeIndex(int) -> b
    java.lang.Object pop() -> a
    void clear() -> d
    void sort(java.util.Comparator) -> a
    void truncate(int) -> e
com.badlogic.gdx.utils.Sort -> com.badlogic.gdx.utils.bl:
    com.badlogic.gdx.utils.Sort instance -> a
    com.badlogic.gdx.utils.TimSort timSort -> b
    void sort(java.lang.Object[],java.util.Comparator,int,int) -> a
    com.badlogic.gdx.utils.Sort instance() -> a
com.badlogic.gdx.utils.StreamUtils -> com.badlogic.gdx.utils.bm:
    byte[] EMPTY_BYTES -> a
    void copyStream(java.io.InputStream,java.io.OutputStream) -> a
    void copyStream(java.io.InputStream,java.io.OutputStream,byte[]) -> a
    byte[] copyStreamToByteArray(java.io.InputStream,int) -> a
    void closeQuietly(java.io.Closeable) -> a
com.badlogic.gdx.utils.StreamUtils$OptimizedByteArrayOutputStream -> com.badlogic.gdx.utils.bn:
    byte[] toByteArray() -> toByteArray
com.badlogic.gdx.utils.StringBuilder -> com.badlogic.gdx.utils.bo:
    char[] chars -> a
    int length -> b
    char[] digits -> c
    int numChars(int,int) -> a
    int numChars(long,int) -> a
    void enlargeBuffer(int) -> c
    void appendNull() -> a
    void append0(char[]) -> a
    void append0(char[],int,int) -> a
    void append0(char) -> a
    void append0(java.lang.String) -> a
    void append0(java.lang.CharSequence,int,int) -> a
    char charAt(int) -> charAt
    int length() -> length
    void setLength(int) -> a
    java.lang.String substring(int,int) -> b
    java.lang.String toString() -> toString
    java.lang.CharSequence subSequence(int,int) -> subSequence
    com.badlogic.gdx.utils.StringBuilder append(boolean) -> a
    com.badlogic.gdx.utils.StringBuilder append(char) -> b
    com.badlogic.gdx.utils.StringBuilder append(int) -> b
    com.badlogic.gdx.utils.StringBuilder append(int,int) -> c
    com.badlogic.gdx.utils.StringBuilder append(int,int,char) -> a
    com.badlogic.gdx.utils.StringBuilder append(long) -> a
    com.badlogic.gdx.utils.StringBuilder append(long,int) -> b
    com.badlogic.gdx.utils.StringBuilder append(long,int,char) -> a
    com.badlogic.gdx.utils.StringBuilder append(float) -> a
    com.badlogic.gdx.utils.StringBuilder append(double) -> a
    com.badlogic.gdx.utils.StringBuilder append(java.lang.Object) -> a
    com.badlogic.gdx.utils.StringBuilder append(java.lang.String) -> b
    com.badlogic.gdx.utils.StringBuilder append(char[]) -> b
    com.badlogic.gdx.utils.StringBuilder append(char[],int,int) -> b
    com.badlogic.gdx.utils.StringBuilder append(java.lang.CharSequence) -> a
    com.badlogic.gdx.utils.StringBuilder append(java.lang.CharSequence,int,int) -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.Appendable append(char) -> append
    java.lang.Appendable append(java.lang.CharSequence,int,int) -> append
    java.lang.Appendable append(java.lang.CharSequence) -> append
com.badlogic.gdx.utils.TextFormatter -> com.badlogic.gdx.utils.bp:
    java.text.MessageFormat messageFormat -> a
    com.badlogic.gdx.utils.StringBuilder buffer -> b
com.badlogic.gdx.utils.TimSort -> com.badlogic.gdx.utils.bq:
    java.lang.Object[] a -> a
    java.util.Comparator c -> b
    int minGallop -> c
    java.lang.Object[] tmp -> d
    int tmpCount -> e
    int stackSize -> f
    int[] runBase -> g
    int[] runLen -> h
    void doSort(java.lang.Object[],java.util.Comparator,int,int) -> a
    void binarySort(java.lang.Object[],int,int,int,java.util.Comparator) -> a
    int countRunAndMakeAscending(java.lang.Object[],int,int,java.util.Comparator) -> a
    void reverseRange(java.lang.Object[],int,int) -> a
    int minRunLength(int) -> a
    void pushRun(int,int) -> a
    void mergeCollapse() -> a
    void mergeForceCollapse() -> b
    void mergeAt(int) -> b
    int gallopLeft(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator) -> a
    int gallopRight(java.lang.Object,java.lang.Object[],int,int,int,java.util.Comparator) -> b
    void mergeLo(int,int,int,int) -> a
    void mergeHi(int,int,int,int) -> b
    java.lang.Object[] ensureCapacity(int) -> c
    void rangeCheck(int,int,int) -> a
com.badlogic.gdx.utils.TimeUtils -> com.badlogic.gdx.utils.br:
    long nanoTime() -> a
    long millis() -> b
com.badlogic.gdx.utils.Timer -> com.badlogic.gdx.utils.bs:
    com.badlogic.gdx.utils.Array instances -> a
    com.badlogic.gdx.utils.Timer$TimerThread thread -> b
    com.badlogic.gdx.utils.Timer instance -> c
    com.badlogic.gdx.utils.Array tasks -> d
    com.badlogic.gdx.utils.Timer instance() -> a
    com.badlogic.gdx.utils.Timer$Task scheduleTask(com.badlogic.gdx.utils.Timer$Task,float) -> a
    com.badlogic.gdx.utils.Timer$Task scheduleTask(com.badlogic.gdx.utils.Timer$Task,float,float,int) -> a
    void start() -> b
    long update(long,long) -> a
    void delay(long) -> a
    void wake() -> c
    com.badlogic.gdx.utils.Timer$Task schedule(com.badlogic.gdx.utils.Timer$Task,float) -> b
com.badlogic.gdx.utils.Timer$Task -> com.badlogic.gdx.utils.bt:
    long executeTimeMillis -> b
    long intervalMillis -> c
    int repeatCount -> d
    void cancel() -> a
    boolean isScheduled() -> b
com.badlogic.gdx.utils.Timer$TimerThread -> com.badlogic.gdx.utils.bu:
    com.badlogic.gdx.Application app -> a
    long pauseMillis -> b
    void run() -> run
    void resume() -> b
    void pause() -> a
    void dispose() -> c
com.badlogic.gdx.utils.UBJsonReader -> com.badlogic.gdx.utils.bv:
    boolean oldFormat -> a
    com.badlogic.gdx.utils.JsonValue parse(java.io.InputStream) -> a
    com.badlogic.gdx.utils.JsonValue parse(com.badlogic.gdx.files.FileHandle) -> a
    com.badlogic.gdx.utils.JsonValue parse(java.io.DataInputStream) -> a
    com.badlogic.gdx.utils.JsonValue parse(java.io.DataInputStream,byte) -> a
    com.badlogic.gdx.utils.JsonValue parseArray(java.io.DataInputStream) -> b
    com.badlogic.gdx.utils.JsonValue parseObject(java.io.DataInputStream) -> c
    com.badlogic.gdx.utils.JsonValue parseData(java.io.DataInputStream,byte) -> b
    java.lang.String parseString(java.io.DataInputStream,byte) -> c
    java.lang.String parseString(java.io.DataInputStream,boolean,byte) -> a
    long parseSize(java.io.DataInputStream,boolean,long) -> a
    long parseSize(java.io.DataInputStream,byte,boolean,long) -> a
    short readUChar(java.io.DataInputStream) -> d
    int readUShort(java.io.DataInputStream) -> e
    long readUInt(java.io.DataInputStream) -> f
    java.lang.String readString(java.io.DataInputStream,long) -> a
com.badlogic.gdx.utils.XmlReader -> com.badlogic.gdx.utils.bw:
    com.badlogic.gdx.utils.Array elements -> a
    com.badlogic.gdx.utils.XmlReader$Element root -> b
    com.badlogic.gdx.utils.XmlReader$Element current -> c
    com.badlogic.gdx.utils.StringBuilder textBuffer -> d
    byte[] _xml_actions -> e
    byte[] _xml_key_offsets -> f
    char[] _xml_trans_keys -> g
    byte[] _xml_single_lengths -> h
    byte[] _xml_range_lengths -> i
    short[] _xml_index_offsets -> j
    byte[] _xml_indicies -> k
    byte[] _xml_trans_targs -> l
    byte[] _xml_trans_actions -> m
    com.badlogic.gdx.utils.XmlReader$Element parse(java.io.Reader) -> a
    com.badlogic.gdx.utils.XmlReader$Element parse(com.badlogic.gdx.files.FileHandle) -> a
    com.badlogic.gdx.utils.XmlReader$Element parse(char[],int,int) -> a
    byte[] init__xml_actions_0() -> b
    byte[] init__xml_key_offsets_0() -> c
    char[] init__xml_trans_keys_0() -> d
    byte[] init__xml_single_lengths_0() -> e
    byte[] init__xml_range_lengths_0() -> f
    short[] init__xml_index_offsets_0() -> g
    byte[] init__xml_indicies_0() -> h
    byte[] init__xml_trans_targs_0() -> i
    byte[] init__xml_trans_actions_0() -> j
    void open(java.lang.String) -> a
    void attribute(java.lang.String,java.lang.String) -> a
    java.lang.String entity(java.lang.String) -> b
    void text(java.lang.String) -> c
    void close() -> a
com.badlogic.gdx.utils.XmlReader$Element -> com.badlogic.gdx.utils.bx:
    java.lang.String name -> a
    com.badlogic.gdx.utils.ObjectMap attributes -> b
    com.badlogic.gdx.utils.Array children -> c
    java.lang.String text -> d
    com.badlogic.gdx.utils.XmlReader$Element parent -> e
    java.lang.String getName() -> a
    java.lang.String getAttribute(java.lang.String) -> a
    java.lang.String getAttribute(java.lang.String,java.lang.String) -> a
    void setAttribute(java.lang.String,java.lang.String) -> b
    int getChildCount() -> b
    com.badlogic.gdx.utils.XmlReader$Element getChild(int) -> a
    void addChild(com.badlogic.gdx.utils.XmlReader$Element) -> a
    java.lang.String getText() -> c
    void setText(java.lang.String) -> b
    void removeChild(com.badlogic.gdx.utils.XmlReader$Element) -> b
    com.badlogic.gdx.utils.XmlReader$Element getParent() -> d
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String) -> c
    com.badlogic.gdx.utils.XmlReader$Element getChildByName(java.lang.String) -> d
    com.badlogic.gdx.utils.Array getChildrenByName(java.lang.String) -> e
    float getFloatAttribute(java.lang.String,float) -> a
    int getIntAttribute(java.lang.String) -> f
    int getIntAttribute(java.lang.String,int) -> a
    java.lang.String get(java.lang.String,java.lang.String) -> c
com.badlogic.gdx.utils.async.AsyncExecutor -> com.badlogic.gdx.utils.a.a:
    java.util.concurrent.ExecutorService executor -> a
    com.badlogic.gdx.utils.async.AsyncResult submit(com.badlogic.gdx.utils.async.AsyncTask) -> a
    void dispose() -> c
com.badlogic.gdx.utils.async.AsyncExecutor$1 -> com.badlogic.gdx.utils.a.b:
    com.badlogic.gdx.utils.async.AsyncExecutor this$0 -> a
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.badlogic.gdx.utils.async.AsyncExecutor$2 -> com.badlogic.gdx.utils.a.c:
    com.badlogic.gdx.utils.async.AsyncTask val$task -> a
    com.badlogic.gdx.utils.async.AsyncExecutor this$0 -> b
    java.lang.Object call() -> call
com.badlogic.gdx.utils.async.AsyncResult -> com.badlogic.gdx.utils.a.d:
    java.util.concurrent.Future future -> a
    boolean isDone() -> a
    java.lang.Object get() -> b
com.badlogic.gdx.utils.async.AsyncTask -> com.badlogic.gdx.utils.a.e:
    java.lang.Object call() -> d
com.badlogic.gdx.utils.async.ThreadUtils -> com.badlogic.gdx.utils.a.f:
    void yield() -> a
com.badlogic.gdx.utils.reflect.ArrayReflection -> com.badlogic.gdx.utils.b.a:
    java.lang.Object newInstance(java.lang.Class,int) -> a
    void set(java.lang.Object,int,java.lang.Object) -> a
com.badlogic.gdx.utils.reflect.ClassReflection -> com.badlogic.gdx.utils.b.b:
    java.lang.Class forName(java.lang.String) -> a
    java.lang.String getSimpleName(java.lang.Class) -> a
    boolean isAssignableFrom(java.lang.Class,java.lang.Class) -> a
    boolean isMemberClass(java.lang.Class) -> b
    boolean isStaticClass(java.lang.Class) -> c
    java.lang.Object newInstance(java.lang.Class) -> d
    com.badlogic.gdx.utils.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> a
    com.badlogic.gdx.utils.reflect.Constructor getDeclaredConstructor(java.lang.Class,java.lang.Class[]) -> b
    com.badlogic.gdx.utils.reflect.Field[] getDeclaredFields(java.lang.Class) -> e
com.badlogic.gdx.utils.reflect.Constructor -> com.badlogic.gdx.utils.b.c:
    java.lang.reflect.Constructor constructor -> a
    java.lang.Class getDeclaringClass() -> a
    void setAccessible(boolean) -> a
    java.lang.Object newInstance(java.lang.Object[]) -> a
com.badlogic.gdx.utils.reflect.Field -> com.badlogic.gdx.utils.b.d:
    java.lang.reflect.Field field -> a
    java.lang.String getName() -> a
    java.lang.Class getType() -> b
    boolean isAccessible() -> c
    void setAccessible(boolean) -> a
    boolean isStatic() -> d
    boolean isTransient() -> e
    boolean isSynthetic() -> f
    java.lang.Class getElementType(int) -> a
    void set(java.lang.Object,java.lang.Object) -> a
com.badlogic.gdx.utils.reflect.ReflectionException -> com.badlogic.gdx.utils.b.e:
com.badlogic.gdx.utils.viewport.ScalingViewport -> com.badlogic.gdx.utils.c.a:
    com.badlogic.gdx.utils.Scaling scaling -> a
    void update(int,int,boolean) -> a
com.badlogic.gdx.utils.viewport.StretchViewport -> com.badlogic.gdx.utils.c.b:
com.badlogic.gdx.utils.viewport.Viewport -> com.badlogic.gdx.utils.c.c:
    com.badlogic.gdx.graphics.Camera camera -> a
    float worldWidth -> b
    float worldHeight -> c
    int screenX -> d
    int screenY -> e
    int screenWidth -> f
    int screenHeight -> g
    com.badlogic.gdx.math.Vector3 tmp -> h
    void apply(boolean) -> a
    void update(int,int,boolean) -> a
    com.badlogic.gdx.math.Vector2 unproject(com.badlogic.gdx.math.Vector2) -> a
    void calculateScissors(com.badlogic.gdx.math.Matrix4,com.badlogic.gdx.math.Rectangle,com.badlogic.gdx.math.Rectangle) -> a
    com.badlogic.gdx.graphics.Camera getCamera() -> a
    void setCamera(com.badlogic.gdx.graphics.Camera) -> a
    float getWorldWidth() -> b
    float getWorldHeight() -> c
    void setWorldSize(float,float) -> a
    int getScreenX() -> d
    int getScreenY() -> e
    int getScreenWidth() -> f
    int getScreenHeight() -> g
    void setScreenBounds(int,int,int,int) -> a
ui.story.lemoon.BsuEvent -> ui.story.lemoon.a:
    void notify(ui.story.lemoon.msg.MyMsg) -> a
ui.story.lemoon.Configer -> ui.story.lemoon.b:
    int MAP_WIDTH -> a
    int MAP_HEIGHT -> b
    int mCurPage -> c
    boolean mBhadsettime -> d
    int mHour -> e
    int mMin -> f
    int mSec -> g
    boolean mBDayMode -> h
    ui.story.lemoon.MyGame game -> i
    com.badlogic.gdx.graphics.g2d.TextureAtlas mTextureAltas -> j
    com.badlogic.gdx.graphics.g2d.BitmapFont font -> k
    float mCurCameraZoom -> l
ui.story.lemoon.MyGame -> ui.story.lemoon.c:
    ui.story.lemoon.BsuEvent mBEvent -> b
    com.badlogic.gdx.assets.AssetManager manager -> c
    void notify(ui.story.lemoon.msg.MyMsg) -> a
    void create() -> a
    void pause() -> c
    void resume() -> d
    com.badlogic.gdx.assets.AssetManager getManager() -> f
ui.story.lemoon.actor.CartonActor -> ui.story.lemoon.a.a:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion mTextureRegion -> l
    float mPosx -> m
    float mPosy -> n
    float mW -> o
    float mH -> p
    boolean mbHadGrowed -> q
    ui.story.lemoon.Configer mCfg -> r
    void checkShow() -> w
    void addGrowAction() -> x
    void act(float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
ui.story.lemoon.actor.CartonActor$1 -> ui.story.lemoon.a.b:
    ui.story.lemoon.actor.CartonActor this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
ui.story.lemoon.actor.CloudActor1 -> ui.story.lemoon.a.c:
    ui.story.lemoon.Configer mCfg -> l
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion mTrDayCloud -> m
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion mTrNightCloud -> n
    float mDayW -> o
    float mDayH -> p
    float mNightW -> q
    float mNightH -> r
    float mNight1Posx -> s
    float mNight1Posy -> t
    float mNight2Posx -> u
    float mNight2Posy -> v
    int mystep -> w
    void reset() -> x
    void computNightPos() -> w
    void act(float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
ui.story.lemoon.actor.FanActor -> ui.story.lemoon.a.d:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion mTextureRegion -> l
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion mTower -> m
    float mPosx -> n
    float mPosy -> o
    float mW -> p
    float mH -> q
    ui.story.lemoon.Configer mCfg -> r
    float mSpeed -> s
    boolean mbPressed -> t
    com.badlogic.gdx.scenes.scene2d.actions.RotateToAction action -> u
    void act(float) -> a
    void checkShow() -> w
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
ui.story.lemoon.actor.FanActor$1 -> ui.story.lemoon.a.e:
    ui.story.lemoon.actor.FanActor this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
    void touchUp(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> b
ui.story.lemoon.actor.GuoXueActor -> ui.story.lemoon.a.f:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion mTextureRegion -> l
    float mPosx -> m
    float mPosy -> n
    float mW -> o
    float mH -> p
    boolean mbHadGrowed -> q
    ui.story.lemoon.Configer mCfg -> r
    void checkShow() -> w
    void addGrowAction() -> x
    void act(float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
ui.story.lemoon.actor.GuoXueActor$1 -> ui.story.lemoon.a.g:
    ui.story.lemoon.actor.GuoXueActor this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
ui.story.lemoon.actor.LandActor -> ui.story.lemoon.a.h:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion mTextureRegion -> l
    float mPosx -> m
    float mPosy -> n
    float mW -> o
    float mH -> p
    float mClockW -> q
    float mClockH -> r
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion mClock -> s
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion mRTxHour -> t
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion mRTxMin -> u
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion mRTxSec -> v
    float mPosHourX -> w
    float mPosHourY -> x
    float mPosMinX -> y
    float mPosMinY -> z
    float mPosSecX -> A
    float mPosSecY -> B
    float mPosTimeX -> C
    float mPosTimeY -> D
    int stateTime_Time -> E
    com.badlogic.gdx.graphics.g2d.Animation mRippleAnim -> F
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion[] mRippleFrams -> G
    float mPosRippleX -> H
    float mPosRippleY -> I
    com.badlogic.gdx.graphics.g2d.Animation mFlowAnim -> J
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion[] mFlowFrams -> K
    float mPosFlowX -> L
    float mPosFlowY -> M
    float stateTime_Flow -> N
    ui.story.lemoon.Configer mCfg -> O
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion mRotCloud -> P
    float mPosCloudX -> Q
    float mPosCloudY -> R
    java.lang.String mTimeStr -> S
    java.text.SimpleDateFormat formatter -> T
    java.text.SimpleDateFormat formatter_H -> U
    java.text.SimpleDateFormat formatter_M -> V
    java.text.SimpleDateFormat formatter_S -> W
    float mRotatHour -> X
    float mRotatMin -> Y
    float mRotatSec -> Z
    boolean bfirst -> aa
    java.util.Date mCurDate -> ab
    float angle -> ac
    float step -> ad
    boolean bshowcloud -> ae
    void genTimeInfo() -> w
    void drawTimeRela(com.badlogic.gdx.graphics.g2d.Batch) -> a
    void drawRipple(com.badlogic.gdx.graphics.g2d.Batch) -> b
    void drawFlow(com.badlogic.gdx.graphics.g2d.Batch) -> c
    void computeCloudAngle() -> x
    void drawCloud(com.badlogic.gdx.graphics.g2d.Batch) -> d
    void act(float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
ui.story.lemoon.actor.LanguageActor -> ui.story.lemoon.a.i:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion mTextureRegion -> l
    float mPosx -> m
    float mPosy -> n
    float mW -> o
    float mH -> p
    boolean mbHadGrowed -> q
    ui.story.lemoon.Configer mCfg -> r
    void addGrowAction() -> w
    void checkShow() -> x
    void act(float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
ui.story.lemoon.actor.LanguageActor$1 -> ui.story.lemoon.a.j:
    ui.story.lemoon.actor.LanguageActor this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
ui.story.lemoon.actor.LifeActor -> ui.story.lemoon.a.k:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion mTextureRegion -> l
    float mPosx -> m
    float mPosy -> n
    float mW -> o
    float mH -> p
    boolean mbHadGrowed -> q
    ui.story.lemoon.Configer mCfg -> r
    void addGrowAction() -> w
    void checkShow() -> x
    void act(float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
ui.story.lemoon.actor.LifeActor$1 -> ui.story.lemoon.a.l:
    ui.story.lemoon.actor.LifeActor this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
ui.story.lemoon.actor.LocalActor -> ui.story.lemoon.a.m:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion mTextureRegion -> l
    float mPosx -> m
    float mPosy -> n
    float mW -> o
    float mH -> p
    boolean mbHadGrowed -> q
    ui.story.lemoon.Configer mCfg -> r
    void addGrowAction() -> w
    void checkShow() -> x
    void act(float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
ui.story.lemoon.actor.LocalActor$1 -> ui.story.lemoon.a.n:
    ui.story.lemoon.actor.LocalActor this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
ui.story.lemoon.actor.LogoActor -> ui.story.lemoon.a.o:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion mTextureRegion -> l
    float mPosx -> m
    float mPosy -> n
    float mW -> o
    float mH -> p
    boolean mbHadGrowed -> q
    ui.story.lemoon.Configer mCfg -> r
    java.lang.Runnable mFlip -> s
    void act(float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
ui.story.lemoon.actor.LogoActor$1 -> ui.story.lemoon.a.p:
    ui.story.lemoon.actor.LogoActor this$0 -> a
    void run() -> run
ui.story.lemoon.actor.LogoActor$2 -> ui.story.lemoon.a.q:
    ui.story.lemoon.actor.LogoActor this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
ui.story.lemoon.actor.MathActor -> ui.story.lemoon.a.r:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion mTextureRegion -> l
    float mPosx -> m
    float mPosy -> n
    float mW -> o
    float mH -> p
    boolean mbHadGrowed -> q
    ui.story.lemoon.Configer mCfg -> r
    void addGrowAction() -> w
    void checkShow() -> x
    void act(float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
ui.story.lemoon.actor.MathActor$1 -> ui.story.lemoon.a.s:
    ui.story.lemoon.actor.MathActor this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
ui.story.lemoon.actor.MoonActor -> ui.story.lemoon.a.t:
    ui.story.lemoon.Configer mCfg -> l
    com.badlogic.gdx.graphics.g2d.Animation mMoonAnim -> m
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion[] mMoonFrams -> n
    float mPosMoonX -> o
    float mPosMoonY -> p
    float stateTime -> q
    float stateTime2 -> r
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    void checkState() -> w
    void act(float) -> a
    void drawMoon(com.badlogic.gdx.graphics.g2d.Batch) -> a
ui.story.lemoon.actor.MusicActor -> ui.story.lemoon.a.u:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion mTextureRegion -> l
    float mPosx -> m
    float mPosy -> n
    float mW -> o
    float mH -> p
    boolean mbHadGrowed -> q
    ui.story.lemoon.Configer mCfg -> r
    void checkShow() -> w
    void addGrowAction() -> x
    void act(float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
ui.story.lemoon.actor.MusicActor$1 -> ui.story.lemoon.a.v:
    ui.story.lemoon.actor.MusicActor this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
ui.story.lemoon.actor.PaintActor -> ui.story.lemoon.a.w:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion mTextureRegion -> l
    float mPosx -> m
    float mPosy -> n
    float mW -> o
    float mH -> p
    boolean mbHadGrowed -> q
    ui.story.lemoon.Configer mCfg -> r
    void addGrowAction() -> w
    void checkShow() -> x
    void act(float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
ui.story.lemoon.actor.PaintActor$1 -> ui.story.lemoon.a.x:
    ui.story.lemoon.actor.PaintActor this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
ui.story.lemoon.actor.RainBowActor -> ui.story.lemoon.a.y:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion mRainbow -> l
    float mPosx -> m
    float mPosy -> n
    float mW -> o
    float mH -> p
    boolean mbHadGrowed -> q
    ui.story.lemoon.Configer mCfg -> r
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
ui.story.lemoon.actor.ScienceActor -> ui.story.lemoon.a.z:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion mTextureRegion -> l
    float mPosx -> m
    float mPosy -> n
    float mW -> o
    float mH -> p
    boolean mbHadGrowed -> q
    ui.story.lemoon.Configer mCfg -> r
    void addGrowAction() -> w
    void checkShow() -> x
    void act(float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
ui.story.lemoon.actor.ScienceActor$1 -> ui.story.lemoon.a.aa:
    ui.story.lemoon.actor.ScienceActor this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
ui.story.lemoon.actor.SettingActor -> ui.story.lemoon.a.ab:
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion mTextureRegion -> l
    float mPosx -> m
    float mPosy -> n
    float mW -> o
    float mH -> p
    boolean mbHadGrowed -> q
    ui.story.lemoon.Configer mCfg -> r
    void addGrowAction() -> w
    void checkShow() -> x
    void act(float) -> a
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
ui.story.lemoon.actor.SettingActor$1 -> ui.story.lemoon.a.ac:
    ui.story.lemoon.actor.SettingActor this$0 -> a
    boolean touchDown(com.badlogic.gdx.scenes.scene2d.InputEvent,float,float,int,int) -> a
ui.story.lemoon.actor.SunActor -> ui.story.lemoon.a.ad:
    ui.story.lemoon.Configer mCfg -> l
    com.badlogic.gdx.graphics.g2d.Animation mSunAnim -> m
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion[] mSunFrams -> n
    float mPosSunX -> o
    float mPosSunY -> p
    float stateTime -> q
    float stateTime2 -> r
    float lasttime -> s
    float lastangle -> t
    float mRadius -> u
    float mOrgX -> v
    float mOrgY -> w
    int lastsec -> x
    void draw(com.badlogic.gdx.graphics.g2d.Batch,float) -> a
    void computePosition() -> w
    void checkState() -> x
    void act(float) -> a
    void drawSun(com.badlogic.gdx.graphics.g2d.Batch) -> a
ui.story.lemoon.android.AndroidLauncher -> ui.story.lemoon.android.AndroidLauncher:
    ui.story.lemoon.android.AndroidLauncher$BatteryReceiver batteryReceiver -> o
    void onCreate(android.os.Bundle) -> onCreate
    void onPause() -> onPause
    void onResume() -> onResume
    void onStop() -> onStop
    void onDestroy() -> onDestroy
ui.story.lemoon.android.AndroidLauncher$1 -> ui.story.lemoon.android.a:
    ui.story.lemoon.android.AndroidLauncher this$0 -> a
    void notify(ui.story.lemoon.msg.MyMsg) -> a
ui.story.lemoon.android.AndroidLauncher$BatteryReceiver -> ui.story.lemoon.android.b:
    ui.story.lemoon.android.AndroidLauncher this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
ui.story.lemoon.msg.MyMsg -> ui.story.lemoon.b.a:
    int what -> a
ui.story.lemoon.scr.v2.SCRLoading -> ui.story.lemoon.c.a.a:
    com.badlogic.gdx.Game game -> a
    com.badlogic.gdx.graphics.g2d.TextureAtlas textureAtlas -> b
    com.badlogic.gdx.graphics.g2d.SpriteBatch batch -> v
    com.badlogic.gdx.graphics.g2d.Sprite mHand -> c
    com.badlogic.gdx.graphics.g2d.Sprite mUnlock -> d
    com.badlogic.gdx.graphics.g2d.Animation boatAnim -> e
    com.badlogic.gdx.graphics.OrthographicCamera camera -> f
    com.badlogic.gdx.graphics.OrthographicCamera cameraUI -> g
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion mWave1 -> h
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion mWave2 -> i
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion mBg -> j
    com.badlogic.gdx.audio.Music music -> k
    float W -> l
    float H -> m
    float mWave1OffsetX -> n
    float mWave2OffsetX -> o
    int mHandStep -> p
    int mUnlockStep -> q
    float mUnlockAlpha -> r
    boolean mbPressed -> s
    float mboatPos -> t
    float elapsedTime -> u
    void show() -> a
    void upateWave() -> e
    void updateHand() -> f
    void updateUnlock() -> g
    void render(float) -> a
    void resize(int,int) -> b
    void pause() -> b
    void resume() -> c
    void hide() -> d
    boolean keyDown(int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
    boolean mouseMoved(int,int) -> a
    boolean scrolled(int) -> c
ui.story.lemoon.scr.v2.SCRMain -> ui.story.lemoon.c.a.b:
    int mCurPg -> a
    com.badlogic.gdx.scenes.scene2d.Stage mStage1 -> w
    com.badlogic.gdx.graphics.OrthographicCamera mCamera -> x
    com.badlogic.gdx.maps.MapRenderer mMapRenderer -> y
    com.badlogic.gdx.maps.tiled.TiledMap mMap -> b
    com.badlogic.gdx.utils.viewport.Viewport viewport -> c
    ui.story.lemoon.Configer mCfg -> d
    com.badlogic.gdx.InputMultiplexer multiplexer -> e
    com.badlogic.gdx.input.GestureDetector mGesture -> f
    com.badlogic.gdx.InputProcessor mInput -> g
    java.util.HashMap mLayerMap -> h
    com.badlogic.gdx.graphics.g2d.SpriteBatch batch -> i
    com.badlogic.gdx.graphics.OrthographicCamera camera -> j
    com.badlogic.gdx.graphics.g2d.TextureAtlas$AtlasRegion mbottomCloud -> k
    float mcloudOffsetX -> l
    float mcloudOffsetY -> m
    float mCloudW -> n
    float mCloud2W -> o
    com.badlogic.gdx.audio.Music night_music -> p
    int mMvStepsX -> q
    int mMvStepsY -> r
    float mXcnt -> s
    float mYcnt -> t
    float mMovePeriod -> u
    boolean mbfirst -> z
    float mToDftPeriod -> v
    void show() -> a
    void initforcloud() -> e
    void upateCloud() -> f
    void DrawCloud() -> g
    void initStageItems() -> h
    void setStage() -> i
    void initRes() -> j
    void parserLayer() -> l
    void handleBg() -> m
    void stageRender() -> k
    void render(float) -> a
    void resize(int,int) -> b
    void pause() -> b
    void resume() -> c
    void hide() -> d
    boolean touchDown(float,float,int,int) -> a
    boolean tap(float,float,int,int) -> b
    boolean longPress(float,float) -> a
    boolean fling(float,float,int) -> a
    boolean pan(float,float,float,float) -> a
    boolean panStop(float,float,int,int) -> c
    boolean zoom(float,float) -> b
    boolean pinch(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> a
    void anim_toDefault() -> n
    void resetView() -> o
ui.story.lemoon.scr.v2.SCRMain$1 -> ui.story.lemoon.c.a.c:
    ui.story.lemoon.scr.v2.SCRMain this$0 -> a
    boolean touchUp(int,int,int,int) -> b
    boolean touchDragged(int,int,int) -> a
    boolean touchDown(int,int,int,int) -> a
    boolean scrolled(int) -> c
    boolean mouseMoved(int,int) -> a
    boolean keyUp(int) -> b
    boolean keyTyped(char) -> a
    boolean keyDown(int) -> a
